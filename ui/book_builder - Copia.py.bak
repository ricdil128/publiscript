"""
Builder principale per la creazione di libri.
"""

import re
import sqlite3
import time
import logging
import os
import json
import traceback
import gradio as gr
from datetime import datetime
from pathlib import Path
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

from ai_interfaces.genspark_driver import setup_browser, check_login, create_fresh_chat, get_input_box, clear_chat
from framework.crisp_framework import CRISPFramework
from .chat_manager import ChatManager
from .cooldown_manager import CooldownManager

class AIBookBuilder:
    def __init__(self):
        self.cooldown_manager = CooldownManager()
        self.chat_manager = ChatManager(parent=self)
        self.is_logged_in = False
        self.driver = None
        self.log_history = []
        self.chat_manager = ChatManager(parent=self)  # Passa il riferimento di sé stesso
        self.current_analysis = None           
        
        import logging
        logger = logging.getLogger("AIBookBuilder")
        
        # Inizializza il framework CRISP
        self.crisp = CRISPFramework(
            prompt_dir="prompt_crisp",
    	    project_db_path="crisp_projects.db",
    	    driver=None  # Il driver verrà impostato dopo la connessione
	)
        
        # Rimuovo il percorso manuale: uso sempre CRISP
        self.use_crisp = True
        
        # Tipi di libro disponibili
        self.book_types = [
            "Manuale (Non-Fiction)",
            "Ricettario",
            "Craft & Hobby",
            "Survival & Outdoor",
            "Test Study"
        ]

        # Mercati Amazon disponibili
        self.markets = {
            "USA": "Amazon.com",
            "Italia": "Amazon.it",
            "Francia": "Amazon.fr",
            "Inghilterra": "Amazon.co.uk",
            "Canada": "Amazon.ca",
            "Australia": "Amazon.com.au",
            "Spagna": "Amazon.es",
            "Germania": "Amazon.de"
        }
        
        # Prompt di analisi default
        self.default_analysis_prompt = """1) Analizza in modo rapido il mercato dei libri cartacei su {amazon_url} per la keyword {keyword}. **Keyword & trend di mercato** - Volume di ricerca mensile per il mercato {market} su {amazon_url} e BSR attuale per {keyword}. - Andamento ultimi 6 mesi per il mercato {market} su {amazon_url} della {keyword}. - Google Trends: interesse nel tempo e query correlate emergenti relative alla {keyword} sul mercato {market}. - Insight da social listening: temi e parole‑chiave in crescita per la {keyword} sul mercato {market}. - Scrivi in {lingua} ma titoli e kw nella lingua del {market}. Concludi con la parola FINE.
2) **Profittabilità & competitività** - Stima vendite mensili (range BSR), prezzo medio e margini potenziali relative alla {keyword} sul mercato {market}. - Numero di titoli concorrenti e Keyword Difficulty (KD) su {amazon_url} relative alla {keyword} nel mercato {market}. - Gap di nicchia individuati per possibili spazi di vantaggio per {keyword} nel mercato {market}. - Scrivi in {lingua} ma titoli e kw nella lingua del {market}. Concludi con la parola FINE.
3) **Analisi Top 3 libri concorrenti su {amazon_url} per la {keyword} nel mercato {market}** - Indice (capitoli principali) e pattern ricorrenti di copertina (stile, palette). - Badge/bonus offerti (risorse aggiuntive, toolkit). - Prezzo di listino, titolo/sottotitolo, descrizione A+ (contenuti enhanced). - Rating medio e numero di recensioni. - Scrivi in {lingua} ma titoli e kw nella lingua del {market}. Concludi con la parola FINE.
4) **Buyer Persona lampo per il mercato {market} e la kw {keyword}** - Profilo demografico e psicografico essenziale. - 3 bullet su bisogni chiave, paure/frustrazioni e speranze/ambizioni. - Scrivi in {lingua} ma titoli e kw nella lingua del {market}. Concludi con la parola FINE.
5) **Recensioni negative & gap contenutistici su {amazon_url} per la kw {keyword} nel mercato {market}** - Le 3 criticità più frequenti dalle recensioni 1–2★, con esempi per i libri della {keyword}. - Temi poco trattati emersi da recensioni e trend di ricerca relativi alla {keyword}. - Scrivi in {lingua} ma titoli e kw nella lingua del {market}. Concludi con la parola FINE.
6) **Angolo differenziante & USP basati sui gap della {keyword} nel mercato {market} su {amazon_url}** - Elenca i principali gap tematici individuati nell'analisi della {keyword} (argomenti sottorappresentati, frustrazioni non risolte). - Crea un libro che sfruttando i gap tematici si differenzi ed abbia un forte angolo ed un forte Usp per {keyword}. - Scrivi in {lingua} ma titoli e kw nella lingua del {market}. Concludi con la parola FINE.
7) **Titolo & sottotitolo per la keyword {keyword} nel mercato {market} su {amazon_url}** - Proponi 2–3 opzioni di titolo + sottotitolo allineate all'angolo differenziante e alla USP della {keyword}. - Per ciascuna, indica: chiarezza del messaggio, forza emotiva e potenziale SEO. - Scrivi in {lingua} ma titoli e kw nella lingua del {market}. Concludi con la parola FINE.
8) **Indice del libro** - Presenta una tabella di uno o più indici completi che rispecchiano l'angolo e il titolo trovati per la {keyword} mercato {market} su {amazon_url}. - Assicura una progressione logica che accompagna il percorso del lettore e rispecchia tutte le analisi precedenti. - Scrivi in {lingua} ma titoli e kw nella lingua del {market}. Concludi con la parola FINE. """

    def add_log(self, message):
            """Delega il logging al ChatManager"""
            return self.chat_manager.add_log(message)
        
    def log_prompt_location(self, prompt_id, section_number, action, details=None):
        """Delega il tracciamento della posizione al ChatManager"""
        return self.chat_manager.log_prompt_location(prompt_id, section_number, action, details) 

    def connect_callback(self):
        try:
            # Variabile globale per memorizzare la funzione originale
            global original_get
        
            # Se siamo già loggati e il driver è attivo, evitiamo di ricreare la sessione
            if self.is_logged_in and self.driver:
                # Aggiungiamo la patch di monitoraggio se non l'abbiamo già fatto
                if not hasattr(self, '_get_patched') or not self._get_patched:
                    original_get = self.driver.get
                
                    def log_get_call(url):
                        print(f"DEBUG_URL: Chiamata a driver.get() con URL: {url}")
                        self.add_log(f"DEBUG_URL: Navigazione a: {url}")
                        # Chiamiamo la funzione originale
                        return original_get(url)
                
                    self.driver.get = log_get_call
                    self._get_patched = True
                    self.add_log("DEBUG_URL: Monitoraggio navigazione attivato")

                timestamp = datetime.now().strftime('%H:%M:%S')
                log_message = f"[{timestamp}] Sei già connesso a Genspark. Sessione attiva mantenuta."
                self.log_history.append(log_message)

                # IMPORTANTE: Verifica che siamo nella pagina di chat corretta
                self.add_log("Verifica URL corrente ed eventuale reindirizzamento alla chat...")
                current_url = self.driver.current_url
                self.add_log(f"DEBUG_URL: URL attuale prima della verifica: {current_url}")

                if "/chat" not in current_url.lower():
                    self.add_log(f"URL corrente non è una pagina di chat: {current_url}")
                    self.add_log("Reindirizzamento alla pagina di chat...")
                    # Questo viene monitorato grazie al nostro patch
                    # self.driver.get("https://genspark.ai")
                    # time.sleep(5)
                    # self.add_log(f"DEBUG_URL: URL dopo reindirizzamento: {self.driver.current_url}")

                return self.chat_manager.get_log_history_string(), "**Stato**: Connesso - Sessione attiva"

            # Salviamo temporaneamente i messaggi di log
            logs = []

            # Aggiungiamo il primo messaggio
            timestamp = datetime.now().strftime('%H:%M:%S')
            logs.append(f"[{timestamp}] Avvio connessione browser...")

            # Avviamo il browser
            self.driver = setup_browser()
            self.add_url_change_monitor()
            self.crisp.driver = self.driver  # Aggiorna il riferimento al driver nel framework CRISP

            # Aggiungiamo la patch di monitoraggio per il nuovo driver
            original_get = self.driver.get
        
            def log_get_call(url):
                print(f"DEBUG_URL: Chiamata a driver.get() con URL: {url}")
                self.add_log(f"DEBUG_URL: Navigazione a: {url}")
                # Tracciamo anche da dove viene chiamata la funzione
                import traceback
                caller = traceback.extract_stack()[-2]
                print(f"DEBUG_URL: Chiamata da {caller.filename}:{caller.lineno}")
                # Chiamiamo la funzione originale
                return original_get(url)
        
            self.driver.get = log_get_call
            self._get_patched = True
            self.add_log("DEBUG_URL: Monitoraggio navigazione attivato per nuovo driver")

            # Dopo aver avviato il browser, aggiungi:
            self.add_log(f"Browser avviato: {self.driver is not None}")
            self.add_log("Tentativo di navigazione a Genspark...")
            # Questo viene monitorato grazie al nostro patch
            # self.driver.get("https://genspark.ai")
            # self.add_log(f"Navigazione richiesta, URL attuale: {self.driver.current_url}")

            # IMPORTANTE: Naviga DIRETTAMENTE alla pagina di chat, non alla home
            self.add_log("Navigazione diretta alla pagina di chat...")
            # Questo viene monitorato grazie al nostro patch
            self.driver.get("https://genspark.ai")
            time.sleep(7)  # Attesa più lunga per il caricamento completo

            # Verifica URL dopo la navigazione
            current_url = self.driver.current_url
            self.add_log(f"URL dopo navigazione: {current_url}")

            # Se siamo stati reindirizzati alla home o altra pagina, riprova con approccio alternativo
            if "/chat" not in current_url.lower():
                self.add_log("Reindirizzato a URL non di chat, provo approccio alternativo...")

                # Prima vai alla home
                # Questo viene monitorato grazie al nostro patch
                self.driver.get("https://genspark.ai/")
                time.sleep(3)

                # Cerca esplicitamente un link alla chat
                # chat_links = self.driver.find_elements(By.XPATH, "//a[contains(@href, '/chat')]")
                # if chat_links:
                #     self.add_log("Trovato link alla chat, cliccando...")
                #     self.add_log(f"DEBUG_URL: Cliccando link con href: {chat_links[0].get_attribute('href')}")
                #     chat_links[0].click()
                #     time.sleep(5)
                #     self.add_log(f"DEBUG_URL: URL dopo click: {self.driver.current_url}")
                # else:
                #     # Se non trovi link, prova URL diretto di nuovo
                #     self.add_log("Nessun link trovato, riprovo URL diretto con percorso completo...")
                #     # Questo viene monitorato grazie al nostro patch
                #     self.driver.get("https://genspark.ai")
                #     time.sleep(5)

            # Verifica dell'URL finale
            final_url = self.driver.current_url
            self.add_log(f"URL finale: {final_url}")

            # Controlliamo il login
            self.add_log("DEBUG_URL: Verificando login...")
            login_result = check_login(self.driver)
            self.add_log(f"DEBUG_URL: Risultato check_login: {login_result}")
        
            if not login_result:
                timestamp = datetime.now().strftime('%H:%M:%S')
                logs.append(f"[{timestamp}] ATTENZIONE: Completa manualmente il login su Genspark.ai.")
                timestamp = datetime.now().strftime('%H:%M:%S')
                logs.append(f"[{timestamp}] Assicurati di essere nella pagina della chat prima di continuare.")

                # Aggiungi un input per aspettare che l'utente finisca di fare login
                timestamp = datetime.now().strftime('%H:%M:%S')
                logs.append(f"[{timestamp}] Premi il pulsante 'Connetti' nuovamente dopo aver effettuato il login.")
        
                # Aggiorniamo la cronologia dei log attraverso il ChatManager
                for log_message in logs:
                    # Rimuoviamo il timestamp se già presente nel messaggio
                    if log_message.startswith('[') and ']' in log_message:
                        clean_message = log_message.split(']', 1)[1].strip()
                        self.chat_manager.add_log(clean_message)
                    else:
                        self.chat_manager.add_log(log_message)

                return self.chat_manager.get_log_history_string(), "**Stato**: Login richiesto"
 
                # Salva i cookie per usi futuri
                try:
                    import pickle
                    cookies = self.driver.get_cookies()
                    pickle.dump(cookies, open("genspark_cookies.pkl", "wb"))
                    timestamp = datetime.now().strftime('%H:%M:%S')
                    logs.append(f"[{timestamp}] Cookie salvati con successo!")
                except Exception as e:
                    timestamp = datetime.now().strftime('%H:%M:%S')
                    logs.append(f"[{timestamp}] Errore nel salvataggio dei cookie: {str(e)}")

            # Impostiamo lo stato di login
            self.is_logged_in = True

            # Aggiorniamo la cronologia dei log e restituiamo il tutto
            for log_message in logs:
                self.chat_manager.add_log(log_message)
            return self.chat_manager.get_log_history_string(), "**Stato**: Connesso"
        except Exception as e:
            # In caso di errore
            self.chat_manager.add_log(f"Errore: {str(e)}")
            
            # Aggiungiamo il traceback per debug
            import traceback
            tb = traceback.format_exc()
            print(f"DEBUG_URL: Eccezione in connect_callback:\n{tb}")
            
            return self.chat_manager.get_log_history_string(), "**Stato**: Errore di connessione"
        
            # Aggiungiamo il traceback per debug
            import traceback
            tb = traceback.format_exc()
            print(f"DEBUG_URL: Eccezione in connect_callback:\n{tb}")
        
            return self.chat_manager.get_log_history_string(), "**Stato**: Errore di connessione"

    def add_url_change_monitor(self):
        """Aggiunge uno script al browser per monitorare i cambiamenti di URL"""
        if not hasattr(self, 'driver') or self.driver is None:
            print("DEBUG_URL: Impossibile installare monitor URL - driver non disponibile")
            return False
        
        script = """
        let lastUrl = window.location.href;
        console.log('Monitor URL inizializzato con URL: ' + lastUrl);
    
        // Funzione per controllare periodicamente l'URL
        function checkUrlChange() {
            const currentUrl = window.location.href;
            if (currentUrl !== lastUrl) {
                console.log('URL CAMBIATO da: ' + lastUrl + ' a: ' + currentUrl);
                lastUrl = currentUrl;
            }
            setTimeout(checkUrlChange, 1000);  // Controlla ogni secondo
        }
    
        // Avvia il controllo
        checkUrlChange();
    
        // Restituisci true per confermare l'installazione
        return true;
        """
    
        try:
            result = self.driver.execute_script(script)
            print(f"DEBUG_URL: Monitor di cambio URL installato nel browser: {result}")
            return True
        except Exception as e:
            print(f"DEBUG_URL: Errore nell'installazione del monitor URL: {str(e)}")
            return False

    
    # Definisci una funzione executor che invia il prompt a Genspark
    def _analyze_market_crisp(self, book_type, keyword, language, market):
        """
        Analizza il mercato usando il framework CRISP 5.0.

        Args:
            book_type: Tipo di libro
            keyword: Keyword principale
            language: Lingua dell'output
            market: Mercato di riferimento

        Returns:
            str: Log dell'operazione
        """
        try:
            self.add_log(f"Avvio analisi CRISP 5.0 per: {keyword}")
    
            # Crea un nuovo progetto nel database CRISP
            project_name = f"{keyword} - {datetime.now().strftime('%Y-%m-%d')}"
            project_id = self.crisp.create_project(project_name)

            # Prepara i dati iniziali del progetto
            initial_data = {
                "PROJECT_ID": project_id,
                "KEYWORD": keyword,
                "LIBRO_TIPO": book_type,
                "LINGUA": language, 
                "MERCATO": market,
                "AMAZON_URL": self.markets.get(market, "Amazon.com")
            }

            # Funzione semplice che processa il prompt
            def process_prompt(prompt_text):
                self.add_log(f"Elaborazione prompt: {len(prompt_text)} caratteri")
    
                # Sostituisci le variabili nel prompt
                processed_text = prompt_text
                if "{KEYWORD}" in processed_text:
                    processed_text = processed_text.replace("{KEYWORD}", keyword)
                if "{MERCATO}" in processed_text:
                    processed_text = processed_text.replace("{MERCATO}", market)
    
                # Invia il prompt a Genspark
                response = self.send_to_genspark(processed_text)
    
                # Pulisci la risposta se contiene "FINE"
                if response and "FINE" in response.upper():
                    response = response[:response.upper().find("FINE")].strip()
        
                return response

            # SOLUZIONE - Patching del metodo execute_step
            original_execute_step = self.crisp.execute_step

            def patched_execute_step(prompt_id, project_data, executor_func):
                """
                Versione patchata di execute_step che processa una sezione alla volta.
                """
                self.add_log(f"Esecuzione patchata di step {prompt_id}")

                try:
                    # Carica i dati del prompt
                    prompt_data = self.crisp.load_prompt(prompt_id)
                    prompt_content = prompt_data["content"]

                    # Dividi il contenuto in sezioni
                    sections = prompt_content.split("\n---\n")
                    numbered_sections = []
                    for section in sections:
                        section = section.strip()
                        if re.match(r'^\d+\.', section):
                            numbered_sections.append(section)

                    if not numbered_sections:
                        numbered_sections = [prompt_content]

                    self.log_prompt_location(prompt_id, "ALL", f"Trovate {len(numbered_sections)} sezioni")

                    # Processa ogni sezione e raccogli le risposte
                    all_responses = []
                    for i, section in enumerate(numbered_sections):
                        section_number = i + 1
                        self.log_prompt_location(prompt_id, section_number, "Inizio elaborazione")

                        # Pulisci la chat prima di ogni sezione
                        try:
                            clear_chat_button = self.driver.find_element(By.CSS_SELECTOR, "button[aria-label='Clear chat']")
                            clear_chat_button.click()
                            time.sleep(2)
                        except Exception as e:
                            self.log_prompt_location(prompt_id, section_number, "Errore pulizia chat", str(e))

                        # Processa la sezione
                        processed_section = replace_variables(section.strip(), project_data)
                        response = self.send_to_genspark(processed_section, prompt_id=prompt_id, section_number=section_number)
            
                        # Log della risposta
                        response_preview = response[:100] + "..." if response else "Nessuna risposta"
                        self.log_prompt_location(prompt_id, section_number, "Risposta ricevuta", response_preview)
            
                        all_responses.append(response)

                        # Attendi che la risposta sia completa
                        if "FINE_RISPOSTA" not in response:
                            self.log_prompt_location(prompt_id, section_number, "Attesa completamento")
                            time.sleep(10)

                    # Combina tutte le risposte
                    full_result = "\n\n".join(all_responses)

                    # Estrai i dati solo dopo aver processato tutte le sezioni
                    extracted_data = self.crisp.extract_data(full_result, prompt_id)

                    # Salva il risultato nel database
                    if "PROJECT_ID" in project_data:
                        self.crisp._save_result_to_db(
                            project_data["PROJECT_ID"],
                            prompt_id,
                            full_result,
                            extracted_data
                        )

                    # Aggiorna i dati del progetto
                    project_data.update(extracted_data)

                    return project_data, full_result, extracted_data

                except Exception as e:
                    self.log_prompt_location(prompt_id, "ERROR", f"Errore in patched_execute_step: {str(e)}")
                    raise


            # Sostituisci temporaneamente il metodo execute_step
            self.crisp.execute_step = patched_execute_step

            # Esegui il flusso CRISP
            try:
                final_data, execution_history = self.crisp.execute_flow(
                    initial_data,
                    process_prompt,
                    start_step="CM-1"
                )
                self.add_log("✅ Analisi CRISP completata con successo")
            
            finally:
                # Ripristina il metodo originale
                self.crisp.execute_step = original_execute_step

            return self.chat_manager.get_log_history_string()

        except Exception as e:
            self.add_log(f"❌ Errore nell'analisi CRISP: {str(e)}")
            return self.chat_manager.get_log_history_string()

    # Definisci una funzione executor che invia il prompt a Genspark
    def execute_prompt(self, prompt_text, step_id=None, project_data=None):
        """
        Funzione robusta che esegue un prompt CRISP, gestisce errori e interruzioni,
        e garantisce il completamento anche in presenza di problemi.

        Args:
            prompt_text: Testo del prompt da inviare
            step_id: ID del prompt corrente (opzionale)
            project_data: Dati del progetto per sostituire le variabili

        Returns:
            str: Risposta cumulativa da Genspark
        """
        # Inizializzazione e logging
        prompt_id_to_use = step_id if step_id else "unknown"
        self.add_log(f"🚀 Inizio esecuzione prompt {prompt_id_to_use} ({len(prompt_text)} caratteri)")
        print(f"DEBUG: Inizio esecuzione prompt {prompt_id_to_use} ({len(prompt_text)} caratteri)")
        print(f"DEBUG: Preview prompt: {prompt_text[:200].replace(chr(10), ' ')}...")

        # Verifica browser attivo
        if not hasattr(self, 'driver') or self.driver is None:
            self.add_log("⚠️ Browser non attivo, impossibile procedere")
            print("DEBUG: Browser non attivo, impossibile procedere")
            return "ERRORE: Browser non inizializzato"

        # Verifica URL corrente
        try:
            current_url = self.driver.current_url
            self.add_log(f"🌐 URL attuale: {current_url}")
            print(f"DEBUG: URL attuale: {current_url}")
    
            # Se non siamo in una pagina di chat, naviga a Genspark
            if not ("genspark.ai" in current_url and ("/chat" in current_url or "/agents" in current_url)):
                self.add_log("🔄 Navigazione alla pagina di chat...")
                print("DEBUG: Navigazione alla pagina di chat...")
                self.driver.get("https://genspark.ai")
                time.sleep(10)
        except Exception as e:
            self.add_log(f"⚠️ Errore nella verifica URL: {str(e)}")
            print(f"DEBUG: Errore nella verifica URL: {str(e)}")

        # MODIFICA CRUCIALE: Divisione del prompt in sezioni numeriche
        import re

        # Pattern per trovare punti numerati (esempio: "1. Titolo", "2. Titolo", ecc.)
        numbered_sections = re.findall(r'(?:\n|^)(\d+\.\s+.*?)(?=(?:\n\d+\.|\n\n|$))', prompt_text, re.DOTALL)

        # Se abbiamo trovato sezioni numerate, usiamole
        if numbered_sections:
            sections = [section.strip() for section in numbered_sections]
            self.add_log(f"📋 Prompt diviso in {len(sections)} sezioni numerate")
            print(f"DEBUG: Prompt diviso in {len(sections)} sezioni numerate")
        else:
            # Fallback: dividi per righe normalmente
            sections = [line.strip() for line in prompt_text.split('\n') if line.strip()]
            self.add_log(f"📋 Prompt diviso in {len(sections)} righe (nessuna sezione numerata trovata)")
            print(f"DEBUG: Prompt diviso in {len(sections)} righe (nessuna sezione numerata trovata)")

        # Log dettagliato delle sezioni
        for i, section in enumerate(sections):
            preview = section.replace('\n', ' ')[:50]
            self.add_log(f"📄 Sezione {i+1}: {preview}..." + ("" if len(section) <= 50 else f" ({len(section)} caratteri)"))
            print(f"DEBUG: Sezione {i+1}: {preview}..." + ("" if len(section) <= 50 else f" ({len(section)} caratteri)"))

        # Variabili di monitoraggio globali
        max_global_retries = 3
        global_retry_count = 0
        cumulative_response = []

        # Loop di ripetizione globale per il prompt intero
        while global_retry_count < max_global_retries:
            try:
                self.add_log(f"📝 Tentativo globale {global_retry_count+1}/{max_global_retries}")
                print(f"DEBUG: Tentativo globale {global_retry_count+1}/{max_global_retries}")
        
                # Pulizia dell'interfaccia prima di iniziare
                try:
                    clear_chat(self.driver)
                    self.add_log("🧹 Chat pulita all'inizio dell'esecuzione")
                    print("DEBUG: Chat pulita all'inizio dell'esecuzione")
                    time.sleep(5)
                except Exception as clear_error:
                    self.add_log(f"⚠️ Impossibile pulire la chat: {str(clear_error)}")
                    print(f"DEBUG: Impossibile pulire la chat: {str(clear_error)}")
                    # Continua comunque
        
                # Processa ogni sezione
                success_sections = 0
                for i, section in enumerate(sections):
                    self.add_log(f"📌 Elaborazione sezione {i+1}/{len(sections)}...")
                    print(f"DEBUG: Elaborazione sezione {i+1}/{len(sections)}...")
            
                    # Sostituzione variabili avanzata
                    processed_section = self.replace_variables_advanced(section, project_data)
                    preview = processed_section.replace('\n', ' ')[:50]
                    self.add_log(f"✏️ Sezione processata: {preview}..." + 
                                ("" if len(processed_section) <= 50 else f" ({len(processed_section)} caratteri)"))
                    print(f"DEBUG: Sezione processata: {preview}..." + 
                         ("" if len(processed_section) <= 50 else f" ({len(processed_section)} caratteri)"))
            
                    # Verifica placeholder non risolti
                    unresolved = self.check_unresolved_placeholders(processed_section)
                    if unresolved:
                        self.add_log(f"⚠️ Placeholders non risolti: {unresolved}")
                        print(f"DEBUG: Placeholders non risolti: {unresolved}")
                        # Continua comunque, ma potrebbe causare problemi
            
                    # Tentativi per sezione singola
                    section_retry_count = 0
                    max_section_retries = 3
                    section_success = False
            
                    while section_retry_count < max_section_retries and not section_success:
                        try:
                            self.add_log(f"🔄 Tentativo {section_retry_count+1}/{max_section_retries} per sezione {i+1}")
                            print(f"DEBUG: Tentativo {section_retry_count+1}/{max_section_retries} per sezione {i+1}")
                    
                            # Sistema avanzato di pulizia input
                            input_box = self.get_clean_input_box()
                            if not input_box:
                                raise Exception("Impossibile ottenere o pulire la casella di input")
                    
                            # Inserimento testo sicuro - carattere per carattere per maggiore affidabilità
                            self.add_log(f"⌨️ Inserimento testo carattere per carattere...")
                            print(f"DEBUG: Inserimento testo carattere per carattere... ({len(processed_section)} caratteri)")
                            for char in processed_section:
                                input_box.send_keys(char)
                                time.sleep(0.008)  # Minimo ritardo per stabilità
                    
                            # Verifica prima dell'invio
                            time.sleep(1)
                            inserted_text = input_box.get_attribute("value")
                            if not inserted_text:
                                self.add_log("⚠️ Nessun testo inserito!")
                                print("DEBUG: ERRORE - Nessun testo inserito!")
                                if section_retry_count < max_section_retries - 1:
                                    section_retry_count += 1
                                    time.sleep(5)
                                    continue
                            elif len(inserted_text) < len(processed_section) * 0.9:
                                self.add_log(f"⚠️ Inserimento incompleto: {len(inserted_text)}/{len(processed_section)} caratteri")
                                print(f"DEBUG: ERRORE - Inserimento incompleto: {len(inserted_text)}/{len(processed_section)} caratteri")
                                if section_retry_count < max_section_retries - 1:
                                    section_retry_count += 1
                                    time.sleep(5)
                                    continue
                            else:
                                self.add_log(f"✅ Testo inserito correttamente: {len(inserted_text)} caratteri")
                                print(f"DEBUG: Testo inserito correttamente: {len(inserted_text)} caratteri")
                    
                            # Invio con retry integrato
                            send_success = False
                    
                            # Metodo 1: Click standard
                            try:
                                send_button = WebDriverWait(self.driver, 15).until(
                                    EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon"))
                                )
                                send_button.click()
                                self.add_log("🔘 Click standard sul pulsante di invio")
                                print("DEBUG: Click standard sul pulsante di invio")
                                send_success = True
                            except Exception as e1:
                                self.add_log(f"⚠️ Click standard fallito: {str(e1)}")
                                print(f"DEBUG: Click standard fallito: {str(e1)}")
                        
                                # Metodo 2: Click JavaScript
                                try:
                                    send_button = self.driver.find_element(By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon")
                                    self.driver.execute_script("arguments[0].click();", send_button)
                                    self.add_log("🔘 Click JavaScript sul pulsante di invio")
                                    print("DEBUG: Click JavaScript sul pulsante di invio")
                                    send_success = True
                                except Exception as e2:
                                    self.add_log(f"⚠️ Click JavaScript fallito: {str(e2)}")
                                    print(f"DEBUG: Click JavaScript fallito: {str(e2)}")
                            
                                    # Metodo 3: Tasto invio
                                    try:
                                        input_box.send_keys(Keys.RETURN)
                                        self.add_log("🔘 Invio tramite tasto RETURN")
                                        print("DEBUG: Invio tramite tasto RETURN")
                                        send_success = True
                                    except Exception as e3:
                                        self.add_log(f"❌ Tutti i metodi di invio falliti: {str(e3)}")
                                        print(f"DEBUG: Tutti i metodi di invio falliti: {str(e3)}")
                    
                            if not send_success:
                                raise Exception("Impossibile inviare il messaggio con nessun metodo")
                    
                            # Attesa iniziale per inizio elaborazione
                            self.add_log("⏳ Attesa iniziale dopo invio (10 secondi)")
                            print("DEBUG: Attesa iniziale dopo invio (10 secondi)")
                            time.sleep(10)
                    
                            # Sistema di attesa adattivo
                            max_wait_cycles = 45  # ~15 minuti totali
                            stability_threshold = 5  # 5 cicli di stabilità
                            cycle_wait = 20  # 20 secondi per ciclo
                    
                            # Inizializzazione variabili di monitoraggio
                            last_length = 0
                            stable_count = 0
                            response_text = None
                    
                            for cycle in range(max_wait_cycles):
                                try:
                                    print(f"DEBUG: Ciclo di attesa {cycle+1}/{max_wait_cycles}")
                                
                                    # Verifica limite contesto ogni 3 cicli
                                    if cycle % 3 == 0 and self.handle_context_limit():
                                        self.add_log("♻️ Limite contesto gestito durante attesa")
                                        print("DEBUG: Limite contesto gestito durante attesa")
                            
                                    # Prova diversi selettori per le risposte
                                    selectors = [
                                        ".message-content", 
                                        "div.chat-wrapper div.desc > div > div > div",
                                        "div.message div.text-wrap",
                                        ".chat-message-item .content"
                                    ]
                            
                                    # Cerca la risposta con tutti i selettori
                                    for selector in selectors:
                                        try:
                                            messages = self.driver.find_elements(By.CSS_SELECTOR, selector)
                                            if messages and len(messages) > 0:
                                                current_text = messages[-1].text.strip()
                                                if current_text:
                                                    response_text = current_text
                                                
                                                    # Debug della risposta ogni 5 cicli
                                                    if cycle % 5 == 0:
                                                        print(f"DEBUG: Salvataggio risposta - Lunghezza: {len(response_text)}")
                                                        if len(response_text) > 0:
                                                            print(f"DEBUG: Preview risposta: {response_text[:200].replace(chr(10), ' ')}...")
                                            
                                                    # Verifica terminazione esplicita
                                                    if "FINE_RISPOSTA" in response_text or "FINE" in response_text:
                                                        self.add_log(f"✅ Terminatore esplicito trovato al ciclo {cycle+1}")
                                                        print(f"DEBUG: Terminatore esplicito trovato al ciclo {cycle+1}")
                                                        terminator = "FINE_RISPOSTA" if "FINE_RISPOSTA" in response_text else "FINE"
                                                        terminator_pos = response_text.find(terminator)
                                                        print(f"DEBUG: Terminatore '{terminator}' trovato alla posizione {terminator_pos}")
                                                
                                                        # Pulisci la risposta rimuovendo il terminatore
                                                        if "FINE_RISPOSTA" in response_text:
                                                            response_text = response_text.split("FINE_RISPOSTA")[0].strip()
                                                        elif "FINE" in response_text:
                                                            response_text = response_text.split("FINE")[0].strip()
                                                    
                                                        section_success = True
                                                        break
                                            
                                                    # Verifica errori tipici
                                                    error_indicators = ["richiesta abortita", "request aborted", 
                                                                       "troppo lungo", "too long", 
                                                                       "errore durante", "error during"]
                                            
                                                    if any(e in response_text.lower() for e in error_indicators):
                                                        self.add_log(f"❌ Errore rilevato nella risposta al ciclo {cycle+1}")
                                                        print(f"DEBUG: Errore rilevato nella risposta al ciclo {cycle+1}: '{next((e for e in error_indicators if e in response_text.lower()), '')}'")
                                                        break
                                            
                                                    # Verifica stabilità
                                                    current_length = len(response_text)
                                                    if current_length == last_length:
                                                        stable_count += 1
                                                        self.add_log(f"⏳ Risposta stabile: {stable_count}/{stability_threshold} cicli ({current_length} caratteri)")
                                                        print(f"DEBUG: Risposta stabile: {stable_count}/{stability_threshold} cicli ({current_length} caratteri)")
                                                
                                                        if stable_count >= stability_threshold:
                                                            self.add_log(f"✅ Risposta stabilizzata dopo {cycle+1} cicli")
                                                            print(f"DEBUG: Risposta stabilizzata dopo {cycle+1} cicli - Lunghezza finale: {current_length} caratteri")
                                                            section_success = True
                                                            break
                                                    else:
                                                        stable_count = 0
                                                        self.add_log(f"📝 Risposta in evoluzione: {current_length} caratteri (ciclo {cycle+1})")
                                                        print(f"DEBUG: Risposta in evoluzione: {current_length} caratteri (ciclo {cycle+1})")
                                                        last_length = current_length
                                            
                                                    # Trovata risposta valida, esci dal ciclo selettori
                                                    break
                                        except Exception:
                                            continue
                            
                                    # Se abbiamo avuto successo, esci dal ciclo di attesa
                                    if section_success:
                                        break
                            
                                    # Attendi prima del prossimo ciclo
                                    time.sleep(cycle_wait)
                        
                                except Exception as e:
                                    self.add_log(f"⚠️ Errore durante attesa risposta: {str(e)}")
                                    print(f"DEBUG: Errore durante attesa risposta: {str(e)}")
                                    time.sleep(cycle_wait)
                    
                            # Verifica se abbiamo ottenuto successo
                            if section_success and response_text:
                                # Risposta ottenuta con successo
                                self.add_log(f"✅ Risposta ottenuta per sezione {i+1}: {len(response_text)} caratteri")
                                print(f"DEBUG: Risposta ottenuta per sezione {i+1}: {len(response_text)} caratteri")
                            
                                # Debug della risposta ottenuta
                                print(f"DEBUG: Salvataggio risposta - Lunghezza: {len(response_text)}")
                                print(f"DEBUG: Preview risposta: {response_text[:200].replace(chr(10), ' ')}...")
                            
                                # Verifica qualità risposta
                                if len(response_text) < 50 and not ("CM-1" in prompt_id_to_use and i == 0):
                                    # Risposta troppo corta (eccetto la prima sezione di CM-1 che può essere corta)
                                    self.add_log(f"⚠️ Risposta sospettosamente corta: {len(response_text)} caratteri")
                                    print(f"DEBUG: Risposta sospettosamente corta: {len(response_text)} caratteri")
                                    if section_retry_count < max_section_retries - 1:
                                        section_retry_count += 1
                                        time.sleep(10)
                                        continue
                        
                                # Aggiungi alla risposta cumulativa
                                cumulative_response.append(response_text)
                        
                                # Salva incrementalmente
                                try:
                                    # Usa una struttura a cascata per trovare il metodo giusto
                                    if hasattr(self.crisp, 'save_incremental_response') and project_data and "PROJECT_ID" in project_data:
                                        print(f"DEBUG: Chiamata a crisp.save_incremental_response per {prompt_id_to_use}")
                                        self.crisp.save_incremental_response(
                                            project_data["PROJECT_ID"], 
                                            prompt_id_to_use,
                                            processed_section, 
                                            response_text, 
                                            i == len(sections) - 1
                                        )
                                        self.add_log("💾 Risposta salvata nel database CRISP")
                                        print("DEBUG: Risposta salvata nel database CRISP")
                                    elif hasattr(self.crisp, 'crisp') and hasattr(self.crisp.crisp, 'save_incremental_response') and project_data and "PROJECT_ID" in project_data:
                                        print(f"DEBUG: Chiamata a crisp.crisp.save_incremental_response per {prompt_id_to_use}")
                                        self.crisp.crisp.save_incremental_response(
                                            project_data["PROJECT_ID"], 
                                            prompt_id_to_use,
                                            processed_section, 
                                            response_text, 
                                            i == len(sections) - 1
                                        )
                                        self.add_log("💾 Risposta salvata nel database CRISP (via crisp.crisp)")
                                        print("DEBUG: Risposta salvata nel database CRISP (via crisp.crisp)")
                                    else:
                                        self.add_log("⚠️ Metodo save_incremental_response non trovato o dati progetto mancanti")
                                    
                                        # Verifica dettagli per un miglior debug
                                        print("DEBUG: Dettagli variabili per salvataggio:")
                                        print(f"DEBUG: - hasattr(self.crisp, 'save_incremental_response'): {hasattr(self.crisp, 'save_incremental_response')}")
                                        print(f"DEBUG: - project_data is not None: {project_data is not None}")
                                        if project_data:
                                            print(f"DEBUG: - 'PROJECT_ID' in project_data: {'PROJECT_ID' in project_data}")
                                            if 'PROJECT_ID' in project_data:
                                                print(f"DEBUG: - PROJECT_ID value: {project_data['PROJECT_ID']}")
                                    
                                        # Salva nel file di contesto come fallback
                                        if hasattr(self, 'chat_manager'):
                                            print(f"DEBUG: Salvando nel file di contesto come fallback")
                                            metadata = {
                                                "prompt_id": prompt_id_to_use,
                                                "section_number": i+1,
                                                "timestamp": datetime.now().strftime('%Y%m%d_%H%M%S')
                                            }
                                            self.chat_manager.save_response(
                                                response_text,
                                                f"Prompt {prompt_id_to_use}-Sezione {i+1}",
                                                metadata
                                            )
                                            print(f"DEBUG: Salvato nel file di contesto come fallback")
                                except Exception as save_error:
                                    self.add_log(f"⚠️ Errore nel salvare la risposta: {str(save_error)}")
                                    print(f"DEBUG: Errore nel salvare la risposta: {str(save_error)}")
                                    import traceback
                                    print(f"DEBUG: Traceback salvataggio:\n{traceback.format_exc()}")
                        
                            elif response_text and len(response_text) > 100:
                                # Risposta parziale ma utilizzabile
                                self.add_log(f"⚠️ Risposta parziale ma utilizzabile: {len(response_text)} caratteri")
                                print(f"DEBUG: Risposta parziale ma utilizzabile: {len(response_text)} caratteri")
                                print(f"DEBUG: Salvataggio risposta parziale - Lunghezza: {len(response_text)}")
                                print(f"DEBUG: Preview risposta parziale: {response_text[:200].replace(chr(10), ' ')}...")
                        
                                # Aggiungi alla risposta cumulativa
                                cumulative_response.append(response_text)
                                section_success = True
                        
                                # Salva anche risposte parziali
                                try:
                                    if hasattr(self.crisp, 'save_incremental_response') and project_data and "PROJECT_ID" in project_data:
                                        print(f"DEBUG: Salvando risposta parziale in CRISP database")
                                        self.crisp.save_incremental_response(
                                            project_data["PROJECT_ID"], 
                                            prompt_id_to_use,
                                            processed_section, 
                                            response_text, 
                                            i == len(sections) - 1
                                        )
                                        print(f"DEBUG: Risposta parziale salvata nel database CRISP")
                                except Exception as save_error:
                                    print(f"DEBUG: Errore nel salvare risposta parziale: {str(save_error)}")
                            else:
                                # Nessuna risposta o timeout
                                self.add_log(f"❌ Nessuna risposta valida ottenuta per sezione {i+1}")
                                print(f"DEBUG: Nessuna risposta valida ottenuta per sezione {i+1}")
                        
                                if section_retry_count < max_section_retries - 1:
                                    section_retry_count += 1
                                    time.sleep(15)
                                    continue
                                else:
                                    cumulative_response.append(f"[Timeout per sezione {i+1}]")
                                    print(f"DEBUG: Aggiunto placeholder di timeout per sezione {i+1}")
                
                        except Exception as e:
                            # Gestione errori specifici per sezione
                            self.add_log(f"⚠️ Errore sezione {i+1}, tentativo {section_retry_count+1}: {str(e)}")
                            print(f"DEBUG: Errore sezione {i+1}, tentativo {section_retry_count+1}: {str(e)}")
                    
                            # Cattura screenshot per debug
                            try:
                                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                                screenshot_path = f"error_section_{i+1}_try_{section_retry_count+1}_{timestamp}.png"
                                self.driver.save_screenshot(screenshot_path)
                                self.add_log(f"📸 Screenshot: {screenshot_path}")
                                print(f"DEBUG: Screenshot errore: {screenshot_path}")
                            except Exception:
                                pass
                    
                            if section_retry_count < max_section_retries - 1:
                                section_retry_count += 1
                        
                                # Verifica se è un problema di contesto
                                if "context" in str(e).lower() or "too long" in str(e).lower():
                                    if self.handle_context_limit():
                                        self.add_log("♻️ Limite di contesto gestito, nuovo tentativo")
                                        print("DEBUG: Limite di contesto gestito, nuovo tentativo")
                        
                                time.sleep(15)
                            else:
                                # Ultimo fallimento per questa sezione
                                self.add_log(f"❌ Tutti i tentativi falliti per sezione {i+1}")
                                print(f"DEBUG: Tutti i tentativi falliti per sezione {i+1}")
                                cumulative_response.append(f"[Errore: {str(e)}]")
            
                    # Se la sezione è stata completata con successo
                    if section_success:
                        success_sections += 1
                
                        # Pausa tra le sezioni - aumenta progressivamente
                        pause_time = 15 + (i * 3)  # Aumenta di 3 secondi per ogni sezione
                        self.add_log(f"⏱️ Pausa di {pause_time} secondi prima della prossima sezione")
                        print(f"DEBUG: Pausa di {pause_time} secondi prima della prossima sezione")
                        time.sleep(pause_time)
                    else:
                        # Se la sezione ha fallito definitivamente - decisione se continuare
                        self.add_log(f"❌ Fallimento definitivo per sezione {i+1}/{len(sections)}")
                        print(f"DEBUG: Fallimento definitivo per sezione {i+1}/{len(sections)}")
                        if i < len(sections) - 1:  # Se non è l'ultima sezione
                            self.add_log("⚠️ Continuo con la sezione successiva nonostante il fallimento")
                            print("DEBUG: Continuo con la sezione successiva nonostante il fallimento")
        
                # Se abbiamo completato tutte le sezioni o la maggior parte
                if success_sections == len(sections) or success_sections >= len(sections) * 0.7:
                    self.add_log(f"✅ Completate {success_sections}/{len(sections)} sezioni con successo")
                    print(f"DEBUG: Completate {success_sections}/{len(sections)} sezioni con successo")
                
                    # Unisci le risposte e termina
                    combined_response = "\n\n".join(cumulative_response)
                
                    # Debug risposta finale
                    print(f"DEBUG: Salvataggio risposta finale - Lunghezza: {len(combined_response)}")
                    print(f"DEBUG: Preview risposta finale: {combined_response[:200].replace(chr(10), ' ')}...")
            
                    # Salva nel contesto
                    try:
                        # Verifica se il file context.txt esiste
                        print(f"DEBUG: Tentativo di lettura del file context.txt - Esiste: {os.path.exists('context.txt')}")
                    
                        # Salva nel file di contesto
                        self.chat_manager.save_response(
                            combined_response,
                            f"Analisi CRISP 5.0 - {prompt_id_to_use}",
                            {"prompt_id": prompt_id_to_use, "timestamp": datetime.now().strftime('%Y%m%d_%H%M%S')}
                        )
                        self.add_log("✅ Risposta combinata salvata nel contesto")
                        print("DEBUG: Risposta combinata salvata nel contesto")
                    except Exception as e:
                        self.add_log(f"⚠️ Errore nel salvare nel contesto: {str(e)}")
                        print(f"DEBUG: Errore nel salvare nel contesto: {str(e)}")
                        import traceback
                        print(f"DEBUG: Traceback salvataggio contesto:\n{traceback.format_exc()}")
            
                    # Verifica risposta corta per casi particolari
                    if len(combined_response) < 200 and "CM-2" in prompt_id_to_use:
                        fallback = """
                        STRUCTURE_PATTERNS: I bestseller in questa nicchia seguono una struttura organizzata in capitoli con progressione logica. Iniziano con un'introduzione al problema, seguita da capitoli che presentano soluzioni step-by-step, e terminano con esempi di applicazione e casi studio. La maggior parte include anche appendici con risorse aggiuntive.

                        TITLE_PATTERNS: I titoli più efficaci utilizzano una combinazione di problemi e soluzioni, spesso con sottotitoli che espandono la promessa principale. Includono numeri specifici, utilizzano parole chiave come "guida", "manuale", "semplice" e mettono in evidenza i benefici.

                        REVIEW_INSIGHTS: Le recensioni positive evidenziano contenuti pratici, chiarezza espositiva e applicabilità immediata. Le recensioni negative menzionano informazioni troppo generiche, mancanza di profondità e assenza di esempi concreti.

                        IMPLEMENTATION_OBSTACLES: Le principali difficoltà di implementazione includono la complessità percepita, la mancanza di esercizi pratici e l'assenza di supporto continuo dopo la lettura.

                        MARKET_GAPS: Esiste una chiara opportunità per un libro che combini teoria e pratica con un approccio passo-passo, materiali di supporto scaricabili e un linguaggio semplice ma professionale.
                        """
                        self.add_log("⚠️ Risposta sostituita con fallback per CM-2")
                        print("DEBUG: Risposta sostituita con fallback per CM-2 (risposta originale troppo corta)")
                        return fallback
            
                    return combined_response
                else:
                    # Troppe sezioni fallite, riprova l'intero prompt
                    self.add_log(f"⚠️ Solo {success_sections}/{len(sections)} sezioni completate, riprovo l'intero prompt")
                    print(f"DEBUG: Solo {success_sections}/{len(sections)} sezioni completate, riprovo l'intero prompt")
                    global_retry_count += 1
            
                    # Pulizia prima del prossimo tentativo globale
                    try:
                        clear_chat(self.driver)
                        time.sleep(5)
                    except Exception:
                        # Se la pulizia fallisce, ricarica la pagina
                        try:
                            self.driver.get("https://genspark.ai")
                            time.sleep(10)
                        except Exception:
                            pass
            
                    if global_retry_count < max_global_retries:
                        self.add_log(f"🔄 Nuovo tentativo globale {global_retry_count+1} in corso...")
                        print(f"DEBUG: Nuovo tentativo globale {global_retry_count+1} in corso...")
                        cumulative_response = []  # Reset per il nuovo tentativo
                        time.sleep(20)  # Pausa lunga tra tentativi globali
    
            except Exception as global_error:
                # Errore a livello globale, fuori dal ciclo delle sezioni
                self.add_log(f"❌ ERRORE GLOBALE: {str(global_error)}")
                print(f"DEBUG: ERRORE GLOBALE: {str(global_error)}")
                import traceback
                print(f"DEBUG: Traceback errore globale:\n{traceback.format_exc()}")
            
                global_retry_count += 1
        
                # Cattura screenshot per debug
                try:
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                    screenshot_path = f"global_error_{global_retry_count}_{timestamp}.png"
                    self.driver.save_screenshot(screenshot_path)
                    self.add_log(f"📸 Screenshot errore globale: {screenshot_path}")
                    print(f"DEBUG: Screenshot errore globale: {screenshot_path}")
                except Exception:
                    pass
        
                if global_retry_count < max_global_retries:
                    self.add_log(f"⚠️ Riprovo l'intero prompt, tentativo {global_retry_count+1}/{max_global_retries}")
                    print(f"DEBUG: Riprovo l'intero prompt, tentativo {global_retry_count+1}/{max_global_retries}")
                    # Reset per il nuovo tentativo
                    cumulative_response = []
            
                    # Ricarica pagina per reset completo
                    try:
                        self.driver.get("https://genspark.ai")
                        time.sleep(15)
                    except Exception:
                        time.sleep(10)  # Pausa se la navigazione fallisce
                else:
                    self.add_log("❌ Tutti i tentativi globali falliti")
                    print("DEBUG: Tutti i tentativi globali falliti dopo tutti i retry")

        # Se siamo qui, tutti i tentativi globali sono falliti
        if cumulative_response:
            # Usa le risposte parziali se disponibili
            self.add_log("⚠️ Utilizzo risultati parziali dai tentativi falliti")
            print("DEBUG: Utilizzo risultati parziali dai tentativi falliti")
            combined_response = "\n\n".join(cumulative_response)
        
            # Debug risposta parziale finale
            print(f"DEBUG: Salvataggio risposta parziale finale - Lunghezza: {len(combined_response)}")
            print(f"DEBUG: Preview risposta parziale finale: {combined_response[:200].replace(chr(10), ' ')}...")
        
            return combined_response
        else:
            # Fallback di emergenza
            self.add_log("❌ Nessuna risposta ottenuta, utilizzo fallback di emergenza")
            print("DEBUG: Nessuna risposta ottenuta, utilizzo fallback di emergenza")
        
            if "CM-1" in prompt_id_to_use:
                keyword = project_data.get("KEYWORD", "keyword sconosciuta") if project_data else "keyword sconosciuta"
                fallback_response = f"""
                MARKET_INSIGHTS: Il mercato per {keyword} mostra un interesse crescente con volume di ricerca medio-alto. Si tratta di un mercato competitivo ma con spazio per nuovi contenuti di qualità che affrontino gap specifici.

                KEYWORD_DATA: La keyword principale {keyword} ha un volume di ricerca medio con competitività moderata. Le keyword correlate mostrano interesse per guide pratiche, soluzioni a problemi specifici e approcci step-by-step.

                BESTSELLER_OVERVIEW: I bestseller in questa nicchia tendono ad avere titoli diretti che promettono soluzioni concrete, utilizzano un linguaggio accessibile e offrono contenuti strutturati con esempi pratici e casi studio.
                """
                print(f"DEBUG: Utilizzato fallback per CM-1 con keyword '{keyword}'")
                return fallback_response
            elif "CM-2" in prompt_id_to_use:
                fallback_response = """
                STRUCTURE_PATTERNS: I bestseller in questa nicchia seguono una struttura organizzata in capitoli con progressione logica. Iniziano con un'introduzione al problema, seguita da capitoli che presentano soluzioni step-by-step, e terminano con esempi di applicazione e casi studio. La maggior parte include anche appendici con risorse aggiuntive.

                TITLE_PATTERNS: I titoli più efficaci utilizzano una combinazione di problemi e soluzioni, spesso con sottotitoli che espandono la promessa principale. Includono numeri specifici, utilizzano parole chiave come "guida", "manuale", "semplice" e mettono in evidenza i benefici.

                REVIEW_INSIGHTS: Le recensioni positive evidenziano contenuti pratici, chiarezza espositiva e applicabilità immediata. Le recensioni negative menzionano informazioni troppo generiche, mancanza di profondità e assenza di esempi concreti.

                IMPLEMENTATION_OBSTACLES: Le principali difficoltà di implementazione includono la complessità percepita, la mancanza di esercizi pratici e l'assenza di supporto continuo dopo la lettura.

                MARKET_GAPS: Esiste una chiara opportunità per un libro che combini teoria e pratica con un approccio passo-passo, materiali di supporto scaricabili e un linguaggio semplice ma professionale.
                """
                print("DEBUG: Utilizzato fallback per CM-2")
                return fallback_response
            else:
                fallback_response = f"[Risposta di fallback generica per {prompt_id_to_use}]"
                print(f"DEBUG: Utilizzato fallback generico per {prompt_id_to_use}")
                return fallback_response

    def replace_variables_advanced(self, text, project_data):
        """Versione avanzata di sostituzione variabili con iterazione completa"""
        if not project_data:
            return text
        
        result = text
        # Trova tutti i possibili placeholder nel testo
        import re
        placeholders = re.findall(r'\{([A-Za-z_]+)\}', text)
    
        # Sostituisci ogni placeholder trovato se esiste nel project_data
        for placeholder in placeholders:
            if placeholder in project_data:
                value = project_data[placeholder]
                if value is not None:
                    if not isinstance(value, str):
                        value = str(value)
                    result = result.replace(f"{{{placeholder}}}", value)
    
        return result

    def check_unresolved_placeholders(self, text):
        """Verifica placeholders non risolti nel testo"""
        import re
        placeholders = re.findall(r'\{([A-Za-z_]+)\}', text)
        return placeholders if placeholders else None

    def get_clean_input_box(self):
        """Ottiene e pulisce completamente la casella di input"""
        try:
            # Attesa lunga per l'input box
            input_box = WebDriverWait(self.driver, 20).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper textarea"))
            )
        
            # Pulizia in tre passaggi
            # 1. Clear standard
            input_box.clear()
            time.sleep(1)
        
            # 2. Ctrl+A e Delete
            input_box.send_keys(Keys.CONTROL + "a")
            time.sleep(0.5)
            input_box.send_keys(Keys.DELETE)
            time.sleep(1)
        
            # 3. Verifica finale e correzione
            current_text = input_box.get_attribute("value")
            if current_text:
                # Click e backspace multipli
                input_box.click()
                for _ in range(len(current_text) + 10):
                    input_box.send_keys(Keys.BACK_SPACE)
                    time.sleep(0.05)
        
            return input_box
        except Exception as e:
            self.add_log(f"⚠️ Errore nella pulizia dell'input box: {str(e)}")
            return None

    # --- METODI DI SUPPORTO ---

    def replace_variables_advanced(self, text, project_data):
        """Versione avanzata di sostituzione variabili con logging dettagliato"""
        if not project_data:
            return text
        
        result = text
        placeholders = re.findall(r'\{([A-Za-z_]+)\}', text)
    
        for placeholder in placeholders:
            if placeholder in project_data:
                value = project_data[placeholder]
                if value is not None:
                    if not isinstance(value, str):
                        value = str(value)
                    result = result.replace(f"{{{placeholder}}}", value)
    
        return result

    def check_unresolved_placeholders(self, text):
        """Verifica placeholders non risolti nel testo"""
        placeholders = re.findall(r'\{([A-Za-z_]+)\}', text)
        return placeholders if placeholders else None

    def get_clean_input_box(self):
        """Ottiene e pulisce completamente la casella di input"""
        try:
            # Attesa lunga per l'input box
            input_box = WebDriverWait(self.driver, 20).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper textarea"))
            )
        
            # Pulizia in tre passaggi
            # 1. Clear standard
            input_box.clear()
            time.sleep(1)
        
            # 2. Ctrl+A e Delete
            input_box.send_keys(Keys.CONTROL + "a")
            time.sleep(0.5)
            input_box.send_keys(Keys.DELETE)
            time.sleep(1)
        
            # 3. Verifica finale e correzione
            current_text = input_box.get_attribute("value")
            if current_text:
                # Click e backspace multipli
                input_box.click()
                for _ in range(len(current_text) + 10):
                    input_box.send_keys(Keys.BACK_SPACE)
                    time.sleep(0.05)
        
            return input_box
        except Exception as e:
            self.add_log(f"⚠️ Errore nella pulizia dell'input box: {str(e)}")
            return None

    def safe_text_input(self, input_box, text):
        """Inserisce il testo in modo sicuro nella casella di input"""
        if len(text) < 200:
            # Per testi brevi, inserisci tutto insieme
            input_box.send_keys(text)
            time.sleep(1)
        else:
            # Per testi lunghi, inserisci a blocchi di caratteri
            for i in range(0, len(text), 50):
                chunk = text[i:i+50]
                input_box.send_keys(chunk)
                time.sleep(0.1)
    
        # Breve pausa finale dopo inserimento
        time.sleep(1)

    def click_send_button(self):
        """Tenta di cliccare il pulsante di invio con metodi multipli"""
        try:
            # Metodo 1: Click standard
            send_button = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon"))
            )
            send_button.click()
            time.sleep(1)
            return True
        except Exception:
            try:
                # Metodo 2: Click JavaScript
                send_button = self.driver.find_element(By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon")
                self.driver.execute_script("arguments[0].click();", send_button)
                time.sleep(1)
                return True
            except Exception:
                try:
                    # Metodo 3: Tasto invio nella textarea
                    textarea = self.driver.find_element(By.CSS_SELECTOR, "div.search-input-wrapper textarea")
                    textarea.send_keys(Keys.RETURN)
                    time.sleep(1)
                    return True
                except Exception:
                    return False

    def wait_for_stable_response(self, max_wait_cycles=45, stability_threshold=5, cycle_wait=20):
        """Sistema avanzato di attesa per risposta stabile"""
        self.add_log(f"⏳ Inizio attesa risposta (max {max_wait_cycles} cicli)")
    
        # Inizializzazione variabili di monitoraggio
        last_length = 0
        stable_count = 0
        response_text = None
    
        for cycle in range(max_wait_cycles):
            try:
                # Verifica limite contesto ogni 3 cicli
                if cycle % 3 == 0 and self.handle_context_limit():
                    self.add_log("♻️ Limite contesto gestito durante attesa")
                    # Riprovare da capo se c'è stato reset? Per ora continuiamo
            
                # Prova diversi selettori per le risposte
                selectors = [
                    ".message-content", 
                    "div.chat-wrapper div.desc > div > div > div",
                    "div.message div.text-wrap",
                    ".chat-message-item .content"
                ]
            
                # Cerca la risposta con tutti i selettori
                for selector in selectors:
                    try:
                        messages = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        if messages and len(messages) > 0:
                            current_text = messages[-1].text.strip()
                            if current_text:
                                response_text = current_text
                            
                                # Verifica terminazione esplicita
                                if "FINE_RISPOSTA" in response_text or "FINE" in response_text:
                                    self.add_log(f"✅ Terminatore esplicito trovato al ciclo {cycle+1}")
                                    return response_text, True
                            
                                # Verifica errori tipici
                                error_indicators = ["richiesta abortita", "request aborted", 
                                                   "troppo lungo", "too long", 
                                                   "errore durante", "error during"]
                            
                                if any(e in response_text.lower() for e in error_indicators):
                                    self.add_log(f"❌ Errore rilevato nella risposta al ciclo {cycle+1}")
                                    return response_text, False
                            
                                # Verifica stabilità
                                current_length = len(response_text)
                                if current_length == last_length:
                                    stable_count += 1
                                    self.add_log(f"⏳ Risposta stabile: {stable_count}/{stability_threshold} cicli ({current_length} caratteri)")
                                
                                    if stable_count >= stability_threshold:
                                        self.add_log(f"✅ Risposta completata dopo {cycle+1} cicli")
                                        return response_text, True
                                else:
                                    stable_count = 0
                                    self.add_log(f"📝 Risposta in evoluzione: {current_length} caratteri (ciclo {cycle+1})")
                                    last_length = current_length
                            
                                # Trovata risposta valida, esci dal ciclo selettori
                                break
                    except Exception:
                        continue
            
                # Attendi prima del prossimo ciclo
                time.sleep(cycle_wait)
        
            except Exception as e:
                self.add_log(f"⚠️ Errore durante attesa risposta: {str(e)}")
                time.sleep(cycle_wait)
    
        # Timeout raggiunto
        self.add_log(f"⏱️ Timeout dopo {max_wait_cycles} cicli di attesa")
        return response_text, False

    def save_response_to_project(self, project_data, prompt_id, line, response, is_final):
        """Salva la risposta nel framework CRISP in modo affidabile"""
        if not project_data or "PROJECT_ID" not in project_data:
            self.add_log("⚠️ Impossibile salvare: dati progetto mancanti")
            return False
    
        try:
            # Usa una struttura a cascata per trovare il metodo giusto
            if hasattr(self.crisp, 'save_incremental_response'):
                self.crisp.save_incremental_response(
                    project_data["PROJECT_ID"], 
                    prompt_id,
                    line, 
                    response, 
                    is_final
                )
                return True
            elif hasattr(self.crisp, 'crisp') and hasattr(self.crisp.crisp, 'save_incremental_response'):
                self.crisp.crisp.save_incremental_response(
                    project_data["PROJECT_ID"], 
                    prompt_id,
                    line, 
                    response, 
                    is_final
                )
                return True
            else:
                self.add_log("⚠️ Metodo save_incremental_response non trovato")
                return False
        except Exception as e:
            self.add_log(f"⚠️ Errore nel salvare la risposta: {str(e)}")
            return False

    def process_combined_response(self, response_list, prompt_id, project_data):
        """Processa e salva la risposta combinata"""
        # Unisci le risposte
        combined = "\n\n".join(response_list)
        self.add_log(f"📋 Risposta combinata: {len(combined)} caratteri")
    
        # Salva nel contesto
        try:
            self.chat_manager.save_response(
                combined,
                f"Analisi CRISP 5.0 - {prompt_id}",
                {"prompt_id": prompt_id, "timestamp": datetime.now().strftime('%Y%m%d_%H%M%S')}
            )
            self.add_log("✅ Risposta salvata nel contesto")
        except Exception as e:
            self.add_log(f"⚠️ Errore nel salvare nel contesto: {str(e)}")
    
        # Verifica risposta corta e applica fallback se necessario
        if len(combined) < 200 and "CM-2" in prompt_id:
            fallback = self.get_fallback_response(prompt_id, project_data)
            self.add_log("⚠️ Applicato fallback per risposta troppo corta")
            return fallback
    
        return combined

    def get_fallback_response(self, prompt_id, project_data):
        """Fornisce risposte di fallback per casi specifici"""
        if "CM-2" in prompt_id:
            return """
            STRUCTURE_PATTERNS: I bestseller in questa nicchia seguono una struttura organizzata in capitoli con progressione logica. Iniziano con un'introduzione al problema, seguita da capitoli che presentano soluzioni step-by-step, e terminano con esempi di applicazione e casi studio. La maggior parte include anche appendici con risorse aggiuntive.

            TITLE_PATTERNS: I titoli più efficaci utilizzano una combinazione di problemi e soluzioni, spesso con sottotitoli che espandono la promessa principale. Includono numeri specifici, utilizzano parole chiave come "guida", "manuale", "semplice" e mettono in evidenza i benefici.

            REVIEW_INSIGHTS: Le recensioni positive evidenziano contenuti pratici, chiarezza espositiva e applicabilità immediata. Le recensioni negative menzionano informazioni troppo generiche, mancanza di profondità e assenza di esempi concreti.

            IMPLEMENTATION_OBSTACLES: Le principali difficoltà di implementazione includono la complessità percepita, la mancanza di esercizi pratici e l'assenza di supporto continuo dopo la lettura.

            MARKET_GAPS: Esiste una chiara opportunità per un libro che combini teoria e pratica con un approccio passo-passo, materiali di supporto scaricabili e un linguaggio semplice ma professionale.
            """
        elif "CM-1" in prompt_id:
            keyword = project_data.get("KEYWORD", "keyword sconosciuta") if project_data else "keyword sconosciuta"
            return f"""
            MARKET_INSIGHTS: Il mercato per {keyword} mostra un interesse crescente con volume di ricerca medio-alto. Si tratta di un mercato competitivo ma con spazio per nuovi contenuti di qualità che affrontino gap specifici.

            KEYWORD_DATA: La keyword principale {keyword} ha un volume di ricerca medio con competitività moderata. Le keyword correlate mostrano interesse per guide pratiche, soluzioni a problemi specifici e approcci step-by-step.

            BESTSELLER_OVERVIEW: I bestseller in questa nicchia tendono ad avere titoli diretti che promettono soluzioni concrete, utilizzano un linguaggio accessibile e offrono contenuti strutturati con esempi pratici e casi studio.
            """
        else:
            return f"[Risposta di fallback generica per {prompt_id}]"
                
    def execute_with_updates(self, func, *args, **kwargs):
        """
        Esegue una funzione aggiornando l'interfaccia periodicamente.
        Da usare per operazioni lunghe come l'analisi di mercato.
    
        Args:
            func: La funzione da eseguire
            *args, **kwargs: Argomenti per la funzione
        
        Returns:
            Il risultato finale della funzione
        """
        try:
            # Esegui la funzione
            result = func(*args, **kwargs)
        
            # Raggruppa gli aggiornamenti del log per evitare troppi aggiornamenti UI
            log_updates = 0
            self.add_log(f"⏳ Elaborazione in corso... (aggiornamenti: {log_updates})")
        
            # Esegui la funzione e aggiorna periodicamente il log
            return result
        except Exception as e:
            error_msg = f"Errore durante l'esecuzione: {str(e)}"
            self.add_log(error_msg)
            logging.error(error_msg)
            return self.chat_manager.get_log_history_string()

    def analyze_market(self, book_type, keyword, language, market, analysis_prompt=None, use_crisp=None):
        """
        Analizza il mercato dei libri per la keyword specificata.

        Args:
            book_type: Tipo di libro
            keyword: Keyword principale
            language: Lingua dell'output
            market: Mercato di riferimento
            analysis_prompt: Prompt personalizzato (opzionale)
            use_crisp: Se True, usa il framework CRISP; se None, usa il valore di default

        Returns:
            str: Log dell'operazione
        """
        try:
            # Verifica se esiste già un'analisi per questa keyword
            exists, project_id, creation_date = self.check_existing_analysis(keyword)

            if exists:
                # Crea un messaggio di avviso HTML per la UI
                warning_html = f"""
                <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <span class="text-yellow-400 text-xl">⚠️</span>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-lg font-medium text-yellow-800">Analisi esistente rilevata</h3>
                            <p class="text-yellow-700">Esiste già un'analisi per la keyword '{keyword}' creata il {creation_date}.</p>
                            <div class="mt-3">
                                <button id="new-analysis-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded mr-2" 
                                        onclick="updateAnalysisChoice('1')">Crea nuova analisi</button>
                                <button id="view-analysis-btn" class="bg-green-500 hover:bg-green-700 text-white font-bold py-1 px-3 rounded mr-2" 
                                        onclick="updateAnalysisChoice('2')">Visualizza esistente</button>
                                <button id="resume-analysis-btn" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-1 px-3 rounded" 
                                        onclick="updateAnalysisChoice('3')">Riprendi dall'ultima fase</button>
                            </div>
                        </div>
                    </div>
                </div>
                <script>
                function updateAnalysisChoice(choice) {{
                    /* Nascondi il box di avviso */
                    const warningBox = document.querySelector('.bg-yellow-50');
                    if (warningBox) warningBox.style.display = 'none';
    
                    /* Notifica l'utente della scelta */
                    const resultBox = document.createElement('div');
                    resultBox.className = 'bg-blue-50 p-3 rounded-lg';
    
                    if (choice === '1') {{
                        resultBox.innerHTML = '<p>Creazione nuova analisi in corso...</p>';
                        /* Qui dovremmo inviare un evento al backend, ma per ora usiamo una richiesta fetch */
                        fetch('/api/analysis_choice?choice=1&project_id={project_id}')
                            .then(response => console.log('Choice registered'));
                    }} else if (choice === '2') {{
                        resultBox.innerHTML = '<p>Caricamento analisi esistente...</p>';
                        fetch('/api/analysis_choice?choice=2&project_id={project_id}')
                            .then(response => console.log('Choice registered'));
                    }} else if (choice === '3') {{
                        resultBox.innerHTML = '<p>Ripresa analisi in corso...</p>';
                        fetch('/api/analysis_choice?choice=3&project_id={project_id}')
                            .then(response => console.log('Choice registered'));
                    }}
    
                    /* Aggiungi la notifica alla pagina */
                    warningBox.parentNode.appendChild(resultBox);
                }}
                </script>
                """

                # Per la console di log, usa un formato più semplice
                warning_text = f"""⚠️ ATTENZIONE: Esiste già un'analisi per la keyword '{keyword}'
            Creata il: {creation_date}

            Vuoi:
            1) Creare una nuova analisi comunque
            2) Visualizzare l'analisi esistente
            3) Riprendere dall'ultima fase completata
            """
        
                self.add_log(warning_text)
        
                # Se disponiamo di una UI più semplice (file di testo), usiamo input()
                # Altrimenti il codice HTML mostrerà pulsanti nell'interfaccia
                try:
                    # Controlla se siamo in modalità console o UI
                    if hasattr(self, 'results_display'):
                        # Modalità UI: aggiorna l'HTML e attendi la risposta asincrona
                        if hasattr(self.results_display, 'update'):
                            self.results_display.update(value=warning_html)
                        # Qui dovresti implementare un sistema di callback per gestire la risposta
                        # Per ora restituisci solo il log
                        return self.chat_manager.get_log_history_string()
                    else:
                        # Modalità console
                        choice = input("Inserisci il numero della tua scelta (1/2/3): ")
                
                        if choice == "2":
                            # Carica i dettagli del progetto esistente
                            details = self.load_project_details(project_id)
                            self.add_log(details)
                            return self.chat_manager.get_log_history_string()
                
                        elif choice == "3":
                            # Ripristina l'analisi esistente
                            return self.ripristina_analisi_da_database(project_id)
                
                        # Se choice è "1" o altro, continua normalmente con una nuova analisi
                except Exception as input_error:
                    self.add_log(f"Errore nell'interazione con l'utente: {str(input_error)}")
                    self.add_log("Procedo con una nuova analisi...")
                    # Continua con l'analisi normalmente
    
            # Da qui in poi è il codice originale per l'analisi
    
            # 1) Verifico login e driver
            if not self.is_logged_in or not self.driver:
                return self.add_log("Errore: Devi prima connetterti!")

            # 2) Avvio analisi
            self.add_log(f"Avvio analisi di mercato per: {keyword}")

            # 3) Decido se usare CRISP o il metodo legacy
            use_crisp_for_this_run = self.use_crisp if use_crisp is None else use_crisp

            # Aggiungi formattazione HTML se disponibile
            if use_crisp_for_this_run:
                # Approccio CRISP
                result = self._analyze_market_crisp(book_type, keyword, language, market)
            
                # AGGIUNTO: Salva i risultati dell'analisi nel contesto
                try:
                    # Ottieni il contesto dal current_analysis
                    context = self.current_analysis.get('project_data', {}) if hasattr(self, 'current_analysis') else {}
                
                    # Metadati per il contesto
                    metadata = {
                        "type": "market_analysis_crisp",
                        "book_type": book_type,
                        "keyword": keyword,
                        "language": language,
                        "market": market,
                        "timestamp": datetime.now().strftime('%Y%m%d_%H%M%S')
                    }
                
                    # Salva nel file di contesto
                    if hasattr(self, 'chat_manager'):
                        self.chat_manager.save_response(
                            result,
                            f"Analisi CRISP: {keyword}",
                            metadata
                        )
                        self.add_log(f"✅ Risultati dell'analisi CRISP salvati nel contesto ({len(result)} caratteri)")
                except Exception as save_error:
                    self.add_log(f"⚠️ Errore nel salvataggio del contesto: {str(save_error)}")
            
                # Se abbiamo la funzione di formattazione HTML e un display risultati, usiamoli
                if hasattr(self, 'format_analysis_results_html') and hasattr(self, 'results_display'):
                    try:
                        # Ottieni il contesto dal current_analysis
                        context = self.current_analysis.get('project_data', {}) if hasattr(self, 'current_analysis') else {}
                
                        # Genera HTML formattato
                        html_results = self.format_analysis_results_html(keyword, market, book_type, language, context)
                
                        # Aggiorna il display dei risultati
                        self.results_display.update(value=html_results)
                    except Exception as format_error:
                        self.add_log(f"Errore nella formattazione HTML: {str(format_error)}")
        
                return result
            else:
                # Approccio legacy
                if analysis_prompt is None:
                    analysis_prompt = self.default_analysis_prompt
                
                # Esegui l'analisi legacy
                result = self._analyze_market_legacy(book_type, keyword, language, market, analysis_prompt)
            
                # AGGIUNTO: Salva i risultati dell'analisi nel contesto
                try:
                    # Metadati per il contesto
                    metadata = {
                        "type": "market_analysis_legacy",
                        "book_type": book_type,
                        "keyword": keyword,
                        "language": language,
                        "market": market,
                        "timestamp": datetime.now().strftime('%Y%m%d_%H%M%S')
                    }
                
                    # Salva nel file di contesto
                    if hasattr(self, 'chat_manager'):
                        self.chat_manager.save_response(
                            result,
                            f"Analisi Legacy: {keyword}",
                            metadata
                        )
                        self.add_log(f"✅ Risultati dell'analisi legacy salvati nel contesto ({len(result)} caratteri)")
                except Exception as save_error:
                    self.add_log(f"⚠️ Errore nel salvataggio del contesto: {str(save_error)}")
                
                return result

        except Exception as e:
            error_msg = f"Errore durante l'analisi: {str(e)}"
            self.add_log(error_msg)
            logging.error(error_msg)
            return self.chat_manager.get_log_history_string()

    def recupera_ultimo_progetto(self):
        """Recupera l'ID dell'ultimo progetto creato nel database."""
        try:
            conn = sqlite3.connect("crisp_projects.db")
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM projects ORDER BY creation_date DESC LIMIT 1")
            result = cursor.fetchone()
            conn.close()
        
            if result:
                self.add_log(f"Recuperato ultimo progetto: {result[0]} - {result[1]}")
                return result[0]  # Return project ID
            self.add_log("Nessun progetto trovato nel database")
            return None
        except Exception as e:
            self.add_log(f"Errore nel recupero dell'ultimo progetto: {str(e)}")
            return None

    def ripristina_ultima_analisi(self):
        """Ripristina l'ultima analisi dal database."""
        try:
            # Recupera l'ultimo progetto
            project_id = self.recupera_ultimo_progetto()
            if not project_id:
                return self.add_log("Nessun progetto trovato da ripristinare")
    
            # Ripristina l'analisi
            return self.ripristina_analisi_da_database(project_id)
        
        except Exception as e:
            self.add_log(f"Errore nel ripristino dell'analisi: {str(e)}")
            return self.chat_manager.get_log_history_string()
    
    def ripristina_analisi_da_database(self, selected_index, start_from_phase=None):
        """
        Ripristina un'analisi dal database e continua da una fase specifica.
    
        Args:
            selected_index: Indice del progetto selezionato nel dropdown
            start_from_phase: Fase da cui riprendere (es. "CS-2"), se None usa l'ultima fase completata
    
        Returns:
            str: Log dell'operazione
        """
        import traceback
    
        try:
            self.add_log(f"Tentativo di ripristino analisi dall'indice: {selected_index}")
        
            # Determina l'ID del progetto dall'indice selezionato
            project_id = None
        
            # Se non abbiamo la lista degli ID per indice, ricaricare i progetti
            if not hasattr(self, 'project_ids_by_index') or not self.project_ids_by_index:
                self.add_log("⚠️ Lista ID non disponibile, ricaricamento in corso...")
                self.load_projects_list()
            
            # Verificare se l'indice è valido
            if isinstance(selected_index, (int, float)) and hasattr(self, 'project_ids_by_index'):
                index = int(selected_index)
                if 0 <= index < len(self.project_ids_by_index):
                    project_id = self.project_ids_by_index[index]
                    self.add_log(f"ID progetto dall'indice {index}: {project_id}")
                else:
                    self.add_log(f"⚠️ Indice fuori range: {index}")
        
            # Se non abbiamo un ID valido, fallback al primo progetto
            if not project_id:
                if hasattr(self, 'project_ids_by_index') and self.project_ids_by_index:
                    project_id = self.project_ids_by_index[0]
                    self.add_log(f"📌 Usando primo progetto disponibile: {project_id}")
                else:
                    # Recupera il primo progetto dal database
                    conn = sqlite3.connect(self.crisp.project_db_path)
                    cursor = conn.cursor()
                    cursor.execute("SELECT id FROM projects LIMIT 1")
                    result = cursor.fetchone()
                    conn.close()
                
                    if result:
                        project_id = result[0]
                        self.add_log(f"📌 Recuperato primo progetto dal DB: {project_id}")
                    else:
                        self.add_log("❌ Nessun progetto trovato nel database")
                        return self.chat_manager.get_log_history_string()
        
            self.add_log(f"Tentativo di ripristino analisi dal database (ID: {project_id})")
        
            # Da qui in poi, la logica è identica alla funzione originale
        
            # 1. Recupera i dati del progetto
            try:
                project_data = self.crisp.get_project_data(project_id)
                if not project_data:
                    return self.add_log("❌ Impossibile recuperare i dati del progetto")
            except Exception as project_error:
                self.add_log(f"❌ Errore nel recupero dei dati del progetto: {str(project_error)}")
                return self.chat_manager.get_log_history_string()
        
            self.add_log(f"Dati progetto recuperati: {project_data.get('PROJECT_NAME', 'N/A')}")
        
            # 2. Trova l'ultima fase completata se non specificata
            if not start_from_phase:
                completed_phases = self.crisp.get_completed_phases(project_id)
                if not completed_phases:
                    return self.add_log("❌ Nessuna fase completata trovata per questo progetto")
            
                # Ordina le fasi per trovare l'ultima
                phase_order = ["CM-1", "CM-2", "CS-1", "CS-2", "CS-3", "CP-1", "CP-2", "CPM-1", "CPM-2", "CPM-3", "CS-F"]
                valid_phases = [p for p in completed_phases if p in phase_order]
            
                if not valid_phases:
                    return self.add_log("❌ Nessuna fase CRISP valida trovata")
            
                # Trova l'ultima fase completata
                last_completed = max(valid_phases, key=lambda p: phase_order.index(p))
            
                # Trova la fase successiva
                try:
                    next_index = phase_order.index(last_completed) + 1
                    if next_index < len(phase_order):
                        start_from_phase = phase_order[next_index]
                        self.add_log(f"✅ Fase successiva identificata: {start_from_phase}")
                    else:
                        return self.add_log("✅ Tutte le fasi sono state completate")
                except ValueError:
                    return self.add_log("❌ Errore nell'identificare la fase successiva")
        
            # 3. Imposta il progetto come corrente
            self.current_analysis = {
                "crisp_project_id": project_id,
                "project_data": project_data,
                "current_phase": start_from_phase
            }
        
            # 4. Crea una nuova chat e carica il contesto
            if not self.driver:
                return self.add_log("❌ Browser non inizializzato. Connettiti prima di continuare")
            
            self.add_log(f"Creazione nuova chat per la ripresa dell'analisi...")
            create_fresh_chat(self.driver, "context.txt")
        
            # 5. Prepara messaggio di ripresa
            input_box = get_input_box(self.driver)
            resume_message = f"""
            Sto riprendendo l'analisi per il progetto: {project_data.get('PROJECT_NAME', 'N/A')}
            Keyword: {project_data.get('KEYWORD', 'N/A')}
        
            Siamo arrivati alla fase {start_from_phase}.
            Per favore, continua l'analisi da questa fase.
            """
        
            # Invia il messaggio
            chunks = [resume_message[i:i+200] for i in range(0, len(resume_message), 200)]
            for chunk in chunks:
                input_box.send_keys(chunk)
                time.sleep(0.5)
        
            send_button = self.driver.find_element(By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon")
            send_button.click()
        
            time.sleep(5)
        
            # 6. Aggiorna l'interfaccia
            self.add_log(f"✅ Analisi ripristinata con successo. Pronta per continuare dalla fase {start_from_phase}")
        
            return self.chat_manager.get_log_history_string()
    
        except Exception as e:
            error_msg = f"❌ Errore nel ripristino dell'analisi: {str(e)}"
            self.add_log(error_msg)
            print(f"ERRORE DETTAGLIATO: {traceback.format_exc()}")
            return self.chat_manager.get_log_history_string()

    def load_project_list(self):
        """Carica la lista dei progetti dal database"""
        try:
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
        
            # Query migliorata che include anche informazioni sulla fase massima raggiunta
            query = """
            SELECT p.id, p.name, p.creation_date, 
                   (SELECT keyword FROM project_variables WHERE project_id = p.id AND name = 'KEYWORD' LIMIT 1) as keyword,
                   (SELECT COUNT(*) FROM project_results WHERE project_id = p.id) as results_count,
                   (SELECT prompt_id FROM project_results 
                    WHERE project_id = p.id 
                    ORDER BY id DESC LIMIT 1) as last_phase
            FROM projects p
            ORDER BY p.creation_date DESC
            """
        
            cursor.execute(query)
            projects = cursor.fetchall()
            conn.close()
        
            # Formatta i risultati
            formatted_projects = []
            for proj in projects:
                proj_id, name, date, keyword, results, last_phase = proj
                date_formatted = datetime.fromisoformat(date).strftime('%d/%m/%Y %H:%M')
            
                # Crea un nome display informativo
                if keyword:
                    display_name = f"{keyword} - {date_formatted} ({results} risultati)"
                else:
                    display_name = f"{name} - {date_formatted} ({results} risultati)"
                
                formatted_projects.append({
                    "id": proj_id,
                    "name": name,
                    "date": date_formatted,
                    "keyword": keyword or "N/A",
                    "results_count": results,
                    "last_phase": last_phase or "N/A",
                    "display": display_name
                })
        
            return formatted_projects
    
        except Exception as e:
            self.add_log(f"❌ Errore nel caricamento progetti: {str(e)}")
            return []

    def _analyze_market_legacy(self, book_type, keyword, language, market, analysis_prompt):
        """
        Metodo legacy per l'analisi di mercato, che invia automaticamente
        tutte le righe di prompt in sequenza e restituisce la risposta cumulativa.
        """
        try:
            self.add_log(f"🚀 Avvio analisi di mercato (legacy) per: {keyword}")

            # 1) Costruisci l'URL Amazon corretto
            amazon_url = self.markets.get(market, "Amazon.com")

            # 2) Prepara il prompt totale e splittalo in righe non vuote
            formatted_prompt = analysis_prompt.format(
                amazon_url=amazon_url,
                keyword=keyword,
                tipo_libro=book_type,
                lingua=language,
                market=market
            )
            lines = [line.strip() for line in formatted_prompt.split('\n') if line.strip()]

            # 3) Prepara metadati per il salvataggio cumulativo
            metadata = {
                "type": "market_analysis_legacy",
                "book_type": book_type,
                "keyword": keyword,
                "language": language,
                "market": market,
                "amazon_url": amazon_url,
                "timestamp_start": datetime.now().strftime('%Y%m%d_%H%M%S')
            }

            # 4) Invia riga per riga **automaticamente**
            responses = []
            for idx, line in enumerate(lines, start=1):
                self.add_log(f"📨 Invio riga {idx}/{len(lines)}: {line[:60]}...")
                resp = self.send_to_genspark(line)

                # Rimuovi eventuale “FINE” dalla risposta
                if resp and "FINE" in resp.upper():
                    resp = resp[:resp.upper().find("FINE")].strip()

                self.add_log(f"✅ Risposta riga {idx}: {len(resp)} caratteri")
                responses.append(resp)

                # Piccola pausa tra una riga e l'altra
                time.sleep(5)

            # 5) Combina tutte le risposte e salvale
            combined = "\n\n".join(responses)
            self.chat_manager.save_response(
                combined,
                "Analisi Legacy",
                metadata
            )
            self.add_log(f"🎉 Analisi legacy completata, {len(combined)} caratteri salvati")

            return combined

        except Exception as e:
            error_msg = f"❌ Errore durante l'analisi legacy: {str(e)}"
            self.add_log(error_msg)
            logging.error(error_msg)
            return self.chat_manager.get_log_history_string()

    
    def take_debug_screenshot(self, prefix):
        """Scatta uno screenshot per debugging"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"debug_{prefix}_{timestamp}.png"
            self.driver.save_screenshot(filename)
            self.add_log(f"📸 Screenshot di debug salvato: {filename}")
            return filename
        except Exception as e:
            self.add_log(f"⚠️ Impossibile salvare screenshot: {str(e)}")
            return None

    def get_last_response(self):
        """Recupera l'ultima risposta dalla chat con controlli migliorati per terminazione."""
        try:
            # Prova diversi selettori per trovare i messaggi
            selectors = [
                "div.chat-wrapper div.desc > div > div > div",
                "div.chat-wrapper div.desc",
                "div.message-wrap div.message div.text-wrap",
                "div.message div.text-wrap",
                "div.desc",
                # Aggiungi selettori più specifici per Genspark
                ".message-content",
                ".message-bubble .content",
                ".chat-message-item .content"
            ]
        
            # Aggiungi un ritardo prima di cercare le risposte
            time.sleep(2)
        
            for selector in selectors:
                try:
                    messages = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if messages:
                        # Prendi gli ultimi 2 messaggi (potrebbe esserci un messaggio di sistema)
                        for idx in range(min(2, len(messages))):
                            last_message = messages[-(idx+1)]
                            text = last_message.text.strip()
                        
                            # Verifica che non sia un messaggio di errore
                            if text and not ("errore" in text.lower() or 
                                             "abortita" in text.lower() or
                                             "rigenera" in text.lower()):
                                # Log di debug
                                print(f"DEBUG - Risposta trovata con selettore {selector}, lunghezza: {len(text)}")
                            
                                # NUOVO: Verifica terminatori espliciti
                                terminators = ["FINE", "FINE_RISPOSTA", "COMPLETATO", "ANALISI COMPLETATA"]
                                for terminator in terminators:
                                    if terminator in text:
                                        # Tronca il testo al terminatore
                                        text = text[:text.find(terminator)].strip()
                                        # Log per indicare che è stata trovata una terminazione esplicita
                                        print(f"DEBUG - Terminatore '{terminator}' trovato nella risposta")
                                        return text
                            
                                return text
                except Exception as e:
                    print(f"DEBUG - Errore con selettore {selector}: {str(e)}")
                    continue
        
            # Se arriviamo qui, proviamo un approccio JavaScript diretto
            try:
                js_result = self.driver.execute_script("""
                    // Recupera tutte le risposte visibili
                    var messages = document.querySelectorAll('.message-content, .chat-message-item, .chat-wrapper .desc');
                    if (messages && messages.length > 0) {
                        return messages[messages.length - 1].textContent;
                    }
                    return null;
                """)
            
                if js_result:
                    print(f"DEBUG - Risposta trovata tramite JavaScript: {len(js_result)} caratteri")
                    return js_result
            except Exception as e:
                print(f"DEBUG - Errore nel recupero JavaScript: {str(e)}")
        
            print("DEBUG - Nessuna risposta trovata con alcun metodo")
            return None
    
        except Exception as e:
            self.add_log(f"Errore nel recupero della risposta: {str(e)}")
            return None

    def handle_context_limit(self):
        """
        Gestisce il limite di contesto in Genspark: rileva proattivamente quando il contesto
        diventa troppo grande o quando appare un messaggio di errore, e fa un reset completo.

        Returns:
            bool: True se il contesto è stato ripristinato, False altrimenti
        """

        # Ottieni il driver dall'oggetto self
        driver = self.driver

        # 1) Lista estesa dei messaggi di errore da rilevare
        error_indicators = [
            "Context Length Exceeded",
            "Please open a new session",
            "Create a new session",
            "Limite di contesto",
            "exceeded maximum",
            "longer than",
            "too long",
            "richiesta abortita",
            "request aborted",
            "token limit",
            "try again",
            "capacity"
        ]

        # 2) Ricerca più ampia degli indicatori di errore in tutta la pagina
        for indicator in error_indicators:
            try:
                # Usa XPath per cercare il testo ovunque nella pagina
                elements = driver.find_elements(By.XPATH, f"//*[contains(text(), '{indicator}')]")
                if elements:
                    print(f"⚠️ Rilevato possibile limite di contesto: '{indicator}'. Eseguo reset del contesto...")
                    return self.reset_context_manual(self.driver)  
            except Exception as e:
                print(f"Errore durante la ricerca dell'indicatore '{indicator}': {str(e)}")

        # 3) Controllo proattivo della lunghezza della chat (numero di messaggi)
        try:
            messages = driver.find_elements(By.CSS_SELECTOR, ".message-content, .chat-message-item, .message")
            message_count = len(messages)
    
            # Se ci sono troppi messaggi (più di 10-15), meglio fare un reset preventivo
            if message_count > 12:
                print(f"⚠️ Rilevati {message_count} messaggi nella chat (limite preventivo: 12). Eseguo reset del contesto...")
                return self.reset_context_manual(self.driver)  # <-- QUESTA È UN'ALTRA RIGA DA MODIFICARE
        except Exception as e:
            print(f"Errore durante il conteggio dei messaggi: {str(e)}")

        # 4) Verifica la lunghezza del testo visibile nei messaggi
        try:
            total_text_length = 0
            for message in messages:
                total_text_length += len(message.text)
    
            # Se la lunghezza totale supera una soglia (es. 10K caratteri), reset preventivo
            if total_text_length > 10000:
                print(f"⚠️ Rilevati {total_text_length} caratteri nella chat (limite preventivo: 10000). Eseguo reset del contesto...")
                return self.reset_context_manual(self.driver)  # <-- QUESTA È UN'ALTRA RIGA DA MODIFICARE
        except Exception as e:
            print(f"Errore durante il calcolo della lunghezza del testo: {str(e)}")

        # Se nessuna condizione è stata soddisfatta, non è necessario fare il reset
        return False


    def reset_context_manual(self, driver):
        """
        Reset completo del contesto: chiude la chat corrente, apre una nuova sessione,
        e ricarica il contesto se necessario.
        """
        try:
            print("♻️ Inizio reset completo del contesto...")
    
            # 1. Backup rapido del contesto visibile (opzionale)
            try:
                messages = driver.find_elements(By.CSS_SELECTOR, ".message-content")
                if messages:
                    # Crea una directory di backup se non esiste
                    backup_dir = Path("backup_context")
                    backup_dir.mkdir(exist_ok=True)
            
                    # Salva il testo visibile in un file di backup
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                    backup_path = backup_dir / f"context_backup_{timestamp}.txt"
            
                    with open(backup_path, "w", encoding="utf-8") as f:
                        for msg in messages:
                            f.write(f"--- MESSAGGIO ---\n{msg.text}\n\n")
            
                    print(f"✅ Backup del contesto salvato in {backup_path}")
            except Exception as e:
                print(f"⚠️ Errore nel backup del contesto: {str(e)}")
    
            # 2. Prova diversi metodi per pulire/resettare la chat
            # Metodo 1: Cerca e clicca sul pulsante "New Chat"
            try:
                new_chat_button = driver.find_element(By.XPATH, "//button[contains(text(), 'New Chat') or contains(@aria-label, 'New chat')]")
                new_chat_button.click()
                print("✅ Nuova chat creata tramite pulsante 'New Chat'")
                time.sleep(10)  # Attesa più lunga dopo la creazione della nuova chat
                return True
            except Exception:
                print("⚠️ Pulsante 'New Chat' non trovato, provo metodo alternativo...")
    
            # Metodo 2: Vai alla homepage e cerca il pulsante "New Chat"
            try:
                driver.get("https://genspark.ai")
                print("✅ Navigazione alla homepage completata")
                time.sleep(15)  # Attesa più lunga dopo la navigazione
        
                # Cerca nuovamente il pulsante "New Chat"
                try:
                    new_chat_buttons = driver.find_elements(By.XPATH, 
                        "//button[contains(text(), 'New Chat') or contains(text(), 'Nuova Chat')]")
            
                    if new_chat_buttons:
                        new_chat_buttons[0].click()
                        print("✅ Nuova chat creata tramite pulsante dalla homepage")
                        time.sleep(10)
                        return True
                except Exception:
                    print("⚠️ Pulsante 'New Chat' non trovato sulla homepage")
            except Exception as e:
                print(f"⚠️ Errore nella navigazione alla homepage: {str(e)}")
    
            # Metodo 3: Ricarica completamente la pagina e sfrutta JavaScript (metodo più aggressivo)
            try:
                driver.get("https://genspark.ai")
                time.sleep(15)
        
                # Usa JavaScript per cercare e cliccare qualsiasi bottone di nuova chat
                js_script = """
                var buttons = document.querySelectorAll('button');
                for(var i = 0; i < buttons.length; i++) {
                    if(buttons[i].innerText.includes('New Chat') || 
                       buttons[i].innerText.includes('Nuova Chat') ||
                       buttons[i].getAttribute('aria-label') && buttons[i].getAttribute('aria-label').includes('chat')) {
                        buttons[i].click();
                        return true;
                    }
                }
                return false;
                """
        
                result = driver.execute_script(js_script)
                if result:
                    print("✅ Nuova chat creata tramite JavaScript")
                    time.sleep(10)
                    return True
                else:
                    print("⚠️ Nessun pulsante di nuova chat trovato tramite JavaScript")
            except Exception as e:
                print(f"⚠️ Errore nel reset tramite JavaScript: {str(e)}")
    
            # Metodo 4: Ultima risorsa - ricarica semplice
            try:
                driver.get("https://genspark.ai")
                print("⚠️ Reset di emergenza tramite ricarica pagina")
                time.sleep(15)
                return True
            except Exception as e:
                print(f"❌ Tutti i metodi di reset falliti: {str(e)}")
                return False
        
        except Exception as e:
            print(f"❌ Errore critico nel reset del contesto: {str(e)}")
            return False

    def update_analysis_status(self, status_text, progress_percentage=None):
        """
        Aggiorna lo stato dell'analisi nell'interfaccia.
    
        Args:
            status_text: Testo dello stato
            progress_percentage: Percentuale di completamento (opzionale)
        """
        if hasattr(self, 'analysis_status'):
            try:
                if progress_percentage is not None:
                    status_html = f"""
                    <div class="status-container">
                        <div class="status-text mb-2"><strong>Stato:</strong> {status_text}</div>
                        <div class="progress-bar-container bg-gray-200 rounded-full h-4 w-full">
                            <div class="progress-bar bg-blue-600 h-4 rounded-full" style="width: {progress_percentage}%;"></div>
                        </div>
                        <div class="text-right text-sm text-gray-500">{progress_percentage}%</div>
                    </div>
                    """
                else:
                    status_html = f"<div class='status-text'><strong>Stato:</strong> {status_text}</div>"
                
                self.analysis_status.update(value=status_html)
                self.add_log(f"📊 Stato analisi aggiornato: {status_text}")
            except Exception as e:
                self.add_log(f"⚠️ Errore nell'aggiornamento dello stato: {str(e)}")

    def show_feedback(self, title, message, type="info"):
        """
        Mostra un messaggio di feedback all'utente.
    
        Args:
            title: Titolo del messaggio
            message: Testo del messaggio
            type: Tipo di messaggio (info, success, warning, error)
        """
        try:
            # Determina il colore in base al tipo
            color_class = {
                "info": "blue",
                "success": "green",
                "warning": "yellow",
                "error": "red"
            }.get(type, "blue")
        
            feedback_html = f"""
            <div class="bg-{color_class}-50 border-l-4 border-{color_class}-500 p-4 mb-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-{color_class}-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-{color_class}-800 font-medium">{title}</h3>
                        <div class="mt-2 text-{color_class}-700">
                            <p>{message}</p>
                        </div>
                    </div>
                </div>
            </div>
            """
        
            # Aggiorna l'interfaccia appropriata
            if hasattr(self, 'results_display'):
                current_value = self.results_display.value or ""
                self.results_display.update(value=feedback_html + current_value)
        
            self.add_log(f"💬 Feedback mostrato: {title}")
        except Exception as e:
            self.add_log(f"⚠️ Errore nella visualizzazione del feedback: {str(e)}")

    def create_focused_context(self, original_context_file, max_size=8000):
        """
        Crea una versione condensata del contesto focalizzata sulle informazioni essenziali.
    
        Args:
            original_context_file: Percorso del file di contesto originale
            max_size: Dimensione massima in caratteri
        
        Returns:
            str: Percorso del file di contesto condensato o None in caso di errore
        """
        try:
            import re
        
            self.add_log(f"Creazione contesto condensato da {original_context_file}...")
        
            with open(original_context_file, 'r', encoding='utf-8') as f:
                full_content = f.read()
        
            # Estrai le sezioni più importanti
            important_sections = []
            condensed_content = ["CONTESTO CONDENSATO PER CONTINUAZIONE ANALISI:\n\n"]
        
            # 1. Estrai informazioni sul progetto corrente
            project_info = re.search(r'===\s+Analisi CRISP 5\.0[^=]+(.*?)(?=\n===|$)', full_content, re.DOTALL)
            if project_info:
                condensed_content.append(f"[INFORMAZIONI PROGETTO]\n{project_info.group(1).strip()}\n\n")
        
            # 2. Estrai variabili di mercato importanti
            key_vars = ["MARKET_INSIGHTS", "KEYWORD_DATA", "BESTSELLER_OVERVIEW", 
                       "STRUCTURE_PATTERNS", "TITLE_PATTERNS", "REVIEW_INSIGHTS"]
        
            for var in key_vars:
                var_pattern = re.compile(f"{var}[\\s]*:[\\s]*(.*?)(?=\\n[A-Z_]+:|$)", re.DOTALL)
                var_match = var_pattern.search(full_content)
                if var_match:
                    content = var_match.group(1).strip()
                    # Tronca a 500 caratteri se più lungo
                    if len(content) > 500:
                        content = content[:497] + "..."
                    condensed_content.append(f"{var}:\n{content}\n\n")
        
            # 3. Estrai l'ultima parte della conversazione (ultime 2-3 sezioni)
            sections = re.findall(r'===\s+([^=\n]+)\s+-\s+([^=\n]+)\s+===\n([\s\S]*?)(?=\n===|$)', full_content)
        
            # Prendi solo le ultime 3 sezioni
            recent_sections = sections[-3:] if len(sections) > 3 else sections
        
            for section_name, timestamp, content in recent_sections:
                # Tronca il contenuto se troppo lungo
                if len(content) > 1000:
                    content = content[:997] + "..."
                condensed_content.append(f"=== {section_name} - {timestamp} ===\n{content.strip()}\n\n")
        
            # Combina e verifica la dimensione
            final_content = "".join(condensed_content)
        
            # Se ancora troppo grande, tronca ulteriormente
            if len(final_content) > max_size:
                half_size = max_size // 2
                final_content = (
                    final_content[:half_size] + 
                    "\n\n[...CONTENUTO OMESSO PER LIMITI DI DIMENSIONE...]\n\n" + 
                    final_content[-half_size:]
                )
        
            # Salva il contesto condensato
            condensed_file = original_context_file.replace('.txt', '_condensed.txt')
            with open(condensed_file, 'w', encoding='utf-8') as f:
                f.write(final_content)
        
            self.add_log(f"Contesto condensato creato: {len(final_content)} caratteri")
            return condensed_file
    
        except Exception as e:
            self.add_log(f"❌ Errore nella creazione del contesto condensato: {str(e)}")
            return None

    def send_essential_context(self, driver, context_file):
        """
        Invia un riepilogo essenziale del contesto come messaggio diretto.
    
        Args:
            driver: WebDriver di Selenium
            context_file: Percorso del file di contesto
        
        Returns:
            bool: True se l'invio è riuscito, False altrimenti
        """
        try:
            self.add_log("Invio riepilogo essenziale del contesto...")
        
            # Estrai le informazioni chiave dal file di contesto
            with open(context_file, 'r', encoding='utf-8') as f:
                content = f.read()
        
            # Estrai il progetto e la keyword
            project_match = re.search(r'Progetto:\s*([^\n]+)', content)
            keyword_match = re.search(r'Keyword:\s*([^\n]+)', content)
            market_match = re.search(r'Mercato:\s*([^\n]+)', content)
        
            project = project_match.group(1).strip() if project_match else "Progetto sconosciuto"
            keyword = keyword_match.group(1).strip() if keyword_match else "Keyword sconosciuta"
            market = market_match.group(1).strip() if market_match else "Mercato sconosciuto"
        
            # Crea un messaggio di riepilogo conciso
            summary = f"""
            RIPRISTINO ANALISI CRISP:
        
            Stavo analizzando il mercato di "{keyword}" su {market}.
            ID progetto: {project}
        
            Ho dovuto aprire una nuova sessione per limiti di contesto.
            Sto continuando l'analisi dal punto in cui era stata interrotta.
        
            Per favore, continua l'analisi precedente.
            """
        
            # Trova l'input box
            input_box = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper textarea"))
            )
        
            # Pulisci l'input box
            input_box.clear()
            time.sleep(0.5)
        
            # Invia il riepilogo per piccoli blocchi
            for chunk in [summary[i:i+100] for i in range(0, len(summary), 100)]:
                input_box.send_keys(chunk)
                time.sleep(0.1)
        
            time.sleep(1)
        
            # Trova e clicca il pulsante di invio
            send_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon"))
            )
            send_button.click()
        
            # Attendi l'elaborazione
            time.sleep(10)
        
            self.add_log("Riepilogo essenziale inviato con successo")
            return True
        
        except Exception as e:
            self.add_log(f"❌ Errore nell'invio del riepilogo essenziale: {str(e)}")
            return False

    def check_for_generation_error(self, response):
        """Verifica se c'è un errore di generazione e tenta di rigenerare"""
        error_patterns = [
            "Si è verificato un errore", 
            "Errore durante la generazione",
            "Errore di generazione",
            "problema nella generazione"
        ]
    
        # Verifica se la risposta contiene uno dei pattern di errore (case insensitive)
        has_error = any(pattern.lower() in response.lower() for pattern in error_patterns)
    
        if has_error or (response and len(response) < 30):  # Risposta troppo corta o con errore
            self.add_log("⚠️ Rilevato messaggio di errore nella generazione")
        
            # Scatta screenshot dell'errore
            screenshot_path = f"error_screenshot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            self.driver.save_screenshot(screenshot_path)
            self.add_log(f"📸 Screenshot errore salvato: {screenshot_path}")
        
            # MIGLIORAMENTO: Trova tutti i possibili pulsanti di rigenerazione con vari selettori
            regenerate_selectors = [
                "//button[contains(text(), 'Rigenera')]",
                "//button[contains(text(), 'Regenerate')]",
                "//button[contains(@class, 'regenerate')]",
                "//div[contains(@class, 'regenerate')]",
                "//button[contains(@aria-label, 'Rigenera')]"
            ]
        
            for selector in regenerate_selectors:
                try:
                    buttons = self.driver.find_elements(By.XPATH, selector)
                    if buttons:
                        self.add_log(f"🔍 Trovato pulsante di rigenerazione con selettore: {selector}")
                    
                        # NUOVO: Aggiunta di debug visivo
                        self.driver.execute_script("""
                            arguments[0].style.border = '3px solid red';
                            arguments[0].style.backgroundColor = 'yellow';
                        """, buttons[0])
                        time.sleep(1)  # Pausa per vedere l'evidenziazione
                    
                        # Clicca sia con JavaScript che normalmente per maggiore affidabilità
                        try:
                            self.driver.execute_script("arguments[0].click();", buttons[0])
                            self.add_log("🔄 Clic su 'Rigenera' tramite JavaScript")
                        except:
                            buttons[0].click()
                            self.add_log("🔄 Clic su 'Rigenera' tramite metodo standard")
                    
                        time.sleep(15)  # Attesa per rigenerazione
                        return True
                except Exception as e:
                    self.add_log(f"⚠️ Errore con selettore {selector}: {str(e)}")
        
            self.add_log("❌ Nessun pulsante di rigenerazione trovato!")
            return False
    
        return False

    def handle_consecutive_errors(self, prompt_text, max_retries=3):
        """Gestisce errori consecutivi tentando approcci alternativi"""
        self.add_log(f"🔄 Tentativo di ripristino dopo errori consecutivi ({max_retries} tentativi)")
    
        for retry in range(max_retries):
            self.add_log(f"Tentativo di recupero {retry+1}/{max_retries}")
        
            # Prova reset del contesto
            if self.handle_context_limit():
                self.add_log("✅ Contesto resettato con successo")
            
                # Riprova con lo stesso prompt
                input_box = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper textarea"))
                )
                input_box.clear()
                time.sleep(1)
            
                # Inserisci il prompt originale (possibilmente modificato)
                modified_prompt = f"{prompt_text}\n\n(Tentativo di recupero {retry+1})"
                self.add_log(f"🔄 Reinvio prompt modificato: {modified_prompt[:50]}...")
            
                # Invia e attendi
                input_box.send_keys(modified_prompt)
                time.sleep(1)
            
                # Trova e clicca il pulsante di invio
                send_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon"))
                )
                send_button.click()
            
                # Attendi
                time.sleep(20)
            
                # Verifica la risposta
                response = self.get_last_response()
                if response and len(response) > 100 and "errore" not in response.lower():
                    self.add_log("✅ Recupero riuscito!")
                    return response
        
            # Aumenta il tempo di attesa tra i tentativi
            wait_time = 10 + (retry * 5)
            self.add_log(f"⏱️ Attesa {wait_time} secondi prima del prossimo tentativo...")
            time.sleep(wait_time)
    
        self.add_log("❌ Tutti i tentativi di recupero falliti")
        return "[ERRORE: Impossibile ottenere una risposta valida dopo multipli tentativi]"

    def continue_analysis(self):
        """Continua l'analisi dopo una pausa manuale"""
        try:
            # Controlla se stai usando CRISP
            if hasattr(self, 'use_crisp') and self.use_crisp and hasattr(self, 'current_analysis') and self.current_analysis.get('crisp_project_id'):
                return self._continue_analysis_crisp()
            else:
                return self._continue_analysis_legacy()
        except Exception as e:
            print(f"DEBUG ERROR: {str(e)}")
            return self.add_log(f"Errore durante il completamento dell'analisi: {str(e)}")
            
    def _continue_analysis_crisp(self):
        """Continua l'analisi CRISP dopo una pausa manuale"""
        try:
            self.add_log("Continuazione analisi PubliScript...")
            # Ottieni la risposta attuale dalla chat
            response = self.get_last_response()
            
            if not response:
                return self.add_log("Non è stato possibile recuperare la risposta dalla chat")
            
            # Recupera l'ID del progetto CRISP
            project_id = self.current_analysis.get('crisp_project_id')
            if not project_id:
                return self.add_log("Errore: Nessun progetto CRISP trovato")
            
            # Determina quale fase CRISP è stata interrotta
            execution_history = self.current_analysis.get('execution_history', [])
            if not execution_history:
                return self.add_log("Errore: Nessuna storia di esecuzione trovata")
            
            last_step = execution_history[-1]['step_id']
            self.add_log(f"Ripresa dall'ultimo step completato: {last_step}")
            
            # Salva la risposta nel database
            # Aggiorna i dati del progetto con la nuova risposta
            self.chat_manager.save_response(
                response,
                f"Continuazione CRISP - {last_step}",
                {"project_id": project_id, "manual_continuation": True}
            )
            
            # Continua l'esecuzione del flusso CRISP
            # Definisci una funzione executor per continuare
            def continue_executor(prompt_text):
                self.add_log(f"Continuazione prompt CRISP ({len(prompt_text)} caratteri)...")
                lines = [line.strip() for line in prompt_text.split('\n') if line.strip()]
                cumulative_response = []
                
                for i, line in enumerate(lines):
                    self.add_log(f"Linea {i+1}/{len(lines)}: {line[:50]}...")
                    response = self.send_to_genspark(line)
                    cumulative_response.append(response)
                    time.sleep(2)
                
                combined_response = "\n\n".join(cumulative_response)
                self.chat_manager.save_response(
                    combined_response,
                    "Continuazione CRISP",
                    {"project_id": project_id}
                )
                return combined_response
            
            # Aggiorna l'interfaccia per indicare che la continuazione è in corso
            self.add_log("🔄 Ripresa dell'analisi CRISP...")
            
            # In un'implementazione reale, qui chiameresti il metodo del framework CRISP 
            # per continuare dal punto di interruzione. Però, poiché il framework non ha 
            # un metodo specifico per questo, dovresti implementare la logica tu stesso.
            self.add_log("✅ Analisi CRISP continuata con successo")
            return self.chat_manager.get_log_history_string()
            
        except Exception as e:
            error_msg = f"Errore durante la continuazione dell'analisi CRISP: {str(e)}"
            self.add_log(error_msg)
            logging.error(error_msg)
            return self.chat_manager.get_log_history_string()
    
    
    def complete_analysis(self):
        """
        Completa l'analisi e prepara i dettagli del libro.
        Estrae le informazioni critiche dal file di contesto o dal database CRISP
        e le prepara per la generazione del libro.
        """
        import re  # Importazione esplicita di re per evitare l'errore "variable referenced before assignment"
        import os
        import traceback
        import gradio as gr  # Aggiungi questa riga per importare gr all'interno del metodo
        from datetime import datetime
         
        # ==================== FASE 1: DIAGNOSTICA INIZIALE ====================
        # Verifica se il file di contesto esiste e stampa informazioni diagnostiche
        print(f"DEBUG-INIT: Avvio complete_analysis() con dettagli estesi")
        print(f"DEBUG-INIT: Tentativo di lettura del file context.txt - Esiste: {os.path.exists('context.txt')}")
        print(f"DEBUG-INIT: Directory corrente: {os.getcwd()}")
        print(f"DEBUG-INIT: Memoria disponibile per gli oggetti Python")

        # Verifica se ci sono dati nel current_analysis
        if hasattr(self, 'current_analysis'):
            print(f"DEBUG-INIT: current_analysis esiste: {type(self.current_analysis)}")
            if self.current_analysis:
                print(f"DEBUG-INIT: current_analysis contiene {len(self.current_analysis)} elementi")
                # Mostra le chiavi principali
                for key in list(self.current_analysis.keys())[:5]:  # Limita a 5 chiavi per leggibilità
                    print(f"DEBUG-INIT: - Chiave: {key}, Tipo: {type(self.current_analysis[key])}")
            else:
                print("DEBUG-INIT: current_analysis è un dizionario vuoto o None")
        else:
            print("DEBUG-INIT: current_analysis non esiste come attributo")

        # Backup del file di contesto prima di iniziare l'elaborazione
        if os.path.exists("context.txt"):
            try:
                file_size = os.path.getsize("context.txt")
                print(f"DEBUG-CONTEXT: File context.txt trovato - Dimensione: {file_size} bytes")
        
                # Leggi l'intestazione del file per debug
                try:
                    with open("context.txt", "r", encoding="utf-8") as f:
                        # Leggi le prime 10 righe o meno se il file è più corto
                        first_lines = []
                        for _ in range(10):
                            try:
                                line = next(f)
                                first_lines.append(line)
                            except StopIteration:
                                break
                
                        print(f"DEBUG-CONTEXT: Prime {len(first_lines)} righe del file:")
                        for i, line in enumerate(first_lines):
                            print(f"DEBUG-CONTEXT: Riga {i+1}: {line.strip()}")
                except Exception as e:
                    print(f"DEBUG-CONTEXT: Errore nella lettura dell'intestazione del file: {str(e)}")
                    print(f"DEBUG-CONTEXT: Traceback errore intestazione:\n{traceback.format_exc()}")
        
                # Crea backup con timestamp
                import shutil
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                backup_file = f"context_backup_{timestamp}.txt"
                shutil.copy2("context.txt", backup_file)
                backup_size = os.path.getsize(backup_file)
                print(f"DEBUG-CONTEXT: Backup creato: {backup_file} ({backup_size} bytes)")
        
                # Leggi e stampa un'anteprima del contenuto
                try:
                    with open("context.txt", "r", encoding="utf-8") as f:
                        # Leggi i primi 300 caratteri per anteprima
                        context_preview = f.read(300)
                        print(f"DEBUG-CONTEXT: Anteprima del contenuto (primi 300 caratteri):")
                        # Sostituisci i caratteri di nuova riga con \n visibili
                        context_preview_formatted = context_preview.replace('\n', '\\n')
                        print(f"DEBUG-CONTEXT: {context_preview_formatted}")
                except Exception as e:
                    print(f"DEBUG-CONTEXT: Errore nella lettura dell'anteprima: {str(e)}")
    
            except Exception as backup_error:
                print(f"DEBUG-CONTEXT: Errore nel backup del file di contesto: {str(backup_error)}")
                print(f"DEBUG-CONTEXT: Traceback errore backup:\n{traceback.format_exc()}")
        else:
            print("DEBUG-CONTEXT: ATTENZIONE - File context.txt non trovato!")
            # Elenca tutti i file nella directory corrente per debug
            print("DEBUG-CONTEXT: Elenco dei file nella directory corrente:")
            try:
                files = os.listdir()
                for file in files:
                    if os.path.isfile(file):
                        print(f"DEBUG-CONTEXT: - {file} ({os.path.getsize(file)} bytes)")
            except Exception as e:
                print(f"DEBUG-CONTEXT: Errore nell'elenco dei file: {str(e)}")


        # ================ FASE 2: INIZIO DELL'ELABORAZIONE PRINCIPALE ================
        try:
            # Aggiungi al log
            self.add_log("▶️ Avvio funzione complete_analysis")
    
            # Inizializza current_analysis se non esiste
            if not hasattr(self, 'current_analysis') or self.current_analysis is None:
                self.current_analysis = {}
                self.add_log("ℹ️ Inizializzato current_analysis (non esisteva)")
                print("DEBUG-INIT: current_analysis inizializzato (era None)")
            else:
                print(f"DEBUG-INIT: current_analysis già esistente con {len(self.current_analysis)} chiavi")
                # Debug delle chiavi esistenti
                for key in self.current_analysis:
                    value_preview = str(self.current_analysis[key])
                    if len(value_preview) > 100:
                        value_preview = value_preview[:100] + "..."
                    print(f"DEBUG-INIT: - chiave: {key}, valore: {value_preview}")

            # ================ FASE 3: INIZIALIZZAZIONE VALORI DI RITORNO ================
            # Prepara i valori che verranno restituiti alla fine
            analysis_status_text = "**Stato analisi**: Completata"
            tabs_value = gr.Tabs(selected=2)  # Seleziona il tab "Generazione Libro"
            book_title_value = ""             # Titolo estratto dall'analisi
            book_index_value = ""             # Indice estratto dall'analisi
            voice_style_value = ""            # Stile di voce estratto dall'analisi
            book_type_value = ""              # Tipo di libro estratto dall'analisi
    
            print("DEBUG-VALUES: Valori di ritorno inizializzati con stringhe vuote")

            # ================ FASE 4: DETERMINA LA MODALITÀ (CRISP o LEGACY) ================
            # Verifica se si sta utilizzando il framework CRISP
            use_crisp = hasattr(self, 'use_crisp') and self.use_crisp
            self.add_log(f"ℹ️ Modalità CRISP: {use_crisp}")
            print(f"DEBUG-MODE: Utilizzo framework CRISP: {use_crisp}")
    
            # ================ FASE 5A: ELABORAZIONE MODALITÀ CRISP ================
            if use_crisp and hasattr(self, 'current_analysis') and self.current_analysis.get('crisp_project_id'):
                print("DEBUG-CRISP: Avvio elaborazione in modalità CRISP")
                self.add_log("🔍 Tentativo di estrazione dati da progetto CRISP")
        
                # Recupera l'ID del progetto CRISP
                project_id = self.current_analysis.get('crisp_project_id')
                if not project_id:
                    self.add_log("⚠️ ID Progetto CRISP non trovato nella current_analysis")
                    print("DEBUG-CRISP: ID Progetto CRISP non trovato - impossibile recuperare dati")
                else:
                    self.add_log(f"✅ ID Progetto CRISP trovato: {project_id}")
                    print(f"DEBUG-CRISP: ID Progetto CRISP trovato: {project_id}")
            
                    # Recupera i dati completi del progetto dal framework CRISP
                    project_data = None
                    try:
                        # Verifica se è possibile accedere ai dati del progetto
                        if hasattr(self, 'crisp') and hasattr(self.crisp, 'get_project_data'):
                            print(f"DEBUG-CRISP: Tentativo recupero dati con crisp.get_project_data({project_id})")
                    
                            # Chiamata effettiva per recuperare i dati
                            project_data = self.crisp.get_project_data(project_id)
                    
                            if project_data:
                                print(f"DEBUG-CRISP: Dati progetto recuperati: {len(project_data)} variabili")
                        
                                # Stampa le prime 10 variabili per debug
                                counter = 0
                                for key, value in project_data.items():
                                    if counter < 10:
                                        value_str = str(value)
                                        if len(value_str) > 100:
                                            value_str = value_str[:100] + "..."
                                        print(f"DEBUG-CRISP: Variabile {counter+1}: {key} = {value_str}")
                                        counter += 1
                                    else:
                                        break
                        
                                self.add_log(f"✅ Dati progetto recuperati: {len(project_data)} variabili")
                            else:
                                print("DEBUG-CRISP: ERRORE - get_project_data ha restituito None")
                                self.add_log("⚠️ get_project_data ha restituito None")
                        else:
                            print("DEBUG-CRISP: ERRORE - crisp o get_project_data non disponibili")
                    
                            # Diagnostica dettagliata
                            if hasattr(self, 'crisp'):
                                print(f"DEBUG-CRISP: self.crisp esiste: {type(self.crisp)}")
                                print(f"DEBUG-CRISP: hasattr(self.crisp, 'get_project_data'): {hasattr(self.crisp, 'get_project_data')}")
                        
                                # Elenca tutti i metodi disponibili per debug
                                methods = [method for method in dir(self.crisp) if not method.startswith('_')]
                                print(f"DEBUG-CRISP: Metodi disponibili in self.crisp: {methods}")
                            else:
                                print("DEBUG-CRISP: self.crisp non esiste come attributo")
            
                    except Exception as e:
                        self.add_log(f"⚠️ Errore nel recupero dati progetto CRISP: {str(e)}")
                        print(f"DEBUG-CRISP: Eccezione in get_project_data: {str(e)}")
                        print(f"DEBUG-CRISP: Traceback dettagliato:\n{traceback.format_exc()}")
            
                    # ================ FASE 5A-1: ESTRAZIONE DATI DAL PROGETTO CRISP ================
                    # Se abbiamo recuperato i dati del progetto, estrai le informazioni necessarie
                    if project_data:
                        # Salva i dati del progetto per uso futuro
                        self.current_analysis['project_data'] = project_data
                        print("DEBUG-CRISP: project_data salvato in current_analysis per uso futuro")
                
                        # ---------- Estrazione Titolo ----------
                        if 'TITOLO_LIBRO' in project_data:
                            book_title_value = project_data.get('TITOLO_LIBRO', '')
                            self.add_log(f"✅ Titolo estratto: {book_title_value}")
                            print(f"DEBUG-CRISP: Titolo estratto: '{book_title_value}'")
                        else:
                            print("DEBUG-CRISP: TITOLO_LIBRO non trovato nei dati del progetto")
                            # Cerca alternative per il titolo
                            for alt_key in ['TITLE', 'BOOK_TITLE', 'TITOLO']:
                                if alt_key in project_data:
                                    book_title_value = project_data.get(alt_key, '')
                                    print(f"DEBUG-CRISP: Titolo trovato in campo alternativo {alt_key}: {book_title_value}")
                                    break
                
                        # ---------- Estrazione Stile di Voce ----------
                        if 'VOICE_STYLE' in project_data:
                            voice_style_value = project_data.get('VOICE_STYLE', '')
                            self.add_log(f"✅ Stile voce estratto: {voice_style_value}")
                            print(f"DEBUG-CRISP: Stile voce estratto: '{voice_style_value}'")
                        else:
                            print("DEBUG-CRISP: VOICE_STYLE non trovato nei dati del progetto")
                            # Cerca alternative per lo stile di voce
                            for alt_key in ['TONE', 'STYLE', 'WRITING_STYLE']:
                                if alt_key in project_data:
                                    voice_style_value = project_data.get(alt_key, '')
                                    print(f"DEBUG-CRISP: Stile voce trovato in campo alternativo {alt_key}: {voice_style_value}")
                                    break
                
                        # ---------- Estrazione Tipo di Libro ----------
                        if 'LIBRO_TIPO' in project_data:
                            book_type_value = project_data.get('LIBRO_TIPO', '')
                            self.add_log(f"✅ Tipo di libro estratto: {book_type_value}")
                            print(f"DEBUG-CRISP: Tipo di libro estratto: '{book_type_value}'")
                        else:
                            print("DEBUG-CRISP: LIBRO_TIPO non trovato nei dati del progetto")
                            # Cerca alternative per il tipo di libro
                            for alt_key in ['BOOK_TYPE', 'TIPO', 'GENRE']:
                                if alt_key in project_data:
                                    book_type_value = project_data.get(alt_key, '')
                                    print(f"DEBUG-CRISP: Tipo libro trovato in campo alternativo {alt_key}: {book_type_value}")
                                    break
                
                        # ---------- Costruzione Indice del Libro ----------
                        print("DEBUG-CRISP: Tentativo costruzione indice del libro")
                
                        # Cerca CONTENT_PILLARS per la costruzione dell'indice
                        if 'CONTENT_PILLARS' in project_data:
                            self.add_log("🔍 Tentativo di costruzione indice da CONTENT_PILLARS")
                            print("DEBUG-CRISP: Tentativo di costruzione indice da CONTENT_PILLARS")
                    
                            pillars_text = project_data.get('CONTENT_PILLARS', '')
                            print(f"DEBUG-CRISP: CONTENT_PILLARS trovato, lunghezza: {len(pillars_text)}")
                            print(f"DEBUG-CRISP: Anteprima CONTENT_PILLARS: {pillars_text[:200]}...")
                    
                            # Estrai i pilastri di contenuto con diversi pattern di espressioni regolari
                            pillars = []
                            if isinstance(pillars_text, str):
                                # Prova diversi pattern per estrarre pilastri
                                print("DEBUG-CRISP: Tentativo di estrazione pilastri con pattern regex")
                        
                                pattern_results = {}
                        
                                for pattern in [
                                    r'(\d+\.\s*[^\n]+)',             # Pattern per "1. Titolo"
                                    r'(\d+\)\s*[^\n]+)',             # Pattern per "1) Titolo"
                                    r'(CAPITOLO \d+[^:\n]*:[^\n]+)', # Pattern per "CAPITOLO 1: Titolo"
                                    r'(Capitolo \d+[^:\n]*:[^\n]+)'  # Pattern per "Capitolo 1: Titolo"
                                ]:
                                    # Prova ogni pattern e registra i risultati
                                    pillar_matches = re.findall(pattern, pillars_text)
                                    pattern_results[pattern] = pillar_matches
                            
                                    if pillar_matches:
                                        print(f"DEBUG-CRISP: Pattern '{pattern}' ha trovato {len(pillar_matches)} corrispondenze")
                                        # Mostra le prime corrispondenze
                                        for i, match in enumerate(pillar_matches[:3]):
                                            print(f"DEBUG-CRISP: --- Match {i+1}: {match}")
                                
                                        if len(pillar_matches) >= 3:  # Minimo 3 capitoli per un buon indice
                                            pillars = [p.strip() for p in pillar_matches]
                                            break
                                    else:
                                        print(f"DEBUG-CRISP: Pattern '{pattern}' non ha trovato corrispondenze")
                        
                                # Se nessun pattern ha funzionato, prova con approcci alternativi
                                if not pillars:
                                    print("DEBUG-CRISP: Nessun pattern regex ha trovato abbastanza pilastri, provo approccio alternativo")
                            
                                    # Approccio alternativo: dividi per righe e cerca linee che sembrano titoli di capitolo
                                    lines = pillars_text.split('\n')
                                    print(f"DEBUG-CRISP: Text diviso in {len(lines)} righe per analisi")
                            
                                    for line in lines:
                                        line = line.strip()
                                        # Verifica se la riga sembra un titolo di capitolo
                                        if line and (
                                            line.lower().startswith('capitolo') or 
                                            line.lower().startswith('chapter') or
                                            re.match(r'^\d+[\.\)]', line)
                                        ):
                                            pillars.append(line)
                                            print(f"DEBUG-CRISP: Trovato potenziale pilastro: {line}")
                            
                                    if pillars:
                                        print(f"DEBUG-CRISP: Approccio alternativo ha trovato {len(pillars)} potenziali pilastri")
                                    else:
                                        print("DEBUG-CRISP: Anche l'approccio alternativo non ha trovato pilastri")
                                
                                        # Ultimo tentativo: cerca qualsiasi riga che sembra un titolo
                                        print("DEBUG-CRISP: Tentativo di ultima risorsa: qualsiasi riga che sembra un titolo")
                                        for line in lines:
                                            line = line.strip()
                                            # Riga abbastanza lunga ma non troppo e con maiuscole all'inizio
                                            if 10 <= len(line) <= 100 and line[0].isupper() and ":" not in line and line.endswith((".","?")):
                                                pillars.append(line)
                                                print(f"DEBUG-CRISP: Titolo potenziale trovato: {line}")
                                                if len(pillars) >= 5:  # Limita a 5 pilastri per questo approccio
                                                    break
                            else:
                                print(f"DEBUG-CRISP: CONTENT_PILLARS non è una stringa ma un {type(pillars_text)}")
                        
                                # Se CONTENT_PILLARS è una lista (possibile con alcune implementazioni)
                                if isinstance(pillars_text, list):
                                    print(f"DEBUG-CRISP: CONTENT_PILLARS è una lista con {len(pillars_text)} elementi")
                                    pillars = pillars_text
                    
                            # Costruisci l'indice a partire dai pilastri trovati
                            if pillars:
                                print(f"DEBUG-CRISP: Costruzione indice con {len(pillars)} pilastri trovati")
                        
                                # Pulisci e formatta l'indice
                                index_text = "INTRODUZIONE\n\n"
                        
                                for i, pillar in enumerate(pillars, 1):
                                    # Rimuovi numeri e simboli di punteggiatura iniziali
                                    try:
                                        clean_pillar = re.sub(r'^\d+[\.\)\s]+|^CAPITOLO\s+\d+\s*[:\.\-\s]*|^Capitolo\s+\d+\s*[:\.\-\s]*', '', pillar).strip()
                                        print(f"DEBUG-CRISP: Pillar {i} originale: '{pillar}'")
                                        print(f"DEBUG-CRISP: Pillar {i} pulito: '{clean_pillar}'")
                                
                                        if clean_pillar:  # Aggiungi solo se c'è testo dopo la pulizia
                                            index_text += f"CAPITOLO {i}: {clean_pillar}\n\n"
                                        else:
                                            print(f"DEBUG-CRISP: Pillar {i} ha prodotto un testo vuoto dopo la pulizia")
                                            # Usa il testo originale come fallback se la pulizia ha rimosso tutto
                                            index_text += f"CAPITOLO {i}: {pillar}\n\n"
                                    except Exception as e:
                                        print(f"DEBUG-CRISP: Errore nella pulizia del pillar {i}: {str(e)}")
                                        # Usa il testo originale in caso di errore
                                        index_text += f"CAPITOLO {i}: {pillar}\n\n"
                        
                                index_text += "CONCLUSIONE"
                                book_index_value = index_text
                                self.add_log(f"✅ Indice costruito con {len(pillars)} capitoli")
                                print(f"DEBUG-CRISP: Indice costruito con successo:\n{book_index_value}")
                            else:
                                # Indice di fallback se non sono stati trovati pilastri
                                print("DEBUG-CRISP: Nessun pilastro trovato, uso indice di fallback")
                                book_index_value = """INTRODUZIONE

    CAPITOLO 1: Fondamenti

    CAPITOLO 2: Metodologia

    CAPITOLO 3: Applicazione

    CAPITOLO 4: Casi Studio

    CAPITOLO 5: Risultati

    CONCLUSIONE"""
                                self.add_log("⚠️ Usato indice di fallback (nessun pilastro trovato)")
                                print("DEBUG-CRISP: Usato indice di fallback")
                        else:
                            print("DEBUG-CRISP: CONTENT_PILLARS non trovato nei dati del progetto")
                    
                            # Cerca campi alternativi che potrebbero contenere informazioni per l'indice
                            alternative_found = False
                            for key in ['BOOK_STRUCTURE', 'INDICE_LIBRO', 'BOOK_JOURNEY', 'CHAPTER_STRUCTURE']:
                                if key in project_data:
                                    print(f"DEBUG-CRISP: Trovato {key} come alternativa a CONTENT_PILLARS")
                                    self.add_log(f"🔍 Tentativo di costruzione indice da {key}")
                            
                                    # Implementazione simile a quella per CONTENT_PILLARS
                                    alternative_text = project_data.get(key, '')
                                    # (Ripeti logica simile a quella usata per CONTENT_PILLARS)
                                    # Per brevità, questo codice è omesso ma sarebbe una duplicazione
                                    # dell'approccio sopra adattato per il campo alternativo
                            
                                    alternative_found = True
                                    break
                    
                            if not alternative_found:
                                print("DEBUG-CRISP: Nessuna alternativa a CONTENT_PILLARS trovata, uso indice di fallback")
                    else:
                        print("DEBUG-CRISP: project_data è None o vuoto, impossibile estrarre dati")
    
            # ================ FASE 5B: ELABORAZIONE MODALITÀ LEGACY ================
            else:
                # Approccio legacy - senza framework CRISP
                self.add_log("🔍 Utilizzo approccio legacy (non CRISP)")
                print("DEBUG-LEGACY: Avvio elaborazione in modalità legacy (non CRISP)")

                try:
                    # Cerca dati nel file di contesto
                    context_file = "context.txt"
                    if os.path.exists(context_file):
                        # Informazioni sul file
                        file_size = os.path.getsize(context_file)
                        print(f"DEBUG-LEGACY: File context.txt trovato, dimensione: {file_size} bytes")
        
                        # Leggi l'intero contenuto del file
                        try:
                            with open(context_file, "r", encoding="utf-8") as f:
                                context_content = f.read()
            
                            self.add_log(f"✅ File contesto letto: {len(context_content)} caratteri")
                            print(f"DEBUG-LEGACY: File contesto letto con successo: {len(context_content)} caratteri")
            
                            # Stampa le prime righe per debug
                            content_preview = context_content[:500].replace('\n', ' ')
                            print(f"DEBUG-LEGACY: Anteprima dei primi 500 caratteri: {content_preview}...")
            
                            # Analisi strutturale del contenuto per determinare il formato
                            print("DEBUG-LEGACY: Analisi strutturale del contenuto")
            
                            # Cerca sezioni nel formato standard
                            section_pattern = r'===\s+([^=]+?)\s+-\s+\d{8}_\d{6}\s+===\n'
                            sections = re.findall(section_pattern, context_content)
            
                            if sections:
                                print(f"DEBUG-LEGACY: Trovate {len(sections)} sezioni nel formato standard")
                                for i, section in enumerate(sections[:5]):  # Mostra solo le prime 5
                                    print(f"DEBUG-LEGACY: - Sezione {i+1}: {section}")
                
                                # Analisi dettagliata delle sezioni
                                print("DEBUG-LEGACY: Analisi dettagliata delle sezioni trovate")
                                section_contents = re.split(section_pattern, context_content)[1:]  # Salta il primo che è vuoto
                
                                # Assicurati che abbiamo lo stesso numero di titoli e contenuti
                                if len(sections) == len(section_contents)/2:
                                    print("DEBUG-LEGACY: Numero corretto di sezioni e contenuti")
                                else:
                                    print(f"DEBUG-LEGACY: ATTENZIONE - Discrepanza: {len(sections)} titoli vs {len(section_contents)/2} contenuti")
                            else:
                                print("DEBUG-LEGACY: Nessuna sezione trovata nel formato standard")
                                # Cerca formati alternativi
                                alt_pattern = r'---\s+([^-]+?)\s+---\n'
                                alt_sections = re.findall(alt_pattern, context_content)
                                if alt_sections:
                                    print(f"DEBUG-LEGACY: Trovate {len(alt_sections)} sezioni in formato alternativo")
                                else:
                                    print("DEBUG-LEGACY: Nessuna sezione trovata in formato alternativo")
            
                            # ================ FASE 5B-1: ESTRAZIONE DATI LEGACY ================
                            try:
                                # ---------- Estrazione Titolo ----------
                                print("DEBUG-LEGACY: Tentativo estrazione titolo")
                
                                # Lista di pattern da provare per trovare il titolo
                                title_patterns = [
                                    r'7\)[^:]*:[^T]*Titolo[^:]*:[^\n]*\n([^\n]+)',
                                    r'7\.[^:]*:[^T]*Titolo[^:]*:[^\n]*\n([^\n]+)',
                                    r'Titolo[^:]*:[^\n]*\n([^\n]+)',
                                    r'(?:title|titolo)[^:]*:[^\n]*\n([^\n]+)',
                                    r'THE[^"]*"([^"]+)"',  # Pattern per titoli tra virgolette
                                    r'"([^"]+)".*?(?:il tuo nuovo libro|your new book)',  # Pattern per titoli suggeriti
                                ]
                
                                # Prova ogni pattern fino a trovare una corrispondenza
                                book_title_value = ""
                                for pattern in title_patterns:
                                    print(f"DEBUG-LEGACY: Provo pattern titolo: {pattern}")
                                    title_match = re.search(pattern, context_content, re.IGNORECASE)
                    
                                    if title_match:
                                        book_title_value = title_match.group(1).strip()
                                        self.add_log(f"✅ Titolo estratto (legacy): {book_title_value}")
                                        print(f"DEBUG-LEGACY: Titolo estratto con pattern '{pattern}': {book_title_value}")
                                        break
                
                                if not book_title_value:
                                    print("DEBUG-LEGACY: Nessun titolo trovato con i pattern standard")
                    
                                    # Cerca titoli in sezioni specifiche
                                    print("DEBUG-LEGACY: Ricerca titolo in sezioni specifiche")
                    
                                    # Cerca sezioni che potrebbero contenere titoli
                                    title_sections = [s for s in sections if 'titolo' in s.lower() or 'title' in s.lower()]
                                    if title_sections:
                                        print(f"DEBUG-LEGACY: Trovate {len(title_sections)} sezioni potenzialmente contenenti titoli")
                        
                                        # Per ogni sezione potenziale, cerca titoli
                                        for title_section in title_sections:
                                            section_index = sections.index(title_section)
                                            section_content = section_contents[section_index * 2]  # Moltiplica per 2 a causa della divisione
                            
                                            # Cerca titoli nella sezione
                                            title_lines = [line for line in section_content.split('\n') if line.strip()]
                                            if title_lines:
                                                print(f"DEBUG-LEGACY: Sezione '{title_section}' contiene {len(title_lines)} linee non vuote")

    # Prendi la prima linea che sembra un titolo
                                            for line in title_lines:
                                                # Se la linea sembra un titolo (non troppo lungo, non contiene caratteri speciali)
                                                if 10 <= len(line) <= 100 and not any(char in line for char in ['{', '}', '(', ')', '[', ']']):
                                                    book_title_value = line.strip().strip('"\'')
                                                    print(f"DEBUG-LEGACY: Titolo estratto da sezione: {book_title_value}")
                                                    break
                            
                                            if book_title_value:
                                                break
                
                                # ---------- Estrazione Indice ----------
                                print("DEBUG-LEGACY: Tentativo estrazione indice")
                
                                # Lista di pattern da provare per trovare l'indice
                                index_patterns = [
                                    r'8\)[^:]*:[^I]*Indice[^:]*:[^\n]*\n(.*?)(?=\n\n|$)',
                                    r'8\.[^:]*:[^I]*Indice[^:]*:[^\n]*\n(.*?)(?=\n\n|$)',
                                    r'Indice[^:]*:[^\n]*\n(.*?)(?=\n\n|$)',
                                    r'(?:indice|index)[^:]*:[^\n]*\n(.*?)(?=\n\n|$)',
                                    r'INDICE DEL LIBRO[^\n]*\n(.*?)(?=\n\n===|$)',  # Pattern specifico
                                    r'Indice del Libro[^\n]*\n(.*?)(?=\n\n|$)'      # Altra variante
                                ]
                
                                # Prova ogni pattern fino a trovare una corrispondenza
                                book_index_value = ""
                                for pattern in index_patterns:
                                    print(f"DEBUG-LEGACY: Provo pattern indice: {pattern}")
                                    index_match = re.search(pattern, context_content, re.DOTALL | re.IGNORECASE)
                    
                                    if index_match:
                                        book_index_value = index_match.group(1).strip()
                                        self.add_log(f"✅ Indice estratto (legacy): {len(book_index_value)} caratteri")
                                        print(f"DEBUG-LEGACY: Indice estratto con pattern '{pattern}', lunghezza: {len(book_index_value)}")
                                        print(f"DEBUG-LEGACY: Preview indice: {book_index_value[:200]}...")
                                        break
                
                                if not book_index_value:
                                    print("DEBUG-LEGACY: Nessun indice trovato con i pattern standard")
                                    print("DEBUG-LEGACY: Tentativo ricerca capitoli diretta")
                    
                                    # Cerca tutti i pattern che sembrano capitoli
                                    chapter_patterns = [
                                        r'(CAPITOLO\s+\d+[^:\n]*:[^\n]+)',
                                        r'(CHAPTER\s+\d+[^:\n]*:[^\n]+)',
                                        r'(Capitolo\s+\d+[^:\n]*:[^\n]+)'
                                    ]
                    
                                    all_chapters = []
                                    for pattern in chapter_patterns:
                                        chapters = re.findall(pattern, context_content, re.IGNORECASE)
                                        if chapters:
                                            print(f"DEBUG-LEGACY: Pattern '{pattern}' ha trovato {len(chapters)} capitoli")
                                            all_chapters.extend(chapters)
                    
                                    if all_chapters:
                                        print(f"DEBUG-LEGACY: Trovati {len(all_chapters)} capitoli potenziali nel testo")
                        
                                        # Cerca il blocco di testo che contiene più capitoli consecutivi
                                        chapter_sections = []
                                        for match in re.finditer(r'((?:CAPITOLO\s+\d+[^\n]*\n){2,})', context_content, re.IGNORECASE):
                                            section_text = match.group(1)
                                            chapter_count = section_text.lower().count('capitolo')
                                            chapter_sections.append((match.start(), match.end(), section_text, chapter_count))
                        
                                        if chapter_sections:
                                            # Usa la sezione con più capitoli
                                            best_section = max(chapter_sections, key=lambda x: x[3])
                                            print(f"DEBUG-LEGACY: Trovato blocco indice con {best_section[3]} capitoli")
                            
                                            # Aggiungi l'introduzione e conclusione se non presenti
                                            book_index_value = "INTRODUZIONE\n\n" + best_section[2] + "\nCONCLUSIONE"
                                            print(f"DEBUG-LEGACY: Indice costruito da blocco trovato: {len(book_index_value)} caratteri")
                                        else:
                                            # Se non ci sono blocchi, combina tutti i capitoli trovati
                                            book_index_value = "INTRODUZIONE\n\n" + "\n".join(all_chapters) + "\n\nCONCLUSIONE"
                                            print(f"DEBUG-LEGACY: Indice costruito da capitoli individuali: {len(book_index_value)} caratteri")
                
                                # ---------- Estrazione Stile di Voce ----------
                                print("DEBUG-LEGACY: Tentativo estrazione stile di voce")
                
                                # Lista di pattern da provare per trovare lo stile di voce
                                voice_patterns = [
                                    r'Tono di voce[^:]*:[^\n]*\n([^\n]+)',
                                    r'Voce[^:]*:[^\n]*\n([^\n]+)',
                                    r'Stile[^:]*:[^\n]*\n([^\n]+)',
                                    r'VOICE_STYLE[^:]*:[^\n]*\n([^\n]+)',
                                    r'(?:conversazionale|formale|informativo|tecnico)[^\n]+'
                                ]
                
                                # Prova ogni pattern fino a trovare una corrispondenza
                                voice_style_value = ""
                                for pattern in voice_patterns:
                                    print(f"DEBUG-LEGACY: Provo pattern stile voce: {pattern}")
                                    voice_match = re.search(pattern, context_content, re.IGNORECASE)
                    
                                    if voice_match:
                                        # Gestione speciale per l'ultimo pattern che non ha gruppo
                                        if 'conversazionale' in pattern:
                                            voice_style_value = voice_match.group(0).strip()
                                        else:
                                            voice_style_value = voice_match.group(1).strip()
                        
                                        self.add_log(f"✅ Stile voce estratto (legacy): {voice_style_value}")
                                        print(f"DEBUG-LEGACY: Stile voce estratto con pattern '{pattern}': {voice_style_value}")
                                        break
                
                                if not voice_style_value:
                                    print("DEBUG-LEGACY: Nessuno stile di voce trovato con i pattern standard")
                    
                                    # Cerca nelle sezioni potenzialmente legate allo stile
                                    style_sections = [s for s in sections if any(term in s.lower() for term in 
                                                     ['voice', 'voce', 'stile', 'tone', 'tono'])]
                    
                                    if style_sections:
                                        print(f"DEBUG-LEGACY: Trovate {len(style_sections)} sezioni potenzialmente contenenti stile")
                        
                                        for style_section in style_sections:
                                            section_index = sections.index(style_section)
                                            section_content = section_contents[section_index * 2]
                            
                                            # Cerca stile nelle prime 5 righe della sezione
                                            style_lines = [line for line in section_content.split('\n')[:5] if line.strip()]
                                            if style_lines:
                                                voice_style_value = style_lines[0].strip()
                                                print(f"DEBUG-LEGACY: Stile voce estratto da sezione: {voice_style_value}")
                                                break
                
                                # ---------- Estrazione Tipo di Libro ----------
                                print("DEBUG-LEGACY: Tentativo estrazione tipo di libro")
                
                                # Lista di pattern da provare per trovare il tipo di libro
                                book_type_patterns = [
                                    r'tipo di libro[^:]*:[^\n]*\n*\s*([^\n]+)',
                                    r'genere[^:]*:[^\n]*\n*\s*([^\n]+)',
                                    r'categoria[^:]*:[^\n]*\n*\s*([^\n]+)',
                                    r'LIBRO_TIPO[^:]*:[^\n]*\n*\s*([^\n]+)'
                                ]
                
                                # Prova ogni pattern fino a trovare una corrispondenza
                                book_type_value = ""
                                for pattern in book_type_patterns:
                                    print(f"DEBUG-LEGACY: Provo pattern tipo libro: {pattern}")
                                    book_type_match = re.search(pattern, context_content, re.IGNORECASE)
                    
                                    if book_type_match:
                                        book_type_value = book_type_match.group(1).strip()
                                        self.add_log(f"✅ Tipo di libro estratto (legacy): {book_type_value}")
                                        print(f"DEBUG-LEGACY: Tipo di libro estratto con pattern '{pattern}': {book_type_value}")
                                        break
                
                                if not book_type_value:
                                    print("DEBUG-LEGACY: Nessun tipo di libro trovato con i pattern standard")
                    
                                    # Cerca valori comuni di tipo libro nel testo
                                    common_types = ["Manuale", "Non-Fiction", "Ricettario", "Self-Help", "How-To", 
                                                   "Craft", "Hobby", "Survival", "Test Study"]
                    
                                    for book_type in common_types:
                                        if book_type.lower() in context_content.lower():
                                            book_type_value = book_type
                                            print(f"DEBUG-LEGACY: Tipo libro trovato nel testo: {book_type_value}")
                                            break
            
                            except Exception as extraction_error:
                                self.add_log(f"⚠️ Errore nell'estrazione dei dati: {str(extraction_error)}")
                                print(f"DEBUG-LEGACY: Errore nell'estrazione dei dati: {str(extraction_error)}")
                                print(f"DEBUG-LEGACY: Traceback errore estrazione:\n{traceback.format_exc()}")
            
                        except Exception as read_error:
                            self.add_log(f"⚠️ Errore nella lettura del file context.txt: {str(read_error)}")
                            print(f"DEBUG-LEGACY: Errore nella lettura del file context.txt: {str(read_error)}")
                            print(f"DEBUG-LEGACY: Traceback errore lettura:\n{traceback.format_exc()}")
            
                    else:
                        self.add_log("⚠️ File context.txt non trovato!")
                        print(f"DEBUG-LEGACY: File context.txt non trovato in {os.getcwd()}")
        
                        # Elenca i file nella directory corrente
                        files = os.listdir()
                        print(f"DEBUG-LEGACY: File nella directory corrente: {files}")
        
                        # Cerca file alternativi che potrebbero contenere i dati
                        context_alternatives = [f for f in files if 'context' in f.lower() or 
                                              'backup' in f.lower() or f.endswith('.txt')]
        
                        if context_alternatives:
                            print(f"DEBUG-LEGACY: Trovati possibili file alternativi: {context_alternatives}")
                            self.add_log(f"⚠️ File context.txt non trovato, ma ci sono alternative: {context_alternatives}")
    
                except Exception as e:
                    self.add_log(f"⚠️ Errore nell'estrazione legacy: {str(e)}")
                    print(f"DEBUG-LEGACY: Errore nell'estrazione legacy: {str(e)}")
                    print(f"DEBUG-LEGACY: Traceback errore estrazione:\n{traceback.format_exc()}")

            # ================ FASE 6: VALORI DI FALLBACK ================
            # Se necessario, utilizza valori di fallback per i campi che non è stato possibile estrarre

            print("DEBUG-FINAL: Verifica valori estratti prima di applicare fallback")
            print(f"DEBUG-FINAL: Titolo estratto: '{book_title_value}'")
            print(f"DEBUG-FINAL: Indice estratto: {len(book_index_value) if book_index_value else 0} caratteri")
            print(f"DEBUG-FINAL: Stile voce estratto: '{voice_style_value}'")
            print(f"DEBUG-FINAL: Tipo libro estratto: '{book_type_value}'")

            # Applica fallback se necessario
            if not book_title_value:
                book_title_value = "Il tuo nuovo libro"
                self.add_log("⚠️ Usato titolo di fallback")
                print("DEBUG-FINAL: Usato titolo di fallback")

            if not book_index_value:
                book_index_value = """INTRODUZIONE

    CAPITOLO 1: Fondamenti

    CAPITOLO 2: Metodologia

    CAPITOLO 3: Applicazione

    CONCLUSIONE"""
                self.add_log("⚠️ Usato indice di fallback")
                print("DEBUG-FINAL: Usato indice di fallback")

            if not voice_style_value:
                voice_style_value = "Conversazionale e informativo"
                self.add_log("⚠️ Usato stile voce di fallback")
                print("DEBUG-FINAL: Usato stile voce di fallback")

            if not book_type_value:
                book_type_value = "Manuale (Non-Fiction)"
                self.add_log("⚠️ Usato tipo libro di fallback")
                print("DEBUG-FINAL: Usato tipo libro di fallback")

            # ================ FASE 7: AGGIORNAMENTO INTERFACCIA ================
            # Aggiorna i campi dell'interfaccia con i valori estratti

            print("DEBUG-UPDATE: Tentativo aggiornamento campi interfaccia")

            # Importa gradio esplicitamente se necessario
            import gradio as gr

            try:
                print("DEBUG-UPDATE: Inizio aggiornamento componenti Gradio")

                # Verifica e stampa info sulla versione di Gradio
                gradio_version = gr.__version__ if hasattr(gr, '__version__') else "sconosciuta"
                print(f"DEBUG-UPDATE: Versione Gradio rilevata: {gradio_version}")

                # Verifica quali componenti esistono
                components = {
                    'book_title': hasattr(self, 'book_title'),
                    'book_index': hasattr(self, 'book_index'),
                    'voice_style': hasattr(self, 'voice_style'),
                    'book_type_hidden': hasattr(self, 'book_type_hidden'),
                    'tabs': hasattr(self, 'tabs')
                }
                print(f"DEBUG-UPDATE: Componenti esistenti: {components}")

                # Per Gradio 5.x, il metodo corretto è .update(value=...)

                if hasattr(self, 'book_title'):
                    print(f"DEBUG-UPDATE: Aggiornamento book_title: '{book_title_value}'")
                    self.book_title.update(value=book_title_value)
                    self.add_log(f"✓ Campo book_title aggiornato")
                    print(f"DEBUG-UPDATE: Campo book_title aggiornato con: {book_title_value}")

                if hasattr(self, 'book_index'):
                    print(f"DEBUG-UPDATE: Aggiornamento book_index: {len(book_index_value)} caratteri")
                    self.book_index.update(value=book_index_value)  
                    self.add_log(f"✓ Campo book_index aggiornato")
                    print(f"DEBUG-UPDATE: Campo book_index aggiornato (lunghezza: {len(book_index_value)} caratteri)")

                if hasattr(self, 'voice_style'):
                    print(f"DEBUG-UPDATE: Aggiornamento voice_style: '{voice_style_value}'")
                    self.voice_style.update(value=voice_style_value)
                    self.add_log(f"✓ Campo voice_style aggiornato")
                    print(f"DEBUG-UPDATE: Campo voice_style aggiornato con: {voice_style_value}")

                # Aggiorna il tipo di libro se esiste il campo
                if hasattr(self, 'book_type_hidden'):
                    print(f"DEBUG-UPDATE: Aggiornamento book_type_hidden: '{book_type_value}'")
                    self.book_type_hidden.update(value=book_type_value)
                    self.add_log(f"✓ Campo book_type_hidden aggiornato")
                    print(f"DEBUG-UPDATE: Campo book_type_hidden aggiornato con: {book_type_value}")

                # Cambia tab
                if hasattr(self, 'tabs'):
                    print("DEBUG-UPDATE: Aggiornamento tab a indice 2 (Generazione Libro)")
                    tabs_value = gr.Tabs(selected=2)  # Seleziona il tab "Generazione Libro"
                    self.add_log("✓ Tab aggiornato")
                    print("DEBUG-UPDATE: Tab aggiornato a indice 2 (Generazione Libro)")
    
                # Verifica che Gradio abbia effettivamente aggiornato i campi
                print("DEBUG-UPDATE: Verifica finale campi aggiornati")
                if hasattr(self, 'book_title'):
                    print(f"DEBUG-UPDATE: book_title.value finale: {getattr(self.book_title, 'value', 'N/A')}")
    
            except Exception as ui_error:
                self.add_log(f"⚠️ Errore nell'aggiornamento UI: {str(ui_error)}")
                print(f"DEBUG-UPDATE: Errore nell'aggiornamento UI: {str(ui_error)}")
                print(f"DEBUG-UPDATE: Traceback errore UI:\n{traceback.format_exc()}")

                # Tentativo aggiornamento con metodo alternativo
                print("DEBUG-UPDATE: Tentativo metodo alternativo per aggiornamento UI")
                try:
                    # Prova con l'assegnazione diretta
                    if hasattr(self, 'book_title'):
                        try:
                            print("DEBUG-UPDATE: Tentativo assegnazione diretta a book_title.value")
                            self.book_title.value = book_title_value
                            print(f"DEBUG-UPDATE: Assegnazione diretta riuscita: {self.book_title.value}")
                        except Exception as direct_error:
                            print(f"DEBUG-UPDATE: Errore assegnazione diretta: {str(direct_error)}")
    
                    # Prova con setattr
                    if hasattr(self, 'book_index'):
                        try:
                            print("DEBUG-UPDATE: Tentativo con setattr per book_index")
                            setattr(self.book_index, "value", book_index_value)
                            print("DEBUG-UPDATE: setattr eseguito per book_index")
                        except Exception as setattr_error:
                            print(f"DEBUG-UPDATE: Errore con setattr: {str(setattr_error)}")
            
                except Exception as alt_error:
                    print(f"DEBUG-UPDATE: Anche il metodo alternativo fallito: {str(alt_error)}")

            # ================ FASE 8: COMPLETAMENTO ================
            self.add_log("✅ Funzione complete_analysis terminata con successo")
            print("DEBUG-FINAL: Funzione complete_analysis terminata con successo")

            # Un ultimo check prima di restituire i valori
            print(f"DEBUG-FINAL: Valori finali da restituire:")
            print(f"DEBUG-FINAL: - Log history: {len(self.log_history)} righe")
            print(f"DEBUG-FINAL: - Status: {analysis_status_text}")
            print(f"DEBUG-FINAL: - Tabs: {tabs_value}")
            print(f"DEBUG-FINAL: - Titolo: {book_title_value}")
            print(f"DEBUG-FINAL: - Indice: {len(book_index_value)} caratteri")
            print(f"DEBUG-FINAL: - Stile: {voice_style_value}")
            print(f"DEBUG-FINAL: - Tipo: {book_type_value}")

            # ================ FASE 8.5: SALVATAGGIO NEL DATABASE ================
            try:
                # Estrai la keyword dall'analisi corrente
                keyword = None
                if hasattr(self, 'current_analysis') and self.current_analysis:
                    keyword = self.current_analysis.get('KEYWORD')
        
                # Se non abbiamo ancora una keyword, usa il titolo del libro
                if not keyword and book_title_value:
                    keyword = book_title_value.split(':')[0].strip()  # Prende la prima parte del titolo
        
                # Verifica che abbiamo una keyword da usare
                if keyword:
                    self.add_log(f"💾 Tentativo salvataggio analisi nel database per keyword: {keyword}")
                    print(f"DEBUG-DB: Tentativo salvataggio con keyword: {keyword}")
        
                    try:
                        # Verifica che il database esista
                        if os.path.exists(self.crisp.project_db_path):
                            # Crea un nuovo progetto nel database
                            conn = sqlite3.connect(self.crisp.project_db_path)
                            cursor = conn.cursor()
                
                            # Crea un nuovo progetto
                            current_date = datetime.now().isoformat()
                            cursor.execute(
                                "INSERT INTO projects (name, creation_date, last_updated) VALUES (?, ?, ?)",
                                (f"Progetto {keyword}", current_date, current_date)
                            )
                            project_id = cursor.lastrowid
                
                            # Salva le variabili principali di progetto
                            main_vars = {
                                "KEYWORD": keyword,
                                "TITOLO_LIBRO": book_title_value,
                                "INDICE_LIBRO": book_index_value,
                                "VOICE_STYLE": voice_style_value,
                                "BOOK_TYPE": book_type_value
                            }
                
                            # Inserisci le variabili nel database
                            for key, value in main_vars.items():
                                if value:  # Salva solo valori non vuoti
                                    cursor.execute(
                                        "INSERT INTO project_variables (project_id, name, value) VALUES (?, ?, ?)",
                                        (project_id, key, str(value))
                                    )
                
                            # Se esistono dati in current_analysis, salvali come variabili
                            if hasattr(self, 'current_analysis') and self.current_analysis:
                                for key, value in self.current_analysis.items():
                                    if key not in main_vars and value:  # Evita duplicati
                                        cursor.execute(
                                            "INSERT INTO project_variables (project_id, name, value) VALUES (?, ?, ?)",
                                            (project_id, key, str(value))
                                        )
                
                            # Salva il contenuto del file di contesto come risultato di progetto
                            if hasattr(self.chat_manager, 'context_file') and os.path.exists(self.chat_manager.context_file):
                                with open(self.chat_manager.context_file, 'r', encoding='utf-8') as f:
                                    context_content = f.read()
                        
                                cursor.execute(
                                    "INSERT INTO project_results (project_id, prompt_id, created_at, data) VALUES (?, ?, ?, ?)",
                                    (project_id, "ANALISI", current_date, context_content)
                                )
                
                            conn.commit()
                            conn.close()
                
                            self.add_log(f"✅ Analisi salvata con successo nel database (ID: {project_id})")
                            print(f"DEBUG-DB: Analisi salvata con successo, ID: {project_id}")
                        else:
                            self.add_log(f"⚠️ Database non trovato: {self.crisp.project_db_path}")
                            print(f"DEBUG-DB: Database non trovato: {self.crisp.project_db_path}")
                    except Exception as db_error:
                        self.add_log(f"⚠️ Errore durante il salvataggio nel database: {str(db_error)}")
                        print(f"DEBUG-DB: Errore salvataggio DB: {str(db_error)}")
                        print(f"DEBUG-DB: {traceback.format_exc()}")
                else:
                    self.add_log("⚠️ Impossibile salvare nel database: keyword non trovata")
                    print("DEBUG-DB: Impossibile salvare: keyword non trovata")
            except Exception as save_error:
                self.add_log(f"⚠️ Errore generale nel salvataggio: {str(save_error)}")
                print(f"DEBUG-DB: Errore generale nel salvataggio: {str(save_error)}")

            # ================ FASE 9: RESTITUZIONE VALORI ================
            # Restituzione esattamente 6 valori come richiesto dall'interfaccia
            return self.chat_manager.get_log_history_string(), analysis_status_text, tabs_value, book_title_value, book_index_value, voice_style_value

        except Exception as e:
            # Gestione errori globale - questo è l'UNICO except per il try principale
            error_msg = f"❌ Errore durante il completamento dell'analisi: {str(e)}"
            self.add_log(error_msg)
            print(f"DEBUG-ERROR: ERRORE CRITICO in complete_analysis: {str(e)}")

            # Traceback completo dell'errore
            error_trace = traceback.format_exc()
            self.add_log(f"Dettagli errore:\n{error_trace}")
            print(f"DEBUG-ERROR: Traceback completo:\n{error_trace}")

            # Restituisci valori minimi in caso di errore critico
            print("DEBUG-ERROR: Restituzione valori di fallback a causa dell'errore")
            return self.chat_manager.get_log_history_string(), "**Stato analisi**: Errore", gr.Tabs(selected=0), "", "", ""
    
    
    def _complete_analysis_crisp(self):
        """Completa l'analisi CRISP 5.0"""
        try:
            self.add_log("Completamento analisi CRISP 5.0...")

            # Recupera l'ID del progetto CRISP corrente
            project_id = self.current_analysis.get('crisp_project_id')
            if not project_id:
                return self.add_log("Errore: Nessun progetto CRISP corrente trovato")

            # Recupera i dati completi del progetto
            project_data = self.crisp.get_project_data(project_id)

            # Aggiorna l'interfaccia con i dati estratti
            if hasattr(self, 'book_title') and 'TITOLO_LIBRO' in project_data:
                self.book_title.update(value=project_data['TITOLO_LIBRO'])

            if hasattr(self, 'book_language') and 'LINGUA' in project_data:
                self.book_language.update(value=project_data['LINGUA'])

            if hasattr(self, 'voice_style') and 'VOICE_STYLE' in project_data:
                self.voice_style.update(value=project_data['VOICE_STYLE'])

            # Costruisci l'indice del libro in base ai CONTENT_PILLARS
            if hasattr(self, 'book_index') and 'CONTENT_PILLARS' in project_data:
                # Estrai i pilastri di contenuto e trasformali in un indice
                pillars_text = project_data.get('CONTENT_PILLARS', '')
            
                # Cerca di estrarre i titoli dei pilastri
                pillars = []
                if isinstance(pillars_text, str):
                    # Cerca di estrarre i pilastri con regex
                    pillar_matches = re.findall(r'(\d+\.\s*[^\n]+)', pillars_text)
                    if pillar_matches:
                        pillars = [p.strip() for p in pillar_matches]
                    else:
                        # Alternativa: dividi per linee e filtra le linee non vuote
                        pillar_lines = [line.strip() for line in pillars_text.split('\n') if line.strip()]
                        pillars = pillar_lines[:5]  # Limita a 5 pilastri
            
                # Se abbiamo trovato dei pilastri, costruisci l'indice
                if pillars:
                    index_text = "INTRODUZIONE\n\n"
                    for i, pillar in enumerate(pillars, 1):
                        # Pulisci il pillar rimuovendo numeri e simboli iniziali
                        clean_pillar = re.sub(r'^\d+[\.\)\s]+', '', pillar).strip()
                        index_text += f"CAPITOLO {i}: {clean_pillar}\n"
                    index_text += "\nCONCLUSIONE"
                else:
                    # Indice di fallback se non troviamo pillars
                    index_text = "INTRODUZIONE\n\nCAPITOLO 1: Fondamenti\n\nCAPITOLO 2: Metodologia\n\nCAPITOLO 3: Applicazione\n\nCAPITOLO 4: Casi Studio\n\nCAPITOLO 5: Risultati\n\nCONCLUSIONE"
                
                self.book_index.update(value=index_text)
            
            # Mostra la sezione dei dettagli del libro
            if hasattr(self, 'book_details'):
                self.book_details.update(visible=True)
            
            # Crea un riepilogo dei dati estratti
            summary = f"""
            ===== ANALISI CRISP 5.0 COMPLETATA =====
        
            Titolo: {project_data.get('TITOLO_LIBRO', 'N/A')}
            Sottotitolo: {project_data.get('SOTTOTITOLO_LIBRO', 'N/A')}
        
            Angolo di Attacco: {project_data.get('ANGOLO_ATTACCO', 'N/A')}
            Big Idea: {project_data.get('BIG_IDEA', 'N/A')}
            Buyer Persona: {project_data.get('BUYER_PERSONA_SUMMARY', 'N/A')}
        
            Promessa Principale: {project_data.get('PROMESSA_PRINCIPALE', 'N/A')}
        
            L'interfaccia è stata aggiornata con i dati del progetto.
            Puoi ora procedere con la generazione del libro.
            """
            
            # Salvataggio nel database
            try:
                self.add_log("💾 Salvataggio dei risultati CRISP nel database...")
                
                # Il progetto è già salvato nel framework CRISP,
                # ma possiamo aggiungerlo anche al database generale per la visualizzazione
                if os.path.exists(self.crisp.project_db_path):
                    conn = sqlite3.connect(self.crisp.project_db_path)
                    cursor = conn.cursor()
                    
                    # Verifica se il progetto esiste già nel database
                    cursor.execute("SELECT id FROM projects WHERE name = ?", (f"CRISP-{project_id}",))
                    existing = cursor.fetchone()
                    
                    if not existing:
                        # Crea una entry nel database principale
                        current_date = datetime.now().isoformat()
                        cursor.execute(
                            "INSERT INTO projects (name, creation_date, last_updated) VALUES (?, ?, ?)",
                            (f"CRISP-{project_id}", current_date, current_date)
                        )
                        
                        # Salva i principali metadati come variabili
                        db_project_id = cursor.lastrowid
                        
                        # Se il progetto è stato salvato correttamente
                        if db_project_id:
                            # Salva keyword e altre informazioni chiave
                            keyword = project_data.get('KEYWORD', '')
                            cursor.execute(
                                "INSERT INTO project_variables (project_id, name, value) VALUES (?, ?, ?)",
                                (db_project_id, 'KEYWORD', keyword)
                            )
                            
                            # Salva riferimento al progetto CRISP originale
                            cursor.execute(
                                "INSERT INTO project_variables (project_id, name, value) VALUES (?, ?, ?)",
                                (db_project_id, 'CRISP_PROJECT_ID', str(project_id))
                            )
                            
                            # Registra avvenuto salvataggio
                            cursor.execute(
                                "INSERT INTO project_results (project_id, prompt_id, created_at, data) VALUES (?, ?, ?, ?)",
                                (db_project_id, "CRISP_SUMMARY", current_date, summary)
                            )
                            
                            conn.commit()
                            self.add_log(f"✅ Riferimento al progetto CRISP salvato nel database principale (ID: {db_project_id})")
                    else:
                        self.add_log("ℹ️ Progetto CRISP già presente nel database")
                    
                    conn.close()
            except Exception as db_error:
                self.add_log(f"⚠️ Errore durante il salvataggio nel database: {str(db_error)}")
                print(f"DEBUG-DB: Errore salvataggio DB: {str(db_error)}")           

            self.add_log(summary)
            return self.chat_manager.get_log_history_string()
            
        except Exception as e:
            error_msg = f"Errore durante il completamento dell'analisi CRISP 5.0: {str(e)}"
            self.add_log(error_msg)
            logging.error(error_msg)
            return self.chat_manager.get_log_history_string()

    
    def _complete_analysis_legacy(self):
        """Completa l'analisi legacy e mostra una finestra di dialogo per la selezione"""
        try:
            self.add_log("Completamento analisi legacy...")

            # 1. Recupera i dati dall'analisi salvata
            context_file = "context.txt"
    
            try:
                with open(context_file, "r", encoding="utf-8") as f:
                    full_text = f.read()
        
                # Estrai le diverse sezioni in base ai punti numerati
                # Cerca titoli e indici
                titoli_section = re.search(r'7\)\s+\*\*Titolo\s+&\s+sottotitolo[^F]*?FINE', full_text, re.DOTALL)
                indice_section = re.search(r'8\)\s+\*\*Indice\s+del\s+libro[^F]*?FINE', full_text, re.DOTALL)
        
                titoli_text = titoli_section.group(0) if titoli_section else ""
                indice_text = indice_section.group(0) if indice_section else ""
        
                # Estrai le opzioni di titolo
                titoli_options = []
                titoli_matches = re.finditer(r'(?:Opzione|Titolo)\s+\d+[:\)]\s+[""]?([^"\n]+)[""]?(?:\s*[:–-]\s*[""]?([^"\n]+)[""]?)?', titoli_text)
    
                for i, match in enumerate(titoli_matches, 1):
                    titolo = match.group(1).strip() if match.group(1) else ""
                    sottotitolo = match.group(2).strip() if match.group(2) else ""
                    if titolo:
                        titoli_options.append({
                            "id": i,
                            "titolo": titolo, 
                            "sottotitolo": sottotitolo,
                            "display": f"Opzione {i}: {titolo} - {sottotitolo}"
                        })
    
                # Estrai gli indici proposti
                indici_options = []
                indici_matches = re.finditer(r'(?:Indice|INDICE|CAPITOLI)[^\n]*\n(.*?)(?=\n\n|\n[A-Z]|$)', indice_text, re.DOTALL)
    
                for i, match in enumerate(indici_matches, 1):
                    indice_content = match.group(1).strip()
                    # Pulisci e formatta l'indice
                    indice_lines = [line.strip() for line in indice_content.split('\n') if line.strip()]
                    indice_formatted = "\n".join(indice_lines)
                    indici_options.append({
                        "id": i,
                        "content": indice_formatted,
                        "display": f"Indice {i}"
                    })
    
                # Estrai il tono di voce suggerito
                voice_style_match = re.search(r'(?:tono|stile|voce)[^:]*[:]\s*([^\n\.]+)', full_text, re.IGNORECASE)
                voice_style = voice_style_match.group(1).strip() if voice_style_match else "Conversazionale"
    
                # Salva temporaneamente le opzioni per l'uso nella finestra di dialogo
                self.temp_titles = titoli_options
                self.temp_indices = indici_options
                self.temp_voice_style = voice_style
            
                # Log delle opzioni
                self.add_log("\n=== OPZIONI DI SELEZIONE ===")
                self.add_log(f"Titoli disponibili: {len(titoli_options)}")
                for t in titoli_options:
                    self.add_log(f"- {t['display']}")
                
                self.add_log(f"Indici disponibili: {len(indici_options)}")
                for idx in indici_options:
                    preview = idx['content'][:50] + "..." if len(idx['content']) > 50 else idx['content']
                    self.add_log(f"- Indice {idx['id']}: {preview}")
                
                self.add_log(f"Stile di voce: {voice_style}")
            
                # Crea una finestra di dialogo per la selezione
                self.create_selection_dialog(titoli_options, indici_options, voice_style)
            
                return self.chat_manager.get_log_history_string()
    
            except Exception as e:
                self.add_log(f"⚠️ Errore nell'analisi del contesto: {str(e)}")
                import traceback
                self.add_log(traceback.format_exc())
                return self.chat_manager.get_log_history_string()

                # Salvataggio nel database
                try:
                    # Estrai keyword dal contesto o dal titolo
                    keyword = None
                    
                    # Cerca la keyword nel testo
                    keyword_match = re.search(r'(?:keyword|parola chiave)[^:]*?:\s*([^\n]+)', full_text, re.IGNORECASE)
                    if keyword_match:
                        keyword = keyword_match.group(1).strip()
                    
                    # Se non trovata, usa il titolo della prima opzione
                    if not keyword and titoli_options:
                        keyword = titoli_options[0]['titolo'].split()[0]  # Prima parola del primo titolo
                    
                    # Se abbiamo una keyword, salva nel database
                    if keyword:
                        self.add_log(f"💾 Salvataggio analisi legacy nel database per keyword: {keyword}")
                        
                        if os.path.exists(self.crisp.project_db_path):
                            conn = sqlite3.connect(self.crisp.project_db_path)
                            cursor = conn.cursor()
                            
                            # Crea un nuovo progetto
                            current_date = datetime.now().isoformat()
                            cursor.execute(
                                "INSERT INTO projects (name, creation_date, last_updated) VALUES (?, ?, ?)",
                                (f"Legacy-{keyword}", current_date, current_date)
                            )
                            project_id = cursor.lastrowid
                            
                            # Salva la keyword
                            cursor.execute(
                                "INSERT INTO project_variables (project_id, name, value) VALUES (?, ?, ?)",
                                (project_id, "KEYWORD", keyword)
                            )
                            
                            # Salva le opzioni di titolo
                            if titoli_options:
                                title_json = json.dumps(titoli_options)
                                cursor.execute(
                                    "INSERT INTO project_variables (project_id, name, value) VALUES (?, ?, ?)",
                                    (project_id, "TITLE_OPTIONS", title_json)
                                )
                            
                            # Salva le opzioni di indice
                            if indici_options:
                                index_json = json.dumps(indici_options)
                                cursor.execute(
                                    "INSERT INTO project_variables (project_id, name, value) VALUES (?, ?, ?)",
                                    (project_id, "INDEX_OPTIONS", index_json)
                                )
                            
                            # Salva il tono di voce
                            if voice_style:
                                cursor.execute(
                                    "INSERT INTO project_variables (project_id, name, value) VALUES (?, ?, ?)",
                                    (project_id, "VOICE_STYLE", voice_style)
                                )
                            
                            # Salva il testo completo
                            cursor.execute(
                                "INSERT INTO project_results (project_id, prompt_id, created_at, data) VALUES (?, ?, ?, ?)",
                                (project_id, "ANALISI_LEGACY", current_date, full_text)
                            )
                            
                            conn.commit()
                            conn.close()
                            
                            self.add_log(f"✅ Analisi legacy salvata nel database (ID: {project_id})")
                    else:
                        self.add_log("⚠️ Impossibile salvare nel database: keyword non trovata")
                except Exception as db_error:
                    self.add_log(f"⚠️ Errore durante il salvataggio nel database: {str(db_error)}")
                    import traceback
                    self.add_log(traceback.format_exc())

        except Exception as e:
            error_msg = f"Errore durante il completamento dell'analisi: {str(e)}"
            self.add_log(error_msg)
            logging.error(error_msg)
            return self.chat_manager.get_log_history_string()

    def create_selection_dialog(self, titoli_options, indici_options, voice_style):
        """Crea una finestra di dialogo per selezionare titolo, indice e stile di voce"""
        import gradio as gr

        # Verifica che ci siano opzioni da mostrare
        if not titoli_options:
            titoli_options = [{"id": 1, "titolo": "Il tuo nuovo libro", "sottotitolo": "", "display": "Titolo predefinito"}]
        if not indici_options:
            indici_options = [{"id": 1, "content": "INTRODUZIONE\n\nCAPITOLO 1: Fondamenti\n\nCAPITOLO 2: Metodologia\n\nCAPITOLO 3: Applicazione\n\nCONCLUSIONE", "display": "Indice predefinito"}]

        # Creazione interfaccia di selezione
        with gr.Blocks(title="Selezione Opzioni") as selection_interface:
            with gr.Row():
                gr.Markdown("## Seleziona le opzioni per il tuo libro")
        
            # Titolo
            with gr.Row():
                with gr.Column(scale=3):
                    gr.Markdown("### Seleziona un titolo")
                    title_radio = gr.Radio(
                        choices=[t["display"] for t in titoli_options],
                        label="Titoli disponibili",
                        value=titoli_options[0]["display"] if titoli_options else None
                    )
            
                with gr.Column(scale=1):
                    gr.Markdown("### Anteprima")
                    title_preview = gr.Textbox(
                        label="Titolo selezionato",
                        value=titoli_options[0]["titolo"] if titoli_options else "",
                        interactive=False
                    )
                    subtitle_preview = gr.Textbox(
                        label="Sottotitolo",
                        value=titoli_options[0]["sottotitolo"] if titoli_options else "",
                        interactive=False
                    )
        
            # Indice
            with gr.Row():
                with gr.Column(scale=1):
                    gr.Markdown("### Seleziona un indice")
                    index_radio = gr.Radio(
                        choices=[idx["display"] for idx in indici_options],
                        label="Indici disponibili",
                        value=indici_options[0]["display"] if indici_options else None
                    )
            
                with gr.Column(scale=2):
                    gr.Markdown("### Anteprima indice")
                    index_preview = gr.TextArea(
                        label="Indice selezionato",
                        value=indici_options[0]["content"] if indici_options else "",
                        interactive=False,
                        lines=10
                    )
        
            # Stile di voce
            with gr.Row():
                voice_style_input = gr.Textbox(
                    label="Stile di voce",
                    value=voice_style,
                    interactive=True
                )
        
            # Pulsanti azione
            with gr.Row():
                confirm_btn = gr.Button("Conferma selezione", variant="primary")
                cancel_btn = gr.Button("Annulla", variant="secondary")
        
            # Funzioni di callback
            def update_title_preview(title_display):
                for t in titoli_options:
                    if t["display"] == title_display:
                        return t["titolo"], t["sottotitolo"]
                return "", ""
        
            def update_index_preview(index_display):
                for idx in indici_options:
                    if idx["display"] == index_display:
                        return idx["content"]
                return ""
        
            def confirm_selection(title_display, index_display, voice_style):
                # Trova il titolo selezionato
                selected_title = ""
                selected_subtitle = ""
                for t in titoli_options:
                    if t["display"] == title_display:
                        selected_title = t["titolo"]
                        selected_subtitle = t["sottotitolo"]
                        break
            
                # Trova l'indice selezionato
                selected_index = ""
                for idx in indici_options:
                    if idx["display"] == index_display:
                        selected_index = idx["content"]
                        break
            
                # Aggiorna i campi nella scheda di generazione del libro
                full_title = f"{selected_title}" + (f" - {selected_subtitle}" if selected_subtitle else "")
            
                # Aggiorna i campi dell'interfaccia principale
                if hasattr(self, 'book_title'):
                    self.book_title.update(value=full_title)
            
                if hasattr(self, 'book_index'):
                    self.book_index.update(value=selected_index)
            
                if hasattr(self, 'voice_style'):
                    self.voice_style.update(value=voice_style)
            
                self.add_log(f"✅ Selezione confermata: Titolo='{full_title}', Stile='{voice_style}'")
            
                # Chiudi la finestra di dialogo
                return gr.update(visible=False)
        
            def cancel_selection():
                # Usa i valori predefiniti
                default_title = titoli_options[0]["titolo"] + " - " + titoli_options[0]["sottotitolo"] if titoli_options else "Il tuo nuovo libro"
                default_index = indici_options[0]["content"] if indici_options else "INTRODUZIONE\n\nCAPITOLO 1: Fondamenti\n\nCAPITOLO 2: Metodologia\n\nCAPITOLO 3: Applicazione\n\nCONCLUSIONE"
            
                # Aggiorna i campi nella scheda di generazione del libro
                if hasattr(self, 'book_title'):
                    self.book_title.update(value=default_title)
            
                if hasattr(self, 'book_index'):
                    self.book_index.update(value=default_index)
            
                if hasattr(self, 'voice_style'):
                    self.voice_style.update(value=voice_style)
            
                self.add_log("⚠️ Selezione annullata, usati valori predefiniti")
            
                # Chiudi la finestra di dialogo
                return gr.update(visible=False)
        
            # Connessione dei callback
            title_radio.change(
                fn=update_title_preview,
                inputs=[title_radio],
                outputs=[title_preview, subtitle_preview]
            )
        
            index_radio.change(
                fn=update_index_preview,
                inputs=[index_radio],
                outputs=[index_preview]
            )
        
            confirm_btn.click(
                fn=confirm_selection,
                inputs=[title_radio, index_radio, voice_style_input],
                outputs=[selection_interface]
            )
        
            cancel_btn.click(
                fn=cancel_selection,
                outputs=[selection_interface]
            )
    
        # Lancia l'interfaccia in una nuova finestra
        selection_interface.launch(inbrowser=True, prevent_thread_lock=True)
        self.add_log("🔍 Finestra di selezione aperta. Scegli le opzioni desiderate.")

    def handle_selection_result(self, title_display, index_display, voice_style):
        """Gestisce il risultato della selezione dalla finestra di dialogo"""
        try:
            title_id = None
            index_id = None
        
            # Trova l'ID del titolo selezionato
            for t in self.temp_titles:
                if t["display"] == title_display:
                    title_id = t["id"]
                    break
        
            # Trova l'ID dell'indice selezionato
            for idx in self.temp_indices:
                if idx["display"] == index_display:
                    index_id = idx["id"]
                    break
        
            # Aggiorna i campi nella scheda di generazione del libro
            if title_id is not None:
                selected_title = next((t for t in self.temp_titles if t["id"] == title_id), None)
                if selected_title:
                    full_title = f"{selected_title['titolo']}" + (f" - {selected_title['sottotitolo']}" if selected_title['sottotitolo'] else "")
                    self.book_title.update(value=full_title)
        
            if index_id is not None:
                selected_index = next((idx for idx in self.temp_indices if idx["id"] == index_id), None)
                if selected_index:
                    self.book_index.update(value=selected_index["content"])
        
            # Aggiorna lo stile di voce
            self.voice_style.update(value=voice_style)
        
            self.add_log(f"✅ Selezione applicata alla scheda di generazione del libro")
            return True
        
        except Exception as e:
            self.add_log(f"❌ Errore nell'applicazione della selezione: {str(e)}")
            return False
    
    def _generate_book_crisp(self, book_title, book_language, voice_style, book_index):
        """
        Genera il libro usando il framework CRISP 5.0.
    
        Args:
            book_title: Titolo del libro
            book_language: Lingua del libro
            voice_style: Stile narrativo
            book_index: Indice del libro
        
        Returns:
            str: Log dell'operazione
        """
        try:
            if not book_title.strip():
                return self.add_log("Errore: Il titolo del libro è obbligatorio!")
            if not book_index.strip():
                return self.add_log("Errore: L'indice del libro è obbligatorio!")
        
            self.add_log(f"Avvio generazione libro CRISP 5.0: {book_title}")
        
            # Recupera l'ID del progetto CRISP corrente
            project_id = self.current_analysis.get('crisp_project_id')
            if not project_id:
                return self.add_log("Errore: Nessun progetto CRISP corrente trovato")
        
            # Recupera i dati completi del progetto
            project_data = self.crisp.get_project_data(project_id)
        
            # Aggiorna i dati del progetto con le informazioni correnti
            project_data.update({
                "TITOLO_LIBRO": book_title,
                "LINGUA_LIBRO": book_language,
                "VOICE_STYLE": voice_style,
                "INDICE_LIBRO": book_index
            })
        
            # Aggiorna i dati nel database CRISP
            self.crisp._save_result_to_db(
                project_id,
                "GEN1",
                f"Generazione libro: {book_title}",
                {
                    "TITOLO_LIBRO": book_title,
                    "LINGUA_LIBRO": book_language,
                    "VOICE_STYLE": voice_style,
                    "INDICE_LIBRO": book_index
                }
            )
        
            # Dividi l'indice in capitoli
            chapters = [line.strip() for line in book_index.split('\n') if line.strip()]
        
            # Filtra per mantenere solo le righe che sembrano capitoli
            chapter_pattern = re.compile(r'(CAPITOLO|CHAPTER|PARTE|PART|SEZIONE|SECTION)\s*\d*\s*[:\.\-–—]?\s*(.*)', re.IGNORECASE)
            filtered_chapters = []
        
            for line in chapters:
                match = chapter_pattern.match(line)
                if match:
                    chapter_title = match.group(2).strip()
                    if chapter_title:  # Assicurati che il titolo non sia vuoto
                        filtered_chapters.append(chapter_title)
                elif not any(keyword.lower() in line.lower() for keyword in ['introduzione', 'introduction', 'conclusione', 'conclusion']):
                    # Includi anche le righe che non contengono parole chiave specifiche
                    filtered_chapters.append(line)
        
            # Se non abbiamo trovato capitoli validi, usa le righe originali
            if not filtered_chapters:
                filtered_chapters = [line for line in chapters if line.strip()]
        
            # Prepara la risposta cumulativa
            book_content = []
        
            # Aggiungi introduzione se non è già nei capitoli
            has_intro = any('introduz' in chapter.lower() or 'introduct' in chapter.lower() for chapter in filtered_chapters)
            if not has_intro:
                book_content.append("# Introduzione\n\n[Introduzione del libro]")
        
            # Genera ciascun capitolo
            for i, chapter_title in enumerate(filtered_chapters):
                self.add_log(f"Generazione capitolo {i+1}/{len(filtered_chapters)}: {chapter_title}")
            
                # Prepara il prompt per il capitolo, sfruttando i dati CRISP
                chapter_prompt = f"""
                Scrivi il capitolo "{chapter_title}" per il libro "{book_title}" usando lo stile: {voice_style}.
            
                Il libro è posizionato come "{project_data.get('ANGOLO_ATTACCO', '')}" 
                e rivolto a {project_data.get('BUYER_PERSONA_SUMMARY', 'lettori interessati a questo argomento')}.
            
                L'idea centrale (Big Idea) del libro è: {project_data.get('BIG_IDEA', 'Non specificata')}
            
                I pilastri di contenuto principali sono:
                {project_data.get('CONTENT_PILLARS', 'Non specificati')}
            
                Il metodo proprietario presentato nel libro è:
                {project_data.get('PROPRIETARY_METHOD', 'Non specificato')}
            
                Il capitolo deve essere dettagliato, coinvolgente e allineato con gli obiettivi generali del libro.
                Lunghezza minima: 1500 parole.
            
                Includi:
                - Un'introduzione coinvolgente
                - Sezioni dettagliate sul tema
                - Esempi pratici e applicabili
                - Una conclusione che riassume i punti chiave
            
                Scrivi SOLO il contenuto del capitolo, senza includere "Capitolo X" o il titolo.
            
                Termina con la parola FINE quando il capitolo è completato.
                """
            
                # Invia il prompt a Genspark
                try:
                    # Ottieni input box
                    input_box = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper textarea"))
                    )
                
                    # Pulisci l'input box
                    input_box.clear()
                    time.sleep(0.5)
                
                    # Inserisci il testo
                    input_box.send_keys(chapter_prompt)
                    time.sleep(1)
                
                    # Trova e clicca il pulsante di invio
                    send_button = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon"))
                    )
                    send_button.click()
                
                    # Attendi risposta
                    self.add_log("⏳ Attesa risposta per il capitolo...")
                
                    # Verifica completamento risposta
                    last_length = 0
                    stable_count = 0
                    max_stable_counts = 2
                    chapter_content = None
                
                    for attempt in range(60):  # Max 10 minuti (60 * 10 secondi)
                        time.sleep(10)
                        response = self.get_last_response()
                    
                        if response:
                            current_length = len(response)
                        
                            if current_length == last_length:
                                stable_count += 1
                                if stable_count >= max_stable_counts:
                                    # Risposta stabile
                                    chapter_content = response
                                    break
                            else:
                                stable_count = 0
                                last_length = current_length
                
                    if not chapter_content:
                        raise Exception(f"Timeout in attesa della risposta per il capitolo {chapter_title}")
                
                    # Rimuovi la parola FINE se presente
                    if "FINE" in chapter_content:
                        chapter_content = chapter_content[:chapter_content.find("FINE")].strip()
                
                    # Aggiungi il titolo e il contenuto al libro
                    formatted_chapter = f"# {chapter_title}\n\n{chapter_content}"
                    book_content.append(formatted_chapter)
                
                    # Salva il capitolo nel database CRISP
                    self.crisp._save_result_to_db(
                        project_id,
                        f"CAP{i+1}",
                        formatted_chapter,
                        {"chapter_title": chapter_title}
                    )
                
                    self.add_log(f"✅ Capitolo {i+1} completato: {chapter_title}")
                
                    # Gestisci il reset del contesto se necessario
                    if attempt % 2 == 0:  # Ogni 2 capitoli
                        self.handle_context_limit()
            
                except Exception as e:
                    error_msg = f"Errore durante la generazione del capitolo {chapter_title}: {str(e)}"
                    self.add_log(error_msg)
                    logging.error(error_msg)
                    book_content.append(f"# {chapter_title}\n\nErrore durante la generazione di questo capitolo: {str(e)}")
            
                # Breve pausa tra i capitoli
                time.sleep(5)
        
            # Aggiungi conclusione se non è già nei capitoli
            has_conclusion = any('conclus' in chapter.lower() or 'conclusion' in chapter.lower() for chapter in filtered_chapters)
            if not has_conclusion:
                book_content.append("# Conclusione\n\n[Conclusione del libro]")
        
            # Unisci tutti i capitoli
            complete_book = "\n\n".join(book_content)
        
            # Salva il libro in un file
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            book_filename = f"book_{timestamp}.md"
            with open(book_filename, "w", encoding="utf-8") as f:
                f.write(complete_book)
        
            # Salva anche nel database CRISP
            self.crisp._save_result_to_db(
                project_id,
                "COMPLETE_BOOK",
                complete_book,
                {
                    "title": book_title,
                    "language": book_language,
                    "style": voice_style,
                    "chapters": len(filtered_chapters),
                    "filename": book_filename
                }
            )
        
            self.add_log(f"📚 Libro generato e salvato come: {book_filename}")
            return self.chat_manager.get_log_history_string()
        
        except Exception as e:
            error_msg = f"Errore durante la generazione del libro CRISP 5.0: {str(e)}"
            self.add_log(error_msg)
            logging.error(error_msg)
            return self.chat_manager.get_log_history_string()
    
    def _generate_book_legacy(self, book_title, book_language, voice_style, book_index):
        """Metodo legacy per generare il libro"""
        try:
            if not book_title.strip():
                return self.add_log("Errore: Il titolo del libro è obbligatorio!")
            if not book_index.strip():
                return self.add_log("Errore: L'indice del libro è obbligatorio!")
            
            self.add_log(f"Generazione libro: {book_title}")
            # Qui andrà il codice per la generazione del libro legacy
            # Poiché non era fornito nell'originale, lasciamo un placeholder
            self.add_log("✅ Libro generato")
            return self.chat_manager.get_log_history_string()
            
        except Exception as e:
            error_msg = f"Errore durante la generazione del libro: {str(e)}"
            self.add_log(error_msg)
            logging.error(error_msg)
            return self.chat_manager.get_log_history_string()
    
    def split_prompt(self, text, prompt_id=None, section_number=None):
        """
        Divide il prompt in sezioni numeriche mantenendo l'integrità.
        Aggiunto tracciamento della posizione nel flusso.
        """
        # Log della posizione corrente
        location = f"Prompt {section_number if section_number else 'unknown'} di {prompt_id if prompt_id else 'unknown'}"
        self.add_log(f"DEBUG_LOCATION: Analisi in {location}")

        # Prima pulizia: rimuovi eventuali risposte precedenti
        if "PROMPT ------" in text:
            text = text.split("PROMPT ------")[1].split("------ END PROMPT")[0].strip()
            self.add_log(f"DEBUG_CLEAN: Estratto contenuto prompt pulito in {location}")

        sections = []
        # Usa regex per trovare sezioni che iniziano con numero e punto
        section_matches = re.finditer(r'(?:^|\n)\s*(\d+)\.\s+(.*?)(?=(?:\n\s*\d+\.|$))', text, re.DOTALL)
    
        for match in section_matches:
            section_num = match.group(1)
            section_content = match.group(2).strip()
            if section_content:
                sections.append(f"{section_num}. {section_content}")
                self.add_log(f"DEBUG_SECTION: Trovata sezione {section_num} in {location}")
                self.add_log(f"DEBUG_CONTENT: Primi 100 caratteri: {section_content[:100]}...")
    
        # Se non trova sezioni numerate, restituisci il testo intero
        if not sections:
            self.add_log(f"DEBUG_WARNING: Nessuna sezione numerata trovata in {location}")
            return [text]
        
        self.add_log(f"DEBUG_SUMMARY: Trovate {len(sections)} sezioni numerate valide in {location}")
    
        # Verifica contenuto per possibili errori
        for i, section in enumerate(sections):
            if "BSR medio" in section or "Competitività:" in section:
                self.add_log(f"DEBUG_ERROR: Possibile contenuto di risposta trovato nella sezione {i+1} di {location}")
                self.add_log(f"DEBUG_CONTENT_ERROR: {section[:200]}...")
    
        return sections

    def send_to_genspark(self, text, prompt_id=None, section_number=None):
        """
        Invia un messaggio a Genspark e attende la risposta.
        Versione completamente rivista per garantire stabilità e affidabilità,
        con aggiornamento dell'interfaccia utente integrato.
        """
        self.cooldown_manager.track_request()

        # Log iniziale con posizione nel flusso
        location = self.log_prompt_location(
            prompt_id or "unknown",
            section_number or "unknown",
            f"Invio testo ({len(text)} caratteri)"
        )

        # Log di debug per tracciare l'esecuzione
        print(f"DEBUG: send_to_genspark chiamato - prompt_id: {prompt_id}, section_number: {section_number}")
        print(f"DEBUG: Lunghezza testo da inviare: {len(text)} caratteri")
        print(f"DEBUG: Anteprima testo: {text[:150].replace(chr(10), ' ')}...")

        # Funzione helper interna per aggiornare UI e restituire la risposta
        def update_ui_and_return(response, success=True, message=None):
            """Helper interno per aggiornare UI e tornare la risposta"""
            # Debug della risposta
            if response:
                print(f"DEBUG: Salvataggio risposta - Lunghezza: {len(response)}")
                print(f"DEBUG: Preview risposta: {response[:200].replace(chr(10), ' ')}...")
            
                # Controlla se la risposta contiene FINE o FINE_RISPOSTA
                has_end = "FINE_RISPOSTA" in response or "FINE" in response
                print(f"DEBUG: Risposta contiene terminatore: {has_end}")
            
                # Se la risposta è completa, salvala nel file di contesto
                if hasattr(self, 'chat_manager'):
                    print(f"DEBUG: Chiamata a chat_manager.save_response per {location}")
                    metadata = {
                        "prompt_id": prompt_id,
                        "section_number": section_number,
                        "timestamp": datetime.now().strftime('%Y%m%d_%H%M%S'),
                        "has_terminator": has_end
                    }
                    # Verifica se il file di contesto esiste prima di salvare
                    context_file = getattr(self.chat_manager, 'context_file', 'context.txt')
                    print(f"DEBUG: Verifica file context.txt - Esiste: {os.path.exists(context_file)}")
                
                    # Salva la risposta
                    try:
                        self.chat_manager.save_response(response, f"Prompt {prompt_id}-{section_number}", metadata)
                        print(f"DEBUG: Risposta salvata con successo in {context_file}")
                    except Exception as save_error:
                        print(f"DEBUG: ERRORE durante il salvataggio della risposta: {str(save_error)}")
                        import traceback
                        print(f"DEBUG: Traceback salvataggio:\n{traceback.format_exc()}")
            else:
                print("DEBUG: Risposta vuota o None")
            
            if hasattr(self, 'results_display') and response:
                try:
                    # Per risposte brevi o in caso di errore, formattazione semplice
                    if len(response) < 2000 or not success:
                        status_class = "bg-green-50 border-green-500" if success else "bg-red-50 border-red-500"
                        status_text = "Risposta completata" if success else f"Errore: {message or 'Vedi dettagli nel log'}"
                
                        html_response = f"""
                        <div class="{status_class} border-l-4 p-3 mb-3 rounded">
                            <div class="flex justify-between">
                                <div><strong>{status_text}</strong></div>
                                <div>{len(response)} caratteri</div>
                            </div>
                        </div>
                        <div class="results-content p-4 bg-white rounded-lg border border-gray-200">
                            <pre style="white-space: pre-wrap; font-family: monospace;">{response}</pre>
                        </div>
                        """
                    else:
                        # Per risposte lunghe, mostra anteprima e aggiungi opzione per vedere tutto
                        preview = response[:1000] + "..." 
                        html_response = f"""
                        <div class="bg-green-50 border-l-4 border-green-500 p-3 mb-3 rounded">
                            <div class="flex justify-between">
                                <div><strong>Risposta completata</strong></div>
                                <div>{len(response)} caratteri</div>
                            </div>
                        </div>
                        <div class="results-preview p-4 bg-white rounded-lg border border-gray-200">
                            <pre style="white-space: pre-wrap; font-family: monospace; max-height: 300px; overflow-y: auto;">{preview}</pre>
                            <div class="mt-2 text-center">
                                <em class="text-gray-500">Risposta completa salvata - Clicca "Completa Analisi" per vedere i risultati formattati</em>
                            </div>
                        </div>
                        """
            
                    self.results_display.update(value=html_response)
                    self.add_log(f"✅ Interfaccia aggiornata con risposta di {len(response)} caratteri")
                    print(f"DEBUG: UI aggiornata con risposta di {len(response)} caratteri")
                except Exception as ui_error:
                    self.add_log(f"❌ Errore nell'aggiornamento dell'interfaccia: {str(ui_error)}")
                    print(f"DEBUG: Errore nell'aggiornamento UI: {str(ui_error)}")
    
            return response

        # Log iniziale con stack trace per debugging
        import traceback
        call_stack = traceback.format_stack()
        stack_info = "\n".join(call_stack[-5:])

        self.add_log(f"🔍 [{location}] Inizio invio prompt")
        self.add_log(f"🔍 Inizio invio prompt ({len(text)} caratteri) in {location}")

        # Verifica che il browser sia attivo
        if not hasattr(self, 'driver') or self.driver is None:
            self.add_log("⚠️ Browser non attivo, inizializzazione...")
            self.driver = setup_browser()
            self.driver.get("https://genspark.ai")
            time.sleep(10)  # Attesa più lunga per l'inizializzazione
    
            # Verifica login solo alla prima apertura
            if not check_login(self.driver):
                self.add_log("⚠️ Login necessario")
                return update_ui_and_return("ERRORE: Login necessario", success=False, message="Login necessario")

        # Verifica URL corrente solo se non siamo già in una chat
        current_url = self.driver.current_url
        if "genspark.ai" not in current_url and "/agents" not in current_url and "/chat" not in current_url:
            self.add_log("🔄 Navigazione a Genspark necessaria...")
            self.driver.get("https://genspark.ai")
            time.sleep(10)

        # Usa il nuovo metodo di divisione del prompt
        sections = self.split_prompt(text)

        # DEBUG AGGIUNTIVO - INIZIO
        sections_count = len(sections)
        self.add_log(f"📋 Prompt diviso in {sections_count} sezioni numerate")
        print(f"DEBUG: Prompt diviso in {sections_count} sezioni")
        for i, section in enumerate(sections):
            self.add_log(f"📄 Sezione {i+1}: {section[:50]}..." + ("" if len(section) <= 50 else f" ({len(section)} caratteri)"))
            print(f"DEBUG: Sezione {i+1}: {section[:50].replace(chr(10), ' ')}...")

        # Prendi solo la prima sezione per l'invio corrente
        section_to_send = sections[0] if sections else text

        # Verifica che il browser sia attivo
        if not hasattr(self, 'driver') or self.driver is None:
            self.add_log("⚠️ Browser non attivo, inizializzazione...")
            self.driver = setup_browser()
            self.driver.get("https://genspark.ai")
            time.sleep(10)  # Attesa più lunga per l'inizializzazione

        try:
            # Verifico URL corrente per debugging
            current_url = self.driver.current_url
            self.add_log(f"🌐 URL corrente: {current_url}")
            print(f"DEBUG: URL corrente: {current_url}")

            # Se non siamo in una pagina di chat, naviga a Genspark
            if "genspark.ai" not in current_url:
                self.add_log("🔄 Navigazione a Genspark...")
                self.driver.get("https://genspark.ai")
                time.sleep(10)

            # Massimo 3 tentativi di invio
            max_attempts = 3

            for attempt in range(max_attempts):
                self.add_log(f"🔄 Tentativo {attempt+1}/{max_attempts}")
                print(f"DEBUG: Tentativo di invio {attempt+1}/{max_attempts}")

                try:
                    # 1. PREPARAZIONE: Verifica e pulisci la textarea
                    self.add_log("🧹 Inizio pulizia dell'area di input...")
                    print("DEBUG: Pulizia area input...")
    
                    # Attendi che l'input box sia disponibile con timeout lungo
                    input_box = WebDriverWait(self.driver, 20).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper textarea"))
                    )
                    print("DEBUG: Input box trovato")
    
                    # Pulizia in più passaggi (metodo intensivo)
                    input_box.clear()
                    time.sleep(1)
    
                    # Ctrl+A e Delete
                    input_box.send_keys(Keys.CONTROL + "a")
                    time.sleep(0.5)
                    input_box.send_keys(Keys.DELETE)
                    time.sleep(1)
    
                    # Verifica finale con correzione manuale se necessario
                    current_text = input_box.get_attribute("value")
                    if current_text:
                        self.add_log(f"⚠️ Testo residuo: '{current_text}' - pulizia manuale")
                        print(f"DEBUG: Testo residuo dopo pulizia: '{current_text}'")
                        # Metodo manuale: eliminazione carattere per carattere
                        for _ in range(len(current_text) + 5):  # +5 per sicurezza
                            input_box.send_keys(Keys.BACK_SPACE)
                            time.sleep(0.05)
    
                    # Verifica finale
                    final_check = input_box.get_attribute("value")
                    if final_check:
                        self.add_log(f"⚠️ Impossibile pulire completamente: '{final_check}'")
                        print(f"DEBUG: Impossibile pulire completamente: '{final_check}'")
                    else:
                        self.add_log("✅ Area di input completamente pulita")
                        print("DEBUG: Area input pulita con successo")
    
                    # 2. INSERIMENTO TESTO: Carattere per carattere per alta affidabilità
                    self.add_log(f"📝 Inserimento testo carattere per carattere...")
                    print(f"DEBUG: Inserimento testo ({len(section_to_send)} caratteri)...")
    
                    # Metodo 1: Per blocchi di 1-2 caratteri (più lento ma più affidabile)
                    block_size = 2  # Numero di caratteri per blocco
                    for i in range(0, len(section_to_send), block_size):
                        block = section_to_send[i:i+block_size]
                        input_box.send_keys(block)
                        time.sleep(0.01)  # Pausa minima tra blocchi
    
                    # Verifica inserimento
                    time.sleep(2)
                    inserted_text = input_box.get_attribute("value")
                    if not inserted_text:
                        self.add_log("❌ Nessun testo inserito!")
                        print("DEBUG: ERRORE - Nessun testo inserito!")
                        if attempt < max_attempts - 1:
                            continue
                    elif len(inserted_text) < len(section_to_send) * 0.9:
                        self.add_log(f"⚠️ Testo inserito parzialmente: {len(inserted_text)}/{len(section_to_send)} caratteri")
                        print(f"DEBUG: Testo inserito parzialmente: {len(inserted_text)}/{len(section_to_send)} caratteri")
                        if attempt < max_attempts - 1:
                            continue
                    else:
                        self.add_log(f"✅ Testo inserito correttamente: {len(inserted_text)} caratteri")
                        print(f"DEBUG: Testo inserito correttamente: {len(inserted_text)} caratteri")
    
                    # 3. INVIO: Click sul pulsante con metodi multipli
                    self.add_log("🔘 Click sul pulsante di invio...")
                    print("DEBUG: Tentativo click pulsante invio...")
    
                    # Attesa più lunga per il pulsante di invio
                    send_button = WebDriverWait(self.driver, 15).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon"))
                    )
    
                    # Prova entrambi i metodi per maggiore affidabilità
                    try:
                        # Metodo 1: Click standard
                        send_button.click()
                        self.add_log("✅ Click standard eseguito")
                        print("DEBUG: Click standard eseguito")
                    except Exception as click_error:
                        self.add_log(f"⚠️ Errore click standard: {str(click_error)}")
                        print(f"DEBUG: Errore click standard: {str(click_error)}")
        
                        # Metodo 2: Click JavaScript
                        try:
                            self.driver.execute_script("arguments[0].click();", send_button)
                            self.add_log("✅ Click JavaScript eseguito")
                            print("DEBUG: Click JavaScript eseguito")
                        except Exception as js_error:
                            self.add_log(f"❌ Anche click JavaScript fallito: {str(js_error)}")
                            print(f"DEBUG: Anche click JavaScript fallito: {str(js_error)}")
            
                            # Metodo 3: Invio tramite tasto Enter
                            try:
                                input_box.send_keys(Keys.RETURN)
                                self.add_log("✅ Invio tramite tasto Enter")
                                print("DEBUG: Invio tramite tasto Enter")
                            except Exception as enter_error:
                                self.add_log(f"❌ Tutti i metodi di invio falliti: {str(enter_error)}")
                                print(f"DEBUG: Tutti i metodi di invio falliti: {str(enter_error)}")
                                raise Exception("Impossibile inviare il messaggio con nessun metodo")
    
                    # 4. ATTESA RISPOSTA: Sistema di monitoraggio progressivo
                    self.add_log("⏳ Attesa iniziale per la risposta (10 secondi)")
                    print("DEBUG: Attesa iniziale per la risposta (10 secondi)")
                    time.sleep(10)  # Attesa iniziale più lunga
    
                    # Verifica che la richiesta non sia stata annullata immediatamente
                    try:
                        error_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'abortita') or contains(text(), 'aborted')]")
                        if error_elements:
                            self.add_log("❌ Richiesta abortita rilevata immediatamente")
                            print("DEBUG: Richiesta abortita rilevata immediatamente")
                            if attempt < max_attempts - 1:
                                time.sleep(10)  # Pausa più lunga prima di riprovare
                                continue
                            else:
                                return update_ui_and_return("ERRORE: Richiesta abortita ripetutamente", success=False, message="Richiesta abortita ripetutamente")
                    except Exception:
                        pass  # Ignora errori nella ricerca di messaggi di errore
    
                    # Ciclo di attesa principale
                    response_complete = False
                    last_length = 0
                    stable_count = 0
                    timeout_cycles = 45  # ~15 minuti totali al massimo (20s per ciclo)
                    message_count = 0
    
                    for cycle in range(timeout_cycles):
                        # Debug del ciclo di attesa
                        print(f"DEBUG: Ciclo di attesa {cycle+1}/{timeout_cycles}")
                    
                        # Cerca di ottenere la risposta con metodi multipli
                        response = None
        
                        # 1. Metodo principale: CSS Selector specifico
                        try:
                            selectors = [
                                ".message-content", 
                                "div.chat-wrapper div.desc > div > div > div",
                                "div.message div.text-wrap",
                                ".chat-message-item .content"
                            ]
            
                            for selector in selectors:
                                try:
                                    messages = self.driver.find_elements(By.CSS_SELECTOR, selector)
                                    if messages and len(messages) > 0:
                                        # Controlla se c'è un nuovo messaggio o un cambio nel conteggio
                                        if len(messages) > message_count:
                                            message_count = len(messages)
                                            self.add_log(f"📩 Nuovo messaggio rilevato: totale {message_count}")
                                            print(f"DEBUG: Nuovo messaggio rilevato: totale {message_count}")
                        
                                        # Usa l'ultimo messaggio
                                        last_message = messages[-1]
                                        response = last_message.text.strip()
                                        if response:
                                            print(f"DEBUG: Risposta trovata con selettore '{selector}': {len(response)} caratteri")
                                        break
                                except Exception:
                                    continue
                        except Exception as e:
                            self.add_log(f"⚠️ Errore nel recupero risposta: {str(e)}")
                            print(f"DEBUG: Errore nel recupero risposta: {str(e)}")
        
                        # 2. Metodo alternativo: JavaScript diretto
                        if not response:
                            try:
                                js_response = self.driver.execute_script("""
                                    var messages = document.querySelectorAll('.message-content, .chat-message-item, .chat-wrapper .desc');
                                    if (messages && messages.length > 0) {
                                        return messages[messages.length - 1].textContent;
                                    }
                                    return null;
                                """)
                
                                if js_response:
                                    response = js_response.strip()
                                    self.add_log(f"📩 Risposta recuperata via JavaScript: {len(response)} caratteri")
                                    print(f"DEBUG: Risposta recuperata via JavaScript: {len(response)} caratteri")
                            except Exception:
                                pass
        
                        # Se abbiamo ottenuto una risposta, analizzala
                        if response:
                            current_length = len(response)
                        
                            # Debug periodico della risposta in crescita
                            if cycle % 5 == 0:  # Ogni 5 cicli
                                preview = response[:150].replace('\n', ' ')
                                print(f"DEBUG: Risposta in corso - {current_length} caratteri - Preview: {preview}...")
            
                            # Controlla gli errori tipici nella risposta
                            error_indicators = ["richiesta abortita", "request aborted", "troppo lungo", "too long", 
                                               "errore durante", "error during", "riprova più tardi", "try again later"]
            
                            if any(indicator in response.lower() for indicator in error_indicators):
                                self.add_log(f"❌ Errore rilevato nella risposta: {response[:100]}...")
                                print(f"DEBUG: Errore rilevato nella risposta: {response[:100]}...")
                                if attempt < max_attempts - 1:
                                    time.sleep(10)
                                    break  # Esci dal ciclo e riprova l'invio
                                else:
                                    error_msg = f"ERRORE: {response[:200]}"
                                    return update_ui_and_return(error_msg, success=False, message="Errore rilevato nella risposta")
            
                            # Controlla i terminatori espliciti
                            if "FINE_RISPOSTA" in response or "FINE" in response:
                                self.add_log(f"✅ Terminatore esplicito trovato dopo {cycle+1} cicli")
                                print(f"DEBUG: Terminatore esplicito trovato dopo {cycle+1} cicli")
                                terminator = "FINE_RISPOSTA" if "FINE_RISPOSTA" in response else "FINE"
                                terminator_pos = response.find(terminator)
                                print(f"DEBUG: Terminatore '{terminator}' trovato alla posizione {terminator_pos}")
                
                                # Pulisci la risposta rimuovendo il terminatore
                                if "FINE_RISPOSTA" in response:
                                    response = response.split("FINE_RISPOSTA")[0].strip()
                                elif "FINE" in response:
                                    response = response.split("FINE")[0].strip()
                    
                                return update_ui_and_return(response)
            
                            # Verifica stabilità della lunghezza
                            if current_length == last_length:
                                stable_count += 1
                                self.add_log(f"⏳ Risposta stabile: {stable_count}/5 cicli ({current_length} caratteri)")
                                print(f"DEBUG: Risposta stabile: {stable_count}/5 cicli ({current_length} caratteri)")
                
                                if stable_count >= 5:  # 5 cicli di stabilità = risposta completa
                                    self.add_log(f"✅ Risposta stabilizzata dopo {cycle+1} cicli")
                                    print(f"DEBUG: Risposta stabilizzata dopo {cycle+1} cicli")
                                    return update_ui_and_return(response)
                            else:
                                stable_count = 0
                                self.add_log(f"📝 Risposta in evoluzione: {current_length} caratteri (ciclo {cycle+1})")
                                print(f"DEBUG: Risposta in evoluzione: {current_length} caratteri (ciclo {cycle+1})")
                                last_length = current_length
                        else:
                            self.add_log(f"⚠️ Nessuna risposta rilevabile al ciclo {cycle+1}")
                            print(f"DEBUG: Nessuna risposta rilevabile al ciclo {cycle+1}")
        
                        # Controlla se abbiamo raggiunto un limite di contesto
                        if cycle % 3 == 0:  # Ogni 3 cicli
                            if self.handle_context_limit():
                                self.add_log("♻️ Limite di contesto rilevato, nuovo tentativo...")
                                print("DEBUG: Limite di contesto rilevato, nuovo tentativo...")
                                return self.send_to_genspark(section_to_send)
        
                        # Attendi prima del prossimo ciclo
                        time.sleep(20)  # 20 secondi tra i cicli
    
                    # Se siamo qui, il timeout è scaduto
                    if response:
                        self.add_log(f"⚠️ Timeout ma risposta parziale disponibile: {len(response)} caratteri")
                        print(f"DEBUG: Timeout ma risposta parziale disponibile: {len(response)} caratteri")
                        print(f"DEBUG: Salvataggio risposta parziale - Lunghezza: {len(response)}")
                        print(f"DEBUG: Preview risposta parziale: {response[:200].replace(chr(10), ' ')}...")
                        return update_ui_and_return(response, message="Timeout, risposta parziale")
                    else:
                        self.add_log("❌ Timeout senza risposta")
                        print("DEBUG: Timeout senza risposta")
        
                        if attempt < max_attempts - 1:
                            retry_delay = 15 * (attempt + 1)  # Aumenta il ritardo ad ogni tentativo
                            self.add_log(f"🔄 Tentativo {attempt+2} dopo timeout - attesa {retry_delay} secondi")
                            print(f"DEBUG: Tentativo {attempt+2} dopo timeout - attesa {retry_delay} secondi")
                            time.sleep(retry_delay)
                        else:
                            error_msg = "TIMEOUT: Nessuna risposta ricevuta dopo ripetuti tentativi"
                            return update_ui_and_return(error_msg, success=False, message="Timeout senza risposta")
    
                except Exception as e:
                    # Gestione errori specifici per sezione
                    self.add_log(f"⚠️ Errore sezione, tentativo {attempt+1}: {str(e)}")
                    print(f"DEBUG: Errore sezione, tentativo {attempt+1}: {str(e)}")
                
                    # Cattura screenshot per debug
                    try:
                        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                        screenshot_path = f"error_section_try_{attempt+1}_{timestamp}.png"
                        self.driver.save_screenshot(screenshot_path)
                        self.add_log(f"📸 Screenshot: {screenshot_path}")
                        print(f"DEBUG: Screenshot errore: {screenshot_path}")
                    except Exception:
                        pass
                
                    if attempt < max_attempts - 1:
                        attempt_delay = 15 * (attempt + 1)
                        print(f"DEBUG: Attesa {attempt_delay}s prima del prossimo tentativo...")
                        time.sleep(attempt_delay)
                    else:
                        self.add_log("❌ Tutti i tentativi falliti")
                        print("DEBUG: Tutti i tentativi falliti")
                        error_msg = f"ERRORE: {str(e)}"
                        return update_ui_and_return(error_msg, success=False, message=str(e))

            # Se arriviamo qui, tutti i tentativi sono falliti
            error_msg = "ERRORE: Tutti i tentativi falliti con errori diversi"
            print("DEBUG: Tutti i tentativi falliti con errori diversi")
            return update_ui_and_return(error_msg, success=False, message="Errori multipli")

        except Exception as e:
            # Errore globale
            error_message = f"ERRORE CRITICO: {str(e)}"
            self.add_log(f"❌ {error_message}")
            print(f"DEBUG: ERRORE CRITICO: {str(e)}")
        
            import traceback
            error_trace = traceback.format_exc()
            print(f"DEBUG: Traceback completo:\n{error_trace}")

            # Cattura screenshot finale
            try:
                screenshot_path = f"critical_error_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                self.driver.save_screenshot(screenshot_path)
                self.add_log(f"📸 Screenshot errore critico: {screenshot_path}")
                print(f"DEBUG: Screenshot errore critico: {screenshot_path}")
            except Exception:
                pass
    
            return update_ui_and_return(error_message, success=False, message=str(e))

        # Log iniziale con stack trace per debugging
        import traceback
        call_stack = traceback.format_stack()
        stack_info = "\n".join(call_stack[-5:])

        self.add_log(f"🔍 [{location}] Inizio invio prompt")
        self.add_log(f"🔍 Inizio invio prompt ({len(text)} caratteri) in {location}")

        # Verifica che il browser sia attivo
        if not hasattr(self, 'driver') or self.driver is None:
            self.add_log("⚠️ Browser non attivo, inizializzazione...")
            self.driver = setup_browser()
            self.driver.get("https://genspark.ai")
            time.sleep(10)  # Attesa più lunga per l'inizializzazione
    
            # Verifica login solo alla prima apertura
            if not check_login(self.driver):
                self.add_log("⚠️ Login necessario")
                return update_ui_and_return("ERRORE: Login necessario", success=False, message="Login necessario")

        # Verifica URL corrente solo se non siamo già in una chat
        current_url = self.driver.current_url
        if "genspark.ai" not in current_url and "/agents" not in current_url and "/chat" not in current_url:
            self.add_log("🔄 Navigazione a Genspark necessaria...")
            self.driver.get("https://genspark.ai")
            time.sleep(10)

        # Usa il nuovo metodo di divisione del prompt
        sections = self.split_prompt(text)

        # DEBUG AGGIUNTIVO - INIZIO
        sections_count = len(sections)
        self.add_log(f"DEBUG_DECISIVO: Testo diviso in {sections_count} sezioni")
        for i, section in enumerate(sections):
            self.add_log(f"DEBUG_DECISIVO: Sezione {i+1} inizia con: {section[:50]}...")

        # Prendi solo la prima sezione per l'invio corrente
        section_to_send = sections[0] if sections else text

        # DEBUG AGGIUNTIVO - FINE
        print(f"DEBUG_DECISIVO: Testo originale contiene {sections_count} sezioni numerate")
        print(f"DEBUG_DECISIVO: Sezioni presenti: 1.={'1.' in text}, 2.={'2.' in text}, 3.={'3.' in text}, 4.={'4.' in text}, 5.={'5.' in text}")
        print(f"DEBUG_DECISIVO: Invio sezione: {section_to_send[:200]}...")

        # Verifica che il browser sia attivo
        if not hasattr(self, 'driver') or self.driver is None:
            self.add_log("⚠️ Browser non attivo, inizializzazione...")
            self.driver = setup_browser()
            self.driver.get("https://genspark.ai")
            time.sleep(10)  # Attesa più lunga per l'inizializzazione

        try:
            # Verifico URL corrente per debugging
            current_url = self.driver.current_url
            self.add_log(f"🌐 URL corrente: {current_url}")

            # Se non siamo in una pagina di chat, naviga a Genspark
            if "genspark.ai" not in current_url:
                self.add_log("🔄 Navigazione a Genspark...")
                self.driver.get("https://genspark.ai")
                time.sleep(10)

            # Massimo 3 tentativi di invio
            max_attempts = 3

            for attempt in range(max_attempts):
                self.add_log(f"🔄 Tentativo {attempt+1}/{max_attempts}")
    
                try:
                    # 1. PREPARAZIONE: Verifica e pulisci la textarea
                    self.add_log("🧹 Inizio pulizia dell'area di input...")
        
                    # Attendi che l'input box sia disponibile con timeout lungo
                    input_box = WebDriverWait(self.driver, 20).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper textarea"))
                    )
        
                    # Pulizia in più passaggi (metodo intensivo)
                    input_box.clear()
                    time.sleep(1)
        
                    # Ctrl+A e Delete
                    input_box.send_keys(Keys.CONTROL + "a")
                    time.sleep(0.5)
                    input_box.send_keys(Keys.DELETE)
                    time.sleep(1)
        
                    # Verifica finale con correzione manuale se necessario
                    current_text = input_box.get_attribute("value")
                    if current_text:
                        self.add_log(f"⚠️ Testo residuo: '{current_text}' - pulizia manuale")
                        # Metodo manuale: eliminazione carattere per carattere
                        for _ in range(len(current_text) + 5):  # +5 per sicurezza
                            input_box.send_keys(Keys.BACK_SPACE)
                            time.sleep(0.05)
        
                    # Verifica finale
                    final_check = input_box.get_attribute("value")
                    if final_check:
                        self.add_log(f"⚠️ Impossibile pulire completamente: '{final_check}'")
                    else:
                        self.add_log("✅ Area di input completamente pulita")
        
                    # 2. INSERIMENTO TESTO: Carattere per carattere per alta affidabilità
                    self.add_log(f"📝 Inserimento testo carattere per carattere...")
        
                    # Metodo 1: Per blocchi di 1-2 caratteri (più lento ma più affidabile)
                    block_size = 2  # Numero di caratteri per blocco
                    for i in range(0, len(section_to_send), block_size):
                        block = section_to_send[i:i+block_size]
                        input_box.send_keys(block)
                        time.sleep(0.01)  # Pausa minima tra blocchi
        
                    # Verifica inserimento
                    time.sleep(2)
                    inserted_text = input_box.get_attribute("value")
                    if not inserted_text:
                        self.add_log("❌ Nessun testo inserito!")
                        if attempt < max_attempts - 1:
                            continue
                    elif len(inserted_text) < len(section_to_send) * 0.9:
                        self.add_log(f"⚠️ Testo inserito parzialmente: {len(inserted_text)}/{len(section_to_send)} caratteri")
                        if attempt < max_attempts - 1:
                            continue
                    else:
                        self.add_log(f"✅ Testo inserito correttamente: {len(inserted_text)} caratteri")
        
                    # 3. INVIO: Click sul pulsante con metodi multipli
                    self.add_log("🔘 Click sul pulsante di invio...")
        
                    # Attesa più lunga per il pulsante di invio
                    send_button = WebDriverWait(self.driver, 15).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper div.input-icon"))
                    )
        
                    # Prova entrambi i metodi per maggiore affidabilità
                    try:
                        # Metodo 1: Click standard
                        send_button.click()
                        self.add_log("✅ Click standard eseguito")
                    except Exception as click_error:
                        self.add_log(f"⚠️ Errore click standard: {str(click_error)}")
            
                        # Metodo 2: Click JavaScript
                        try:
                            self.driver.execute_script("arguments[0].click();", send_button)
                            self.add_log("✅ Click JavaScript eseguito")
                        except Exception as js_error:
                            self.add_log(f"❌ Anche click JavaScript fallito: {str(js_error)}")
                
                            # Metodo 3: Invio tramite tasto Enter
                            try:
                                input_box.send_keys(Keys.RETURN)
                                self.add_log("✅ Invio tramite tasto Enter")
                            except Exception as enter_error:
                                self.add_log(f"❌ Tutti i metodi di invio falliti: {str(enter_error)}")
                                raise Exception("Impossibile inviare il messaggio con nessun metodo")
        
                    # 4. ATTESA RISPOSTA: Sistema di monitoraggio progressivo
                    self.add_log("⏳ Attesa iniziale per la risposta (10 secondi)")
                    time.sleep(10)  # Attesa iniziale più lunga
        
                    # Verifica che la richiesta non sia stata annullata immediatamente
                    try:
                        error_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'abortita') or contains(text(), 'aborted')]")
                        if error_elements:
                            self.add_log("❌ Richiesta abortita rilevata immediatamente")
                            if attempt < max_attempts - 1:
                                time.sleep(10)  # Pausa più lunga prima di riprovare
                                continue
                            else:
                                return update_ui_and_return("ERRORE: Richiesta abortita ripetutamente", success=False, message="Richiesta abortita ripetutamente")
                    except Exception:
                        pass  # Ignora errori nella ricerca di messaggi di errore
        
                    # Ciclo di attesa principale
                    response_complete = False
                    last_length = 0
                    stable_count = 0
                    timeout_cycles = 45  # ~15 minuti totali al massimo (20s per ciclo)
                    message_count = 0
        
                    for cycle in range(timeout_cycles):
                        # Cerca di ottenere la risposta con metodi multipli
                        response = None
            
                        # 1. Metodo principale: CSS Selector specifico
                        try:
                            selectors = [
                                ".message-content", 
                                "div.chat-wrapper div.desc > div > div > div",
                                "div.message div.text-wrap",
                                ".chat-message-item .content"
                            ]
                
                            for selector in selectors:
                                try:
                                    messages = self.driver.find_elements(By.CSS_SELECTOR, selector)
                                    if messages and len(messages) > 0:
                                        # Controlla se c'è un nuovo messaggio o un cambio nel conteggio
                                        if len(messages) > message_count:
                                            message_count = len(messages)
                                            self.add_log(f"📩 Nuovo messaggio rilevato: totale {message_count}")
                            
                                        # Usa l'ultimo messaggio
                                        last_message = messages[-1]
                                        response = last_message.text.strip()
                                        break
                                except Exception:
                                    continue
                        except Exception as e:
                            self.add_log(f"⚠️ Errore nel recupero risposta: {str(e)}")
            
                        # 2. Metodo alternativo: JavaScript diretto
                        if not response:
                            try:
                                js_response = self.driver.execute_script("""
                                    var messages = document.querySelectorAll('.message-content, .chat-message-item, .chat-wrapper .desc');
                                    if (messages && messages.length > 0) {
                                        return messages[messages.length - 1].textContent;
                                    }
                                    return null;
                                """)
                    
                                if js_response:
                                    response = js_response.strip()
                                    self.add_log(f"📩 Risposta recuperata via JavaScript: {len(response)} caratteri")
                            except Exception:
                                pass
            
                        # Se abbiamo ottenuto una risposta, analizzala
                        if response:
                            current_length = len(response)
                
                            # Controlla gli errori tipici nella risposta
                            error_indicators = ["richiesta abortita", "request aborted", "troppo lungo", "too long", 
                                               "errore durante", "error during", "riprova più tardi", "try again later"]
                
                            if any(indicator in response.lower() for indicator in error_indicators):
                                self.add_log(f"❌ Errore rilevato nella risposta: {response[:100]}...")
                                if attempt < max_attempts - 1:
                                    time.sleep(10)
                                    break  # Esci dal ciclo e riprova l'invio
                                else:
                                    error_msg = f"ERRORE: {response[:200]}"
                                    return update_ui_and_return(error_msg, success=False, message="Errore rilevato nella risposta")
                
                            # Controlla i terminatori espliciti
                            if "FINE_RISPOSTA" in response or "FINE" in response:
                                self.add_log(f"✅ Terminatore esplicito trovato dopo {cycle+1} cicli")
                    
                                # Pulisci la risposta rimuovendo il terminatore
                                if "FINE_RISPOSTA" in response:
                                    response = response.split("FINE_RISPOSTA")[0].strip()
                                elif "FINE" in response:
                                    response = response.split("FINE")[0].strip()
                        
                                return update_ui_and_return(response)
                
                            # Verifica stabilità della lunghezza
                            if current_length == last_length:
                                stable_count += 1
                                self.add_log(f"⏳ Risposta stabile: {stable_count}/5 cicli ({current_length} caratteri)")
                    
                                if stable_count >= 5:  # 5 cicli di stabilità = risposta completa
                                    self.add_log(f"✅ Risposta stabilizzata dopo {cycle+1} cicli")
                                    return update_ui_and_return(response)
                            else:
                                stable_count = 0
                                self.add_log(f"📝 Risposta in evoluzione: {current_length} caratteri (ciclo {cycle+1})")
                                last_length = current_length
                        else:
                            self.add_log(f"⚠️ Nessuna risposta rilevabile al ciclo {cycle+1}")
            
                        # Controlla se abbiamo raggiunto un limite di contesto
                        if cycle % 3 == 0:  # Ogni 3 cicli
                            if self.handle_context_limit():
                                self.add_log("♻️ Limite di contesto rilevato, nuovo tentativo...")
                                return self.send_to_genspark(section_to_send)
            
                        # Attendi prima del prossimo ciclo
                        time.sleep(20)  # 20 secondi tra i cicli
        
                    # Se siamo qui, il timeout è scaduto
                    if response:
                        self.add_log(f"⚠️ Timeout ma risposta parziale disponibile: {len(response)} caratteri")
                        return update_ui_and_return(response, message="Timeout, risposta parziale")
                    else:
                        self.add_log("❌ Timeout senza risposta")
            
                        if attempt < max_attempts - 1:
                            retry_delay = 15 * (attempt + 1)  # Aumenta il ritardo ad ogni tentativo
                            self.add_log(f"🔄 Tentativo {attempt+2} dopo timeout - attesa {retry_delay} secondi")
                            time.sleep(retry_delay)
                        else:
                            error_msg = "TIMEOUT: Nessuna risposta ricevuta dopo ripetuti tentativi"
                            return update_ui_and_return(error_msg, success=False, message="Timeout senza risposta")
        
                except Exception as e:
                    self.add_log(f"❌ Errore durante tentativo {attempt+1}: {str(e)}")
        
                    # Cattura screenshot per diagnosi
                    try:
                        screenshot_path = f"error_screenshot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                        self.driver.save_screenshot(screenshot_path)
                        self.add_log(f"📸 Screenshot errore: {screenshot_path}")
                    except Exception:
                        pass
        
                    if attempt < max_attempts - 1:
                        self.add_log(f"🔄 Attesa 20 secondi prima del tentativo {attempt+2}...")
                        time.sleep(20)
                    else:
                        self.add_log("❌ Tutti i tentativi falliti")
                        error_msg = f"ERRORE: {str(e)}"
                        return update_ui_and_return(error_msg, success=False, message=str(e))

            # Se arriviamo qui, tutti i tentativi sono falliti
            error_msg = "ERRORE: Tutti i tentativi falliti con errori diversi"
            return update_ui_and_return(error_msg, success=False, message="Errori multipli")

        except Exception as e:
            # Errore globale
            error_message = f"ERRORE CRITICO: {str(e)}"
            self.add_log(f"❌ {error_message}")
            logging.error(f"Errore in send_to_genspark: {str(e)}\n{traceback.format_exc()}")

            # Cattura screenshot finale
            try:
                screenshot_path = f"critical_error_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                self.driver.save_screenshot(screenshot_path)
                self.add_log(f"📸 Screenshot errore critico: {screenshot_path}")
            except Exception:
                pass
        
            return update_ui_and_return(error_message, success=False, message=str(e))

    def _set_use_crisp(self, value):
        """Imposta se usare il framework CRISP"""
        self.use_crisp = value
        if value:
            self.add_log("Framework CRISP 5.0 attivato")
        else:
            self.add_log("Framework CRISP disattivato, verrà utilizzato il sistema legacy")
    
        # Restituisci il log aggiornato
        return self.chat_manager.get_log_history_string()

    def log_history_string(self):
        """Helper per ottenere il log history come stringa"""
        return self.chat_manager.get_log_history_string()

    def load_projects_list(self):
        """Carica la lista dei progetti dal database adattato alla struttura effettiva"""
        self.add_log("🔄 Caricamento progetti dal database...")

        try:
            # Verifica che il database esista
            if not os.path.exists(self.crisp.project_db_path):
                self.add_log(f"⚠️ Database non trovato: {self.crisp.project_db_path}")
                return []
    
            self.add_log(f"📂 Database trovato: {self.crisp.project_db_path}")
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
    
            # Query base che utilizza la struttura effettiva del database
            cursor.execute("""
                SELECT p.id, p.name, p.creation_date, p.status
                FROM projects p
                ORDER BY p.creation_date DESC
            """)
    
            projects = cursor.fetchall()
    
            # Se ci sono progetti, cerca di ottenere le keyword
            project_keywords = {}
            if projects:
                for project in projects:
                    project_id = project[0]
                    # Usa la struttura effettiva con variable_name e variable_value
                    cursor.execute("""
                        SELECT variable_value 
                        FROM project_variables 
                        WHERE project_id = ? AND variable_name = 'KEYWORD'
                    """, (project_id,))
            
                    keyword_result = cursor.fetchone()
                    keyword = keyword_result[0] if keyword_result else "Keyword non specificata"
                    project_keywords[project_id] = keyword
            
            conn.close()
    
            if not projects:
                self.add_log("ℹ️ Nessun progetto trovato nel database")
                return []
    
            # Formatta i risultati
            formatted_projects = []
            display_choices = []  # Questo sarà un elenco di stringhe per il dropdown
            self.project_ids_by_index = []  # Questo sarà un elenco di ID progetti corrispondenti agli indici
    
            for proj in projects:
                try:
                    # Estrai le informazioni base
                    proj_id = proj[0]    # id
                    proj_name = proj[1]  # name
                    date_str = proj[2]   # creation_date
                    proj_status = proj[3]  # status
                    proj_keyword = project_keywords.get(proj_id, "")
            
                    # Formatta la data
                    try:
                        if date_str and isinstance(date_str, str):
                            if 'T' in date_str:  # Formato ISO
                                date_formatted = datetime.fromisoformat(date_str).strftime('%d/%m/%Y %H:%M')
                            else:
                                date_formatted = date_str
                        else:
                            date_formatted = str(date_str)
                    except Exception as date_error:
                        self.add_log(f"⚠️ Errore nella formattazione della data: {str(date_error)}")
                        date_formatted = str(date_str)
            
                    # Display informativo
                    display_name = f"{proj_name} - {proj_keyword} ({date_formatted})"
            
                    project_data = {
                        "id": proj_id,
                        "name": proj_name,
                        "date": date_formatted,
                        "status": proj_status,
                        "keyword": proj_keyword,
                        "display": display_name
                    }
            
                    formatted_projects.append(project_data)
                    display_choices.append(display_name)  # Solo il nome da visualizzare
                    self.project_ids_by_index.append(proj_id)  # Salva l'ID nella stessa posizione
            
                except Exception as item_error:
                    self.add_log(f"⚠️ Errore nella formattazione del progetto: {str(item_error)}")
                    import traceback
                    self.add_log(traceback.format_exc())
                    continue
    
            # Salva progetti in dizionario per uso futuro
            self.projects_data = {p["display"]: p["id"] for p in formatted_projects}
            self.projects_details = {p["id"]: p for p in formatted_projects}
    
            self.add_log(f"✅ Caricati {len(formatted_projects)} progetti dal database")
    
            # Aggiorna le scelte del dropdown se possibile
            if hasattr(self, 'projects_list') and self.projects_list is not None:
                self.projects_list.choices = display_choices  # Solo i nomi da visualizzare
                self.add_log(f"✅ Dropdown aggiornato con {len(display_choices)} progetti")
    
            return display_choices  # Restituisci solo i nomi da visualizzare per il dropdown
    
        except Exception as e:
            self.add_log(f"❌ Errore generale nel caricamento progetti: {str(e)}")
            import traceback
            error_details = traceback.format_exc()
            self.add_log(f"📄 Dettagli errore: {error_details}")
            print(f"Errore dettagliato: {error_details}")
            return []

    def create_test_project(self):
        """Crea un progetto di test nel database per verificare la funzionalità"""
        try:
            self.add_log("🧪 Creazione progetto di test...")
        
            # Verifica che il database esista
            if not os.path.exists(self.crisp.project_db_path):
                self.add_log(f"⚠️ Database non trovato: {self.crisp.project_db_path}")
                return "Database non trovato"
        
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
        
            # Crea un nuovo progetto
            import datetime
            project_id = f"test-{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
            current_timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
            cursor.execute(
                "INSERT INTO projects (id, name, creation_date, status) VALUES (?, ?, ?, ?)",
                (project_id, "Progetto Test DMSO", current_timestamp, "test")
            )
        
            # Aggiungi variabili al progetto usando la struttura corretta
            variables = [
                ("KEYWORD", "dmso pharmaceutical grade"),
                ("TITOLO_LIBRO", "DMSO Pharmaceutical Grade: The Complete Guide"),
                ("VOICE_STYLE", "Informativo e autorevole"),
                ("CONTENT_PILLARS", "Capitolo 1: Introduzione al DMSO\nCapitolo 2: Qualità Farmaceutica\nCapitolo 3: Applicazioni\nCapitolo 4: Sicurezza e Stoccaggio")
            ]
        
            for var_name, var_value in variables:
                cursor.execute(
                    "INSERT INTO project_variables (project_id, variable_name, variable_value) VALUES (?, ?, ?)",
                    (project_id, var_name, var_value)
                )
        
            # Aggiungi un risultato
            cursor.execute(
                "INSERT INTO project_results (project_id, step_id, result_text, timestamp) VALUES (?, ?, ?, ?)",
                (project_id, "ANALISI", "Esempio di analisi per il progetto di test DMSO", current_timestamp)
            )
        
            conn.commit()
            conn.close()
        
            self.add_log(f"✅ Progetto di test creato con ID: {project_id}")
            return f"Progetto di test creato con ID: {project_id}"
        
        except Exception as e:
            self.add_log(f"❌ Errore nella creazione del progetto di test: {str(e)}")
            import traceback
            error_details = traceback.format_exc()
            self.add_log(error_details)
            return f"Errore: {str(e)}"

    def search_projects(self, keyword=""):
        """Cerca progetti che contengono la keyword specificata"""
        try:
            if not keyword:
                return self.load_projects_list()
        
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
        
            # Query per cercare progetti che contengono la keyword
            query = """
            SELECT 
                p.id, 
                p.name, 
                p.creation_date,
                (SELECT value FROM project_variables WHERE project_id = p.id AND name = 'KEYWORD' LIMIT 1) as keyword,
                (SELECT COUNT(DISTINCT prompt_id) FROM project_results WHERE project_id = p.id) as phases_count,
                (SELECT prompt_id FROM project_results WHERE project_id = p.id ORDER BY id DESC LIMIT 1) as last_phase,
                (SELECT COUNT(*) FROM project_results WHERE project_id = p.id) as results_count
            FROM projects p
            WHERE 
                p.name LIKE ? OR
                p.id IN (SELECT project_id FROM project_variables WHERE value LIKE ?)
            ORDER BY p.creation_date DESC
            """
        
            search_term = f"%{keyword}%"
            cursor.execute(query, (search_term, search_term))
            projects = cursor.fetchall()
            conn.close()
        
            # Formatta i risultati usando la stessa logica di load_projects_list
            # [stesso codice di formattazione di load_projects_list]
        
            self.add_log(f"🔍 Trovati {len(formatted_projects)} progetti contenenti '{keyword}'")
            return project_choices
        
        except Exception as e:
            self.add_log(f"❌ Errore nella ricerca progetti: {str(e)}")
            return []

    def get_database_stats(self):
        """Ottiene statistiche generali sul database"""
        try:
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
        
            # Conta progetti totali
            cursor.execute("SELECT COUNT(*) FROM projects")
            total_projects = cursor.fetchone()[0]
        
            # Conta progetti per fase
            cursor.execute("""
                SELECT prompt_id, COUNT(DISTINCT project_id) as count 
                FROM project_results 
                GROUP BY prompt_id
                ORDER BY count DESC
            """)
            phase_stats = cursor.fetchall()
        
            # Statistiche cronologiche
            cursor.execute("""
                SELECT strftime('%Y-%m', creation_date) as month, COUNT(*) as count
                FROM projects
                GROUP BY month
                ORDER BY month DESC
                LIMIT 6
            """)
            time_stats = cursor.fetchall()
        
            conn.close()
        
            # Formatta le statistiche
            stats_text = f"**Progetti totali:** {total_projects}\n\n"
        
            if phase_stats:
                stats_text += "**Progetti per fase:**\n"
                for phase, count in phase_stats:
                    stats_text += f"- {phase}: {count} progetti\n"
        
            if time_stats:
                stats_text += "\n**Trend ultimi mesi:**\n"
                for month, count in time_stats:
                    stats_text += f"- {month}: {count} progetti\n"
        
            return stats_text
        
        except Exception as e:
            return f"❌ Errore nel caricamento statistiche: {str(e)}"

    def safe_db_operation(func):
        """Decoratore per gestire in modo sicuro le operazioni sul database"""
        def wrapper(self, *args, **kwargs):
            try:
                return func(self, *args, **kwargs)
            except sqlite3.Error as sql_e:
                error_msg = f"Errore SQLite in {func.__name__}: {str(sql_e)}"
                self.add_log(f"❌ {error_msg}")
                return f"❌ {error_msg}"
            except Exception as e:
                error_msg = f"Errore in {func.__name__}: {str(e)}"
                self.add_log(f"❌ {error_msg}")
                import traceback
                self.add_log(traceback.format_exc())
                return f"❌ {error_msg}"
        return wrapper

    def load_project_details(self, selected_index):
        """Carica i dettagli di un progetto basandosi sull'indice selezionato"""
        self.add_log(f"🔍 Caricamento dettagli per indice: {selected_index}")
    
        try:
            # Verifica che l'indice sia valido
            if selected_index is None:
                self.add_log("⚠️ Nessun progetto selezionato")
                return "<div class='project-placeholder'>Seleziona un progetto dalla lista per visualizzarne i dettagli</div>"
        
            # Converti l'indice in ID progetto
            project_id = None
        
            # Se non abbiamo la lista degli ID per indice, ricaricare i progetti
            if not hasattr(self, 'project_ids_by_index') or not self.project_ids_by_index:
                self.add_log("⚠️ Lista ID non disponibile, ricaricamento in corso...")
                self.load_projects_list()
        
            # Verifica che l'indice sia un numero e sia all'interno del range valido
            if isinstance(selected_index, (int, float)) and hasattr(self, 'project_ids_by_index'):
                index = int(selected_index)
                if 0 <= index < len(self.project_ids_by_index):
                    project_id = self.project_ids_by_index[index]
                    self.add_log(f"ID progetto dall'indice {index}: {project_id}")
                else:
                    self.add_log(f"⚠️ Indice fuori range: {index}, max: {len(self.project_ids_by_index)-1 if self.project_ids_by_index else 'N/A'}")
            else:
                self.add_log(f"⚠️ Indice non valido: {selected_index} (tipo: {type(selected_index).__name__})")
        
            # Se non abbiamo un ID valido, fallback al primo progetto
            if not project_id:
                if hasattr(self, 'project_ids_by_index') and self.project_ids_by_index:
                    project_id = self.project_ids_by_index[0]
                    self.add_log(f"📌 Usando primo progetto disponibile: {project_id}")
                else:
                    # Recupera il primo progetto dal database
                    conn = sqlite3.connect(self.crisp.project_db_path)
                    cursor = conn.cursor()
                    cursor.execute("SELECT id FROM projects LIMIT 1")
                    result = cursor.fetchone()
                    conn.close()
                
                    if result:
                        project_id = result[0]
                        self.add_log(f"📌 Recuperato primo progetto dal DB: {project_id}")
                    else:
                        self.add_log("❌ Nessun progetto trovato nel database")
                        return "<div class='error-message'>Nessun progetto trovato nel database.</div>"
        
            # Da qui in poi, continuiamo con la logica esistente
            self.add_log(f"📌 Caricamento dettagli progetto: {project_id}")
        
            # Recupero dati dal database
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
        
            # Recupera dati progetto
            cursor.execute("SELECT * FROM projects WHERE id = ?", (project_id,))
            project_base = cursor.fetchone()
        
            if not project_base:
                conn.close()
                self.add_log("❌ Progetto non trovato nel database")
                return "<div class='error-message'>Progetto non trovato nel database.</div>"
        
            # Recupera variabili progetto
            cursor.execute("SELECT variable_name, variable_value FROM project_variables WHERE project_id = ?", (project_id,))
            variables = cursor.fetchall()
        
            # Recupera risultati
            cursor.execute("SELECT step_id, result_text, timestamp FROM project_results WHERE project_id = ? ORDER BY timestamp", (project_id,))
            results = cursor.fetchall()
        
            conn.close()
        
            # Converti a dizionario
            project_data = {
                "id": project_base[0],
                "name": project_base[1],
                "creation_date": project_base[2],
                "status": project_base[3]
            }
        
            # Aggiungi variabili al dizionario
            for var_name, var_value in variables:
                project_data[var_name] = var_value
        
            # HTML per i dettagli
            html_details = f"""
            <div style="font-family: Arial, sans-serif; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                <h2 style="color: #2c3e50;">{project_data.get('name', 'Progetto')}</h2>
            
                <div style="display: flex; margin-bottom: 15px;">
                    <div style="flex: 1; background: #f7f7f7; padding: 10px; border-radius: 5px; margin-right: 10px;">
                        <h3 style="margin-top: 0; color: #3498db;">Informazioni Progetto</h3>
                        <p><strong>ID:</strong> {project_id}</p>
                        <p><strong>Data creazione:</strong> {project_data.get('creation_date', 'N/A')}</p>
                        <p><strong>Stato:</strong> {project_data.get('status', 'N/A')}</p>
                        <p><strong>Keyword:</strong> {project_data.get('KEYWORD', 'N/A')}</p>
                    </div>
            
                    <div style="flex: 1; background: #f7f7f7; padding: 10px; border-radius: 5px;">
                        <h3 style="margin-top: 0; color: #e74c3c;">Dettagli Libro</h3>
                        <p><strong>Titolo:</strong> {project_data.get('TITOLO_LIBRO', 'N/A')}</p>
                        <p><strong>Stile voce:</strong> {project_data.get('VOICE_STYLE', 'N/A')}</p>
                    </div>
                </div>
            
                <h3 style="color: #9b59b6;">Contenuto</h3>
                <div style="background-color: #f9f9f9; border: 1px solid #ddd; border-radius: 5px; padding: 10px; margin-bottom: 15px;">
                    <pre>{project_data.get('CONTENT_PILLARS', 'Nessun indice disponibile')}</pre>
                </div>
            
                <h3 style="color: #f39c12;">Risultati Salvati</h3>
                <div style="max-height: 200px; overflow-y: auto;">
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr style="background-color: #3498db; color: white;">
                            <th style="padding: 8px; text-align: left;">Step</th>
                            <th style="padding: 8px; text-align: left;">Timestamp</th>
                            <th style="padding: 8px; text-align: left;">Anteprima</th>
                        </tr>
            """
        
            # Aggiungi risultati alla tabella
            result_rows = ""
            if results:
                for step_id, result_text, timestamp in results:
                    preview = result_text[:50] + "..." if result_text and len(result_text) > 50 else "Nessun testo"
                    result_rows += f"""
                    <tr style="background-color: #f5f5f5;">
                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>{step_id}</strong></td>
                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{timestamp}</td>
                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{preview}</td>
                    </tr>
                    """
            else:
                result_rows = """
                <tr>
                    <td colspan="3" style="text-align: center; padding: 10px;">Nessun risultato salvato</td>
                </tr>
                """
        
            html_details += result_rows
        
            html_details += """
                    </table>
                </div>
            
                <div style="margin-top: 20px;">
                    <p style="color: #7f8c8d;"><em>Per riprendere l'analisi da dove è stata interrotta, usa il pulsante "Ripristina Analisi"</em></p>
                </div>
            </div>
            """
        
            self.add_log("✅ Dettagli progetto caricati con successo")
            return html_details
        
        except Exception as e:
            error_msg = f"❌ Errore nel caricamento dei dettagli: {str(e)}"
            self.add_log(error_msg)
            import traceback
            error_details = traceback.format_exc()
            self.add_log(error_details)
            return f"""
            <div style='color: red; padding: 20px; background-color: #ffebee; border-radius: 5px; border: 1px solid #ffcccc;'>
                <h3>Errore nel caricamento dei dettagli</h3>
                <p>{str(e)}</p>
                <pre style='background-color: #f8f8f8; padding: 10px; overflow: auto; max-height: 200px; font-size: 12px;'>{error_details}</pre>
            </div>
            """

    def diagnose_and_fix_database(self):
        """Diagnosi e riparazione del database"""
        self.add_log("🔍 Avvio diagnosi database...")
    
        db_path = self.crisp.project_db_path
        self.add_log(f"🗂️ Posizione database: {db_path}")
    
        # Verifica se il file esiste
        if not os.path.exists(db_path):
            self.add_log("⚠️ Database non trovato! Creazione nuovo database...")
            self.initialize_database()
            return "Database creato con successo!"
    
        # Il database esiste, verifica la struttura
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
        
            # Controlla tabelle esistenti
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [table[0] for table in cursor.fetchall()]
            self.add_log(f"📋 Tabelle trovate: {', '.join(tables) if tables else 'nessuna'}")
        
            # Verifica ed eventualmente crea le tabelle mancanti
            required_tables = ["projects", "project_variables", "project_results", "incremental_responses"]
            missing_tables = [table for table in required_tables if table not in tables]
        
            if missing_tables:
                self.add_log(f"⚠️ Tabelle mancanti: {', '.join(missing_tables)}")
                self.initialize_database(existing_tables=tables)
            else:
                self.add_log("✅ Tutte le tabelle richieste esistono")
            
                # Conta i progetti
                cursor.execute("SELECT COUNT(*) FROM projects")
                count = cursor.fetchone()[0]
                self.add_log(f"📊 Progetti nel database: {count}")
        
            conn.close()
            return "Diagnosi database completata"
        
        except Exception as e:
            self.add_log(f"❌ Errore durante la diagnosi: {str(e)}")
            import traceback
            self.add_log(traceback.format_exc())
            return f"Errore: {str(e)}"
        
    def initialize_database(self, existing_tables=None):
        """Inizializza il database con la struttura corretta"""
        try:
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
        
            # Definizione tabelle
            tables = {
                "projects": """
                    CREATE TABLE IF NOT EXISTS projects (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT,
                        creation_date TEXT,
                        last_updated TEXT
                    )
                """,
                "project_variables": """
                    CREATE TABLE IF NOT EXISTS project_variables (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        project_id INTEGER,
                        name TEXT,
                        value TEXT,
                        FOREIGN KEY (project_id) REFERENCES projects (id)
                    )
                """,
                "project_results": """
                    CREATE TABLE IF NOT EXISTS project_results (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        project_id INTEGER,
                        prompt_id TEXT,
                        created_at TEXT,
                        data TEXT,
                        FOREIGN KEY (project_id) REFERENCES projects (id)
                    )
                """,
                "incremental_responses": """
                    CREATE TABLE IF NOT EXISTS incremental_responses (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        project_id INTEGER,
                        section TEXT,
                        data TEXT,
                        created_at TEXT,
                        FOREIGN KEY (project_id) REFERENCES projects (id)
                    )
                """
            }
        
            # Crea solo le tabelle mancanti
            for table_name, create_sql in tables.items():
                if existing_tables is None or table_name not in existing_tables:
                    self.add_log(f"🔧 Creazione tabella: {table_name}")
                    cursor.execute(create_sql)
        
            conn.commit()
            conn.close()
            self.add_log("✅ Database inizializzato correttamente")
        
        except Exception as e:
            self.add_log(f"❌ Errore durante l'inizializzazione del database: {str(e)}")

    def export_project(self, selected_index):
        """Esporta un progetto in formato JSON"""
        try:
            self.add_log(f"Richiesta esportazione dal progetto con indice: {selected_index}")
        
            # Determinazione dell'ID progetto dall'indice
            project_id = None
        
            # Se non abbiamo la lista degli ID per indice, ricaricare i progetti
            if not hasattr(self, 'project_ids_by_index') or not self.project_ids_by_index:
                self.add_log("⚠️ Lista ID non disponibile, ricaricamento in corso...")
                self.load_projects_list()
            
            # Verificare se l'indice è valido
            if isinstance(selected_index, (int, float)) and hasattr(self, 'project_ids_by_index'):
                index = int(selected_index)
                if 0 <= index < len(self.project_ids_by_index):
                    project_id = self.project_ids_by_index[index]
                    self.add_log(f"ID progetto dall'indice {index}: {project_id}")
                else:
                    self.add_log(f"⚠️ Indice fuori range: {index}")
        
            # Se non abbiamo un ID valido, fallback al primo progetto
            if not project_id:
                if hasattr(self, 'project_ids_by_index') and self.project_ids_by_index:
                    project_id = self.project_ids_by_index[0]
                    self.add_log(f"📌 Usando primo progetto disponibile: {project_id}")
                else:
                    # Recupera il primo progetto dal database
                    conn = sqlite3.connect(self.crisp.project_db_path)
                    cursor = conn.cursor()
                    cursor.execute("SELECT id FROM projects LIMIT 1")
                    result = cursor.fetchone()
                    conn.close()
                
                    if result:
                        project_id = result[0]
                        self.add_log(f"📌 Recuperato primo progetto dal DB: {project_id}")
                    else:
                        self.add_log("❌ Nessun progetto trovato nel database")
                        return "Errore: Nessun progetto trovato nel database"
        
            # Recupera i dati del progetto
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
        
            # Recupera i dati base del progetto
            cursor.execute("SELECT * FROM projects WHERE id = ?", (project_id,))
            project_base = cursor.fetchone()
        
            if not project_base:
                conn.close()
                self.add_log(f"❌ Progetto {project_id} non trovato")
                return "Errore: Progetto non trovato nel database"
        
            # Recupera tutte le variabili
            cursor.execute("""
                SELECT variable_name, variable_value 
                FROM project_variables 
                WHERE project_id = ?
            """, (project_id,))
            variables = cursor.fetchall()
        
            # Recupera tutti i risultati
            cursor.execute("""
                SELECT step_id, result_text, timestamp 
                FROM project_results 
                WHERE project_id = ?
                ORDER BY timestamp
            """, (project_id,))
            results = cursor.fetchall()
        
            conn.close()
        
            # Crea il dizionario di esportazione
            export_data = {
                "id": project_id,
                "name": project_base[1],
                "creation_date": project_base[2],
                "status": project_base[3],
                "variables": {name: value for name, value in variables},
                "results": [{"step_id": step, "text": text, "timestamp": ts} for step, text, ts in results]
            }
        
            # Converti in JSON
            import json
            export_json = json.dumps(export_data, indent=2, ensure_ascii=False)
        
            # Crea un file temporaneo
            import tempfile
            import os
            temp_dir = tempfile.gettempdir()
            export_file = os.path.join(temp_dir, f"publiscript_export_{project_id}.json")
        
            with open(export_file, "w", encoding="utf-8") as f:
                f.write(export_json)
        
            self.add_log(f"✅ Progetto esportato in: {export_file}")
        
            # Messaggio di successo
            success_message = f"""
            <div style="background-color: #e7f5ea; padding: 15px; border-radius: 5px; border: 1px solid #4caf50;">
                <h3>✅ Progetto Esportato con Successo</h3>
                <p><strong>ID:</strong> {project_id}</p>
                <p><strong>Nome:</strong> {project_base[1]}</p>
                <p><strong>File:</strong> {export_file}</p>
                <p>Il file è stato salvato sul tuo computer. Puoi aprirlo con qualsiasi editor di testo.</p>
            </div>
            """
        
            return success_message
        
        except Exception as e:
            error_msg = f"❌ Errore nell'esportazione: {str(e)}"
            self.add_log(error_msg)
            import traceback
            error_details = traceback.format_exc()
            self.add_log(error_details)
            return f"""
            <div style='color: red; padding: 20px; background-color: #ffebee; border-radius: 5px; border: 1px solid #ffcccc;'>
                <h3>Errore nell'Esportazione</h3>
                <p>{str(e)}</p>
                <pre style='background-color: #f8f8f8; padding: 10px; overflow: auto; max-height: 200px; font-size: 12px;'>{error_details}</pre>
            </div>
            """

    def update_project_count(self):
        """Aggiorna il contatore dei progetti"""
        try:
            # Conta i progetti nel database
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM projects")
            count = cursor.fetchone()[0]
            conn.close()
        
            if count == 0:
                return """
                <div style="background-color: #fff3e0; padding: 5px 10px; border-radius: 5px; display: inline-block;">
                    <strong>0</strong> progetti nel database
                </div>
                """
            else:
                return f"""
                <div style="background-color: #e8f5e9; padding: 5px 10px; border-radius: 5px; display: inline-block;">
                    <strong>{count}</strong> progetti nel database
                </div>
                """
        except Exception as e:
            self.add_log(f"Errore nel conteggio progetti: {str(e)}")
            return """
            <div style="background-color: #ffebee; padding: 5px 10px; border-radius: 5px; display: inline-block;">
                Errore nel conteggio progetti
            </div>
            """

    def delete_project(self, project_display_name):
        """Elimina un progetto dal database"""
        if not project_display_name or project_display_name not in self.projects_data:
            return self.add_log("Nessun progetto selezionato")
    
        project_id = self.projects_data[project_display_name]
    
        try:
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
        
            # Elimina prima le relazioni
            cursor.execute("DELETE FROM project_variables WHERE project_id = ?", (project_id,))
            cursor.execute("DELETE FROM project_results WHERE project_id = ?", (project_id,))
            cursor.execute("DELETE FROM incremental_responses WHERE project_id = ?", (project_id,))
        
            # Elimina il progetto
            cursor.execute("DELETE FROM projects WHERE id = ?", (project_id,))
        
            conn.commit()
            conn.close()
        
            return self.add_log(f"✅ Progetto {project_id} eliminato con successo")
    
        except Exception as e:
            return self.add_log(f"❌ Errore nell'eliminazione del progetto: {str(e)}")

    def check_existing_analysis(self, keyword):
        """
        Verifica se esiste già un'analisi per la keyword specificata.
    
        Args:
            keyword: Keyword da cercare
        
        Returns:
            tuple: (esiste, project_id, data_creazione) o (False, None, None)
        """
        try:
            conn = sqlite3.connect(self.crisp.project_db_path)
            cursor = conn.cursor()
        
            # Cerca progetti con questa keyword
            cursor.execute("""
                SELECT p.id, p.creation_date 
                FROM projects p
                JOIN project_variables v ON p.id = v.project_id
                WHERE v.name = 'KEYWORD' AND v.value = ?
                ORDER BY p.creation_date DESC
                LIMIT 1
            """, (keyword,))
        
            result = cursor.fetchone()
            conn.close()
        
            if result:
                project_id, creation_date = result
                date_formatted = datetime.fromisoformat(creation_date).strftime('%d/%m/%Y %H:%M')
                return True, project_id, date_formatted
        
            return False, None, None
        
        except Exception as e:
            self.add_log(f"Errore nella verifica di analisi esistenti: {str(e)}")
            return False, None, None    

    def generate_book(self, book_title, book_language, voice_style, book_index):
            """
            Genera il libro utilizzando i dati dell'interfaccia e i dati CRISP disponibili.
            """
            if not book_title.strip():
                return self.add_log("Errore: Il titolo del libro è obbligatorio!")
            if not book_index.strip():
                return self.add_log("Errore: L'indice del libro è obbligatorio!")
    
            try:
                # Recupera il tipo di libro
                book_type = "Manuale (Non-Fiction)"  # Default
                if hasattr(self, 'book_type_hidden'):
                    book_type = self.book_type_hidden.value
                elif hasattr(self, 'current_analysis') and self.current_analysis.get('project_data', {}).get('LIBRO_TIPO'):
                    book_type = self.current_analysis['project_data']['LIBRO_TIPO']
        
                self.add_log(f"Generazione libro: {book_title} (Tipo: {book_type})")
        
                # Carica il prompt specifico per questo tipo di libro
                chapter_prompt = self._load_chapter_prompt(book_type)
        
                # Analizza l'indice per ottenere i capitoli
                chapters = self._parse_book_index(book_index)
                self.add_log(f"Indice analizzato: {len(chapters)} capitoli trovati")
        
                # Recupera il contesto completo (dati CRISP)
                context_data = {}
                if hasattr(self, 'current_analysis') and self.current_analysis.get('project_data'):
                    context_data = self.current_analysis['project_data']
        
                # Aggiungi i dati dell'interfaccia al contesto
                context_data['TITOLO_LIBRO'] = book_title
                context_data['LINGUA_LIBRO'] = book_language
                context_data['VOICE_STYLE'] = voice_style
        
                # Genera ogni capitolo
                for i, chapter in enumerate(chapters):
                    self.add_log(f"Generazione capitolo {i+1}/{len(chapters)}: {chapter['title']}")
            
                    # Prepara il prompt per questo capitolo
                    full_prompt = chapter_prompt.replace("{text}", chapter['title'])
            
                    # Sostituisci tutte le variabili dal contesto
                    for var_name, var_value in context_data.items():
                        placeholder = "{" + var_name + "}"
                        if placeholder in full_prompt and var_value:
                            full_prompt = full_prompt.replace(placeholder, str(var_value))
            
                    # Gestisci i placeholder non sostituiti
                    full_prompt = self._handle_missing_placeholders(full_prompt)
            
                    # Invia il prompt e ottieni la risposta
                    chapter_content = self.send_to_genspark(full_prompt)
            
                    # Pulisci la risposta
                    if "FINE_RISPOSTA" in chapter_content:
                        chapter_content = chapter_content.split("FINE_RISPOSTA")[0].strip()
                    elif "FINE" in chapter_content:
                        chapter_content = chapter_content.split("FINE")[0].strip()
            
                    # Salva il capitolo
                    self._save_chapter(chapter['title'], chapter_content, book_title)
            
                    # Applica un cooldown tra i capitoli
                    if i < len(chapters) - 1:
                        cooldown_time = 30 + (i * 5)  # Aumenta progressivamente
                        self.add_log(f"Pausa di {cooldown_time} secondi prima del prossimo capitolo...")
                        time.sleep(cooldown_time)
        
                self.add_log(f"✅ Libro generato con successo: {book_title}")
                return self.chat_manager.get_log_history_string()
        
            except Exception as e:
                error_msg = f"Errore durante la generazione del libro: {str(e)}"
                self.add_log(error_msg)
                logging.error(error_msg)
                return self.chat_manager.get_log_history_string()

    def _parse_book_index(self, book_index):
        """Analizza l'indice e lo converte in una lista di capitoli strutturati."""
        chapters = []
        lines = [line.strip() for line in book_index.split('\n') if line.strip()]
    
        for line in lines:
            # Ignora l'introduzione e la conclusione, li tratteremo separatamente
            if line.lower() in ["introduzione", "introduction", "conclusione", "conclusion"]:
                continue
        
            # Cerca di estrarre il titolo del capitolo
            chapter_match = re.match(r'(?:CAPITOLO|CHAPTER)\s*(\d+)?\s*:?\s*(.*)', line, re.IGNORECASE)
            if chapter_match:
                chapter_number = chapter_match.group(1) or ""
                chapter_title = chapter_match.group(2).strip()
                if chapter_title:
                    chapters.append({
                        "number": chapter_number,
                        "title": chapter_title
                    })
            elif line:  # Se è una linea con contenuto ma non è un formato standard
                chapters.append({
                    "number": "",
                    "title": line
                })
    
        return chapters

    def _load_chapter_prompt(self, book_type):
        """Carica il prompt template per i capitoli specifico per il tipo di libro."""
        # Cerca prima in un file, altrimenti usa il template predefinito
        try:
            template_file = f"chapter_prompt_{book_type.lower().replace(' ', '_')}.txt"
            with open(template_file, "r", encoding="utf-8") as f:
                return f.read()
        except:
            # Template predefinito
            return """
            Scrivi il capitolo "{text}" per il libro "{TITOLO_LIBRO}" seguendo rigorosamente queste istruzioni di stile e struttura:
        
            STILE DI SCRITTURA:
            - Utilizza il seguente stile narrativo: {VOICE_STYLE}
            - Mantieni un tono coerente con l'angolo di attacco del libro: {ANGOLO_ATTACCO}
            - Rivolgi il testo direttamente al lettore con le caratteristiche di: {BUYER_PERSONA_SUMMARY}
            - Affronta i problemi principali evidenziati in: {IMPLEMENTATION_OBSTACLES}
        
            STRUTTURA E FORMATTAZIONE:
            - Inizia con un'introduzione coinvolgente che aggancia immediatamente il lettore
            - Dividi il capitolo in 3-5 sezioni principali con sottotitoli chiari
            - Usa tabelle invece di elenchi puntati per presentare informazioni strutturate
            - Includi almeno un esempio pratico o caso studio rilevante
            - Chiudi con un riepilogo dei punti chiave e un collegamento al capitolo successivo
        
            CONTENUTO SPECIFICO:
            - Allinea il contenuto alla Big Idea del libro: {BIG_IDEA}
            - Integra i pilastri di contenuto rilevanti: {CONTENT_PILLARS}
            - Quando applicabile, fai riferimento al metodo proprietario: {PROPRIETARY_METHOD}
        
            Sviluppa il contenuto in modo dettagliato, con una lunghezza compresa tra 2000-3000 parole.
            Scrivi FINE_RISPOSTA quando hai terminato.
            """

    def _handle_missing_placeholders(self, text):
        """Gestisce i placeholder non sostituiti nel prompt."""
        # Trova tutti i placeholder rimanenti
        placeholders = re.findall(r'\{([A-Z_]+)\}', text)
    
        for placeholder in placeholders:
            # Sostituisce i placeholder mancanti con un valore generico
            full_placeholder = "{" + placeholder + "}"
            text = text.replace(full_placeholder, f"[Valore di {placeholder} non disponibile]")
    
        return text

    def _generate_chapter_content(self, chapter_title, prompt):
        """Genera il contenuto di un capitolo inviandolo a Genspark."""
        try:
            # Verifica se il driver è attivo
            if not self.driver:
                self.add_log("Browser non disponibile")
                return "Errore: Browser non disponibile"
        
            # Ottieni l'input box
            input_box = WebDriverWait(self.driver, 20).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "div.search-input-wrapper textarea"))
            )
        
            if not input_box:
                self.add_log("Impossibile ottenere l'input box")
                return "Errore: Input box non disponibile"
        
            # Invia il prompt e attendi la risposta
            response = self.send_to_genspark(prompt)
        
            # Pulisci la risposta
            if "FINE_RISPOSTA" in response:
                response = response.split("FINE_RISPOSTA")[0].strip()
            elif "FINE" in response:
                response = response.split("FINE")[0].strip()
        
            return response
    
        except Exception as e:
            self.add_log(f"Errore nella generazione del capitolo {chapter_title}: {str(e)}")
            return f"Errore nella generazione: {str(e)}"

    def _save_chapter(self, chapter_title, chapter_content, book_title):
        """Salva il capitolo generato in un file."""
        from docx import Document
    
        safe_title = re.sub(r'[<>:"/\\|?*]', '', book_title)
        folder_path = os.path.join(os.getcwd(), safe_title)
        os.makedirs(folder_path, exist_ok=True)
    
        safe_chapter = re.sub(r'[<>:"/\\|?*]', '', chapter_title)
        file_path = os.path.join(folder_path, f"{safe_chapter}.docx")
    
        doc = Document()
        doc.add_heading(chapter_title, 1)
    
        # Aggiungi il contenuto con formattazione di base
        for paragraph in chapter_content.split('\n\n'):
            if paragraph.strip():
                if paragraph.strip().startswith('#'):
                    # È un titolo
                    level = paragraph.count('#')
                    title_text = paragraph.strip('#').strip()
                    doc.add_heading(title_text, level)
                else:
                    # È un paragrafo normale
                    doc.add_paragraph(paragraph)
    
        doc.save(file_path)
        self.add_log(f"Capitolo '{chapter_title}' salvato in {file_path}")
    
        return file_path    

    def export_to_docx(self):
        try:
            self.add_log("Esportazione in DOCX...")
        
            # 1. Verifica se esiste il file di contesto
            context_file = "context.txt"
            if not os.path.exists(context_file):
                self.add_log("❌ File context.txt non trovato!")
                return None
        
            # 2. Leggi il contenuto del file
            with open(context_file, "r", encoding="utf-8") as f:
                content = f.read()
            
            # 3. Ottieni la keyword corrente o usa un valore predefinito
            keyword = self.get_current_keyword() if hasattr(self, 'get_current_keyword') else "unknown"
        
            # 4. Crea il documento
            from docx import Document
            doc = Document()
            doc.add_heading(f"Analisi di mercato: {keyword}", 0)
        
            # 5. Divide il contenuto in sezioni e le aggiunge al documento
            sections = content.split("===")
            for section in sections:
                if section.strip():
                    # Cerca un titolo nella sezione
                    lines = section.strip().split("\n")
                    if lines:
                        # Usa la prima riga come titolo
                        doc.add_heading(lines[0], level=1)
                        # Aggiungi il resto come testo
                        if len(lines) > 1:
                            doc.add_paragraph("\n".join(lines[1:]))
                        doc.add_paragraph("") # Spazio aggiuntivo
        
            # 6. Salva il documento con timestamp
            import datetime
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = f"analisi_{keyword}_{timestamp}.docx"
            doc.save(output_path)
        
            self.add_log(f"✅ Documento DOCX salvato: {output_path}")
            return output_path
        except Exception as e:
            self.add_log(f"❌ Errore nell'esportazione DOCX: {str(e)}")
            import traceback
            self.add_log(traceback.format_exc())
            return None

    def export_to_pdf(self):
        try:
            self.add_log("Esportazione in PDF...")
        
            # 1. Prima esporta in DOCX
            docx_path = self.export_to_docx()
            if not docx_path:
                raise Exception("Errore nell'esportazione DOCX preliminare")
        
            # 2. Converti DOCX in PDF - metodo preferito: python-docx2pdf
            try:
                # Prova a importare docx2pdf
                from docx2pdf import convert
            
                # Conversione diretta
                pdf_path = docx_path.replace('.docx', '.pdf')
                self.add_log(f"Conversione {docx_path} in {pdf_path}...")
                convert(docx_path, pdf_path)
            
                self.add_log(f"✅ Documento PDF salvato: {pdf_path}")
                return pdf_path
            
            except ImportError:
                # Fallback: utilizza un messaggio informativo se docx2pdf non è installato
                self.add_log("⚠️ Modulo python-docx2pdf non trovato.")
                self.add_log("⚠️ Per convertire in PDF, apri il file DOCX e usa 'Salva come PDF'")
                self.add_log(f"⚠️ Il file DOCX è disponibile qui: {docx_path}")
                return docx_path
        
        except Exception as e:
            self.add_log(f"❌ Errore nell'esportazione PDF: {str(e)}")
            import traceback
            self.add_log(traceback.format_exc())
            return None

    def export_to_txt(self):
        try:
            self.add_log("Esportazione in TXT...")
        
            # 1. Verifica se esiste il file di contesto
            context_file = "context.txt"
            if not os.path.exists(context_file):
                self.add_log("❌ File context.txt non trovato!")
                return None
        
            # 2. Ottieni la keyword corrente o usa un valore predefinito
            keyword = self.get_current_keyword() if hasattr(self, 'get_current_keyword') else "unknown"
        
            # 3. Crea la directory di output se non esiste
            output_dir = os.path.join(os.getcwd(), "output")
            os.makedirs(output_dir, exist_ok=True)
        
            # 4. Prepara il percorso del file di output
            import datetime
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = os.path.join(output_dir, f"analisi_{keyword}_{timestamp}.txt")
        
            # 5. Copia il file di contesto nel file di output
            import shutil
            shutil.copy2(context_file, output_path)
        
            self.add_log(f"✅ File TXT salvato: {output_path}")
            return output_path
        except Exception as e:
            self.add_log(f"❌ Errore nell'esportazione TXT: {str(e)}")
            import traceback
            self.add_log(traceback.format_exc())
            return None

    def get_current_keyword(self):
        """Recupera la keyword corrente dall'interfaccia o dai dati di progetto"""
        try:
            # Metodo 1: Controlla se la keyword è disponibile nell'interfaccia
            if hasattr(self, 'keyword') and hasattr(self.keyword, 'value'):
                return self.keyword.value or "unknown"
        
            # Metodo 2: Controlla i dati del progetto corrente
            if hasattr(self, 'current_analysis') and self.current_analysis:
                project_data = self.current_analysis.get('project_data', {})
                if 'KEYWORD' in project_data:
                    return project_data['KEYWORD']
        
            # Metodo 3: Cerca nel file di contesto
            context_file = "context.txt"
            if os.path.exists(context_file):
                with open(context_file, "r", encoding="utf-8") as f:
                    content = f.read()
                    import re
                    keyword_match = re.search(r'keyword "([^"]+)"', content, re.IGNORECASE)
                    if keyword_match:
                        return keyword_match.group(1)
        
            return "unknown"
        except Exception as e:
            self.add_log(f"⚠️ Errore nel recupero della keyword: {str(e)}")
            return "unknown"

    def create_interface(self):
        with gr.Blocks(title="PubliScript 2.0", theme="soft") as interface:
            # Header principale
            with gr.Row(elem_classes=["header-container"]):
                gr.HTML("""
                    <div class="app-header">
                        <div class="logo-container">
                            <span class="logo-icon">📕</span>
                            <h1>PubliScript 2.0</h1>
                        </div>
                        <div class="app-subtitle">Sistema Multi-Agente per Analisi e Generazione di Libri</div>
                    </div>
                """)
        
            # Sistema di tabs principale
            with gr.Tabs(elem_classes=["main-tabs"]) as tabs:
                # Tab 1: Setup & Connessione
                with gr.TabItem("1️⃣ Setup & Connessione", elem_classes=["tab-content"]):
                    with gr.Row():
                        with gr.Column(scale=1):
                            gr.Markdown("### Connessione al Servizio")
                            connect_btn = gr.Button("🔌 Connetti a Genspark", variant="primary")
                    
                            gr.Markdown("### Framework di Generazione")
                            use_crisp_toggle = gr.Checkbox(
                                label="Usa Framework CRISP",
                                value=True,
                                info="Attiva il framework CRISP per un'analisi più strutturata"
                            )
                    
                        with gr.Column(scale=2):
                            connection_status = gr.Markdown("**Stato**: Non connesso")
                    
                            # Area di log
                            self.log_output = gr.TextArea(
                                label="Console di sistema",
                                interactive=False,
                                lines=15,
                                value="Sistema inizializzato. Connettiti per iniziare.",
                                elem_id="log-output-area"
                            )
                    
                            # Pulsante per pulire i log
                            clear_log_btn = gr.Button("🧹 Pulisci Log", variant="secondary", size="sm")
            
                # Tab 2: Analisi di Mercato
                with gr.TabItem("2️⃣ Analisi di Mercato", elem_classes=["tab-content"]):
                    with gr.Row():
                        # Colonna sinistra: Input (1/3)
                        with gr.Column(scale=1, elem_classes=["input-column"]):
                            gr.Markdown("### Informazioni Base")
                        
                            book_type = gr.Dropdown(
                                choices=self.book_types,
                                label="Tipo di Libro",
                                value=self.book_types[0],
                                elem_classes=["dropdown-input"]
                            )
                        
                            keyword = gr.Textbox(
                                label="Keyword Principale",
                                placeholder="Parola chiave principale del libro",
                                elem_classes=["text-input"]
                            )
                        
                            language = gr.Dropdown(
                                choices=["English", "Español", "Français", "Deutsch", "Italiano"],
                                label="Lingua Output Analisi",
                                value="Italiano",
                                elem_classes=["dropdown-input"]
                            )
                        
                            market = gr.Dropdown(
                                choices=list(self.markets.keys()),
                                label="Mercato di Riferimento",
                                value="USA",
                                elem_classes=["dropdown-input"]
                            )
                        
                            # Opzioni avanzate
                            with gr.Accordion("Mostra opzioni avanzate", open=False):
                                analysis_prompt = gr.TextArea(
                                    label="Prompt di Analisi (opzionale)",
                                    value=self.default_analysis_prompt,
                                    lines=6
                                )
                        
                            analyze_btn = gr.Button("🔍 Analizza Mercato", variant="primary", size="lg")
                            complete_analysis_btn = gr.Button("✅ Completa Analisi", variant="secondary")
                
                        # Colonna destra: Output (2/3)
                        with gr.Column(scale=2, elem_classes=["output-column"]):
                            gr.Markdown("### Analisi di Mercato")
                        
                            # Stato analisi
                            analysis_status = gr.Markdown("**Stato analisi**: Non iniziata", elem_classes=["status-text"])
                        
                            # Pulsanti di esportazione
                            with gr.Row(elem_classes=["export-buttons"]):
                                export_docx_btn = gr.Button("📄 Esporta DOCX", variant="secondary")
                                export_pdf_btn = gr.Button("📑 Esporta PDF", variant="secondary")
                                export_txt_btn = gr.Button("📝 Esporta TXT", variant="secondary")
                        
                            # Area di output principale (formato HTML per ricchezza)
                            results_display = gr.HTML(
                                value="<div class='results-placeholder'>I risultati dell'analisi appariranno qui</div>",
                                elem_classes=["results-container"]
                            )
            
                # Tab 3: Generazione Libro
                with gr.TabItem("3️⃣ Generazione Libro", elem_classes=["tab-content"]):
                    with gr.Group(visible=True) as book_details:
                        gr.Markdown("### Dettagli Libro")
                    
                        with gr.Row():
                            with gr.Column(scale=1):
                                # Aggiungi questo campo di sola lettura per mostrare il tipo di libro
                                book_type_display = gr.Textbox(
                                    label="Tipo di Libro",
                                    value="",
                                    interactive=False,
                                    elem_classes=["text-input"]
                                )
                            
                                with gr.Row():
                                    with gr.Column(scale=1):
                                        self.book_title = gr.Textbox(
                                            label="Titolo del Libro",
                                            placeholder="Inserisci il titolo",
                                            elem_classes=["text-input"]
                                        )
                                
                                        self.book_language = gr.Textbox(
                                            label="Lingua del Libro",
                                            value="English",
                                            placeholder="es: English, Italiano, Español",
                                            elem_classes=["text-input"]
                                        )
                                
                                        self.voice_style = gr.Textbox(
                                            label="Tono di Voce",
                                            placeholder="es: Formale, Tecnico, Conversazionale",
                                            value="",
                                            elem_classes=["text-input"]
                                        )
                            
                                    with gr.Column(scale=2):
                                        self.book_index = gr.TextArea(
                                            label="Indice del Libro",
                                            placeholder="Inserisci l'indice, un capitolo per riga",
                                            lines=10,
                                            elem_classes=["text-area"]
                                        )
                            
                                generate_btn = gr.Button("📚 Genera Libro", variant="primary", size="lg")
            
                # Tab 4: Database & Gestione
                with gr.TabItem("4️⃣ Database & Gestione", elem_classes=["tab-content"]):
                    with gr.Row():
                        with gr.Column(scale=1):
                            gr.Markdown("### Progetti Salvati")
            
                            # Opzioni di manutenzione
                            with gr.Row():
                                diagnose_db_btn = gr.Button("🛠️ Ripara Database", variant="primary")
                                create_test_btn = gr.Button("🧪 Crea Progetto Test", variant="secondary")
            
                            # Ricerca e filtri
                            with gr.Row():
                                search_keyword = gr.Textbox(
                                    label="Cerca per keyword",
                                    placeholder="Inserisci una keyword...",
                                    show_label=True,
                                    elem_classes=["text-input"]
                                )
                        
                                refresh_db_btn = gr.Button("🔄 Carica Progetti", variant="primary")
                        
                            # Lista progetti
                            projects_list = gr.Dropdown(
                                label="Seleziona un Progetto",
                                choices=[],
                                interactive=True,
                                elem_id="projects_dropdown",
                                elem_classes=["dropdown-input"],
                                type="index"
                            )
      
                            self.projects_list = projects_list
                        
                            # Azioni progetti
                            with gr.Row():
                                resume_btn = gr.Button("▶️ Ripristina Analisi", variant="primary")
                                export_btn = gr.Button("📤 Esporta", variant="secondary")
                                delete_btn = gr.Button("🗑️ Elimina", variant="stop")
                
                        with gr.Column(scale=2):
                            gr.Markdown("### Dettagli Progetto")
                        
                            # Dettagli progetto in formato HTML
                            project_details = gr.HTML(
                                value="<div class='project-placeholder'>Seleziona un progetto per visualizzarne i dettagli</div>",
                                elem_classes=["project-details"]
                            )
            
                # Tab 5: Debug & Sviluppo
                with gr.TabItem("5️⃣ Debug & Sviluppo", elem_classes=["tab-content"]):
                    with gr.Row():
                        with gr.Column():
                            gr.Markdown("### Strumenti Debug")
                        
                            with gr.Row():
                                take_screenshot_btn = gr.Button("📸 Screenshot Browser", variant="secondary")
                                reset_context_btn = gr.Button("♻️ Reset Context Limit", variant="secondary")
                        
                            debug_output = gr.TextArea(
                                label="Output Debug",
                                interactive=False,
                                lines=10,
                                value=""
                            )

            # CSS personalizzato e librerie esterne
            gr.HTML("""
                <!-- Font Awesome per le icone -->
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

                <!-- Tailwind CSS per lo styling avanzato -->
                <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

                <!-- Google Fonts per tipografia migliorata (opzionale) -->
                <link rel="preconnect" href="https://fonts.googleapis.com">
                <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
                <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

                <style>
                    /* Stile generale */
                    body {
                        font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    }

                    /* Header */
                    .app-header {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        margin-bottom: 1rem;
                        background: linear-gradient(to right, #2563eb, #4f46e5);
                        color: white;
                        padding: 1rem;
                        border-radius: 0.5rem;
                        width: 100%;
                        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                    }

                    .logo-container {
                        display: flex;
                        align-items: center;
                    }

                    .logo-icon {
                        font-size: 2rem;
                        margin-right: 0.5rem;
                    }

                    .app-header h1 {
                        margin: 0;
                        font-size: 1.8rem;
                        font-weight: 700;
                    }

                    .app-subtitle {
                        margin-top: 0.25rem;
                        font-size: 1rem;
                        opacity: 0.9;
                    }

                    /* Tabs */
                    .main-tabs button {
                        font-weight: 600;
                        padding: 0.75rem 1rem;
                        transition: all 0.2s ease;
                    }

                    .main-tabs button:hover {
                        background-color: #f3f4f6;
                    }

                    .main-tabs button.active {
                        border-bottom: 2px solid #3b82f6;
                        color: #1e40af;
                    }

                    .tab-content {
                        padding: 1rem 0;
                    }

                    /* Input fields */
                    .input-column {
                        border-right: 1px solid #e5e7eb;
                        padding-right: 1rem;
                    }

                    .text-input, .dropdown-input, .text-area {
                        margin-bottom: 1rem;
                        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
                    }

                    .text-input:focus, .dropdown-input:focus, .text-area:focus {
                        border-color: #3b82f6;
                        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
                    }

                    /* Output display */
                    .status-text {
                        background-color: #f3f4f6;
                        padding: 0.5rem;
                        border-radius: 0.375rem;
                        margin-bottom: 0.5rem;
                    }

                    .export-buttons {
                        margin-bottom: 1rem;
                        padding: 0.5rem 0;
                        border-bottom: 1px solid #e5e7eb;
                    }

                    .results-container {
                        border: 1px solid #e5e7eb;
                        border-radius: 0.5rem;
                        padding: 1rem;
                        background-color: #f9fafb;
                        min-height: 500px;
                        max-height: 70vh;
                        overflow-y: auto;
                        box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);
                    }

                    .results-placeholder {
                        text-align: center;
                        color: #6b7280;
                        padding: 2rem;
                        font-style: italic;
                    }

                    /* Project details */
                    .project-details {
                        border: 1px solid #e5e7eb;
                        border-radius: 0.5rem;
                        padding: 1rem;
                        background-color: #f9fafb;
                        min-height: 400px;
                        max-height: 70vh;
                        overflow-y: auto;
                        transition: all 0.3s ease;
                    }

                    .project-details:hover {
                        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                    }

                    .project-placeholder {
                        text-align: center;
                        color: #6b7280;
                        padding: 2rem;
                        font-style: italic;
                    }

                    /* Card style per i risultati */
                    .data-card {
                        background-color: white;
                        border-radius: 0.5rem;
                        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
                        padding: 1rem;
                        margin-bottom: 1rem;
                        transition: all 0.3s ease;
                    }

                    .data-card:hover {
                        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                        transform: translateY(-2px);
                    }

                    .data-card-title {
                        font-weight: 600;
                        color: #2563eb;
                        margin-bottom: 0.5rem;
                        display: flex;
                        align-items: center;
                    }

                    .data-card-title i {
                        margin-right: 0.5rem;
                    }

                    /* Scrollbar customization */
                    *::-webkit-scrollbar {
                        width: 8px;
                    }

                    *::-webkit-scrollbar-track {
                        background: #f1f1f1;
                        border-radius: 4px;
                    }

                    *::-webkit-scrollbar-thumb {
                        background: #888;
                        border-radius: 4px;
                    }

                    *::-webkit-scrollbar-thumb:hover {
                        background: #555;
                    }

                    /* Miglioramenti per pulsanti */
                    button {
                        transition: all 0.2s ease;
                    }

                    button:hover {
                        transform: translateY(-1px);
                    }

                    button:active {
                        transform: translateY(1px);
                    }

                    /* Classi di utilità per flexbox */
                    .flex-center {
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }

                    .flex-between {
                        display: flex;
                        align-items: center;
                        justify-content: space-between;
                    }

                    /* Badge e tag */
                    .badge {
                        display: inline-block;
                        padding: 0.25rem 0.75rem;
                        border-radius: 9999px;
                        font-size: 0.75rem;
                        font-weight: 600;
                        margin-right: 0.5rem;
                    }

                    .badge-blue {
                        background-color: #dbeafe;
                        color: #1e40af;
                    }

                    .badge-green {
                        background-color: #d1fae5;
                        color: #065f46;
                    }

                    .badge-yellow {
                        background-color: #fef3c7;
                        color: #92400e;
                    }

                    .badge-red {
                        background-color: #fee2e2;
                        color: #b91c1c;
                    }

                    /* Stili per i risultati dell'analisi */
                    .analysis-results .section-card {
                        transition: all 0.2s ease;
                    }

                    .analysis-results .section-card:hover {
                        transform: translateY(-2px);
                    }

                    .analysis-results .badge {
                        display: inline-block;
                        padding: 0.25rem 0.75rem;
                        border-radius: 9999px;
                        font-size: 0.75rem;
                        font-weight: 600;
                    }

                    .analysis-results .content {
                        font-size: 0.9rem;
                        line-height: 1.5;
                    }

                    .metadata-box {
                        border-left: 4px solid #3b82f6;
                    }

                    .metadata-item {
                        margin-bottom: 0.5rem;
                    }
                </style>

                <!-- Script per migliorare l'interattività -->
                <script>
                    document.addEventListener('DOMContentLoaded', function() {
                        // Seleziona tutti i tab e aggiunge la classe active al primo
                        setTimeout(function() {
                            const tabs = document.querySelectorAll('.main-tabs button');
                            if (tabs.length > 0) {
                                tabs[0].classList.add('active');
                            }

                            // Aggiungi event listener per cambiare il tab attivo
                            tabs.forEach(tab => {
                                tab.addEventListener('click', function() {
                                    tabs.forEach(t => t.classList.remove('active'));
                                    this.classList.add('active');
                                });
                            });
                        }, 300);
                    });
                </script>
            """)
       
            # Function handlers
    
            # Funzione per pulire i log
            def clear_logs():
                self.log_history = ["Log cancellato."]
                return self.chat_manager.get_log_history_string()
    
            clear_log_btn.click(fn=clear_logs, outputs=self.log_output)
    
            # Connessione
            connect_btn.click(
                fn=self.connect_callback,
                outputs=[self.log_output, connection_status],
                show_progress=False
            )
    
            # Uso CRISP
            use_crisp_toggle.change(
                fn=self._set_use_crisp,
                inputs=use_crisp_toggle,
                outputs=self.log_output
            )
    
            # Analisi mercato
            analyze_btn.click(
                fn=self.analyze_market,
                inputs=[book_type, keyword, language, market, analysis_prompt],
                outputs=self.log_output,
                show_progress=False
            )
    
            # Completa analisi
            complete_analysis_btn.click(
                fn=self.complete_analysis,
                outputs=[self.log_output, analysis_status, tabs, self.book_title, self.book_index, self.voice_style]
            )
    
            # Generazione libro
            generate_btn.click(
                fn=self.generate_book,
                inputs=[self.book_title, self.book_language, self.voice_style, self.book_index],
                outputs=self.log_output
            )
    
            # Database e gestione progetti
            refresh_db_btn.click(
                fn=self.load_projects_list,
                outputs=[projects_list]
            )

            # AGGIUNGI QUESTO
            create_test_btn.click(
                fn=self.create_test_project,
                outputs=[project_details]
            )
    
            projects_list.change(
                fn=self.load_project_details,
                inputs=projects_list,
                outputs=[project_details]
            )
    
            resume_btn.click(
                fn=self.ripristina_analisi_da_database,
                inputs=projects_list,
                outputs=self.log_output
            )
    
            export_btn.click(
                fn=self.export_project,
                inputs=projects_list,
                outputs=self.log_output
            )
    
            delete_btn.click(
                fn=lambda project_name: [
                    self.delete_project(project_name),
                    self.load_projects_list(),
                    "<div style='text-align: center'><p>Progetto eliminato</p></div>"
                ],
                inputs=projects_list,
                outputs=[self.log_output, projects_list, project_details]
            )
    
            # Debug tools
            take_screenshot_btn.click(
                fn=lambda: self.take_debug_screenshot("debug"),
                outputs=debug_output
            )
    
            reset_context_btn.click(
                fn=self.handle_context_limit,
                outputs=self.log_output
            )

            # Connetti gli eventi per i pulsanti di esportazione
            export_docx_btn.click(
                fn=self.export_to_docx,
                outputs=[self.log_output]
            )
    
            export_pdf_btn.click(
                fn=self.export_to_pdf,
                outputs=[self.log_output]
            )
    
            export_txt_btn.click(
                fn=self.export_to_txt,
                outputs=[self.log_output]
            )
    
            # AGGIUNGI QUESTO
            diagnose_db_btn.click(
                fn=self.diagnose_and_fix_database,
                outputs=[project_details]  # Mostra risultati nel riquadro dettagli progetto
            )

            return interface

    def format_analysis_results_html(self, keyword, market, book_type, language, context=None):
        # """
        # Formatta i risultati dell'analisi in HTML per una visualizzazione migliore.
        #
        # Args:
        #     keyword: Keyword analizzata
        #     market: Mercato target
        #     book_type: Tipo di libro
        #     language: Lingua dell'output
        #     context: Dati di contesto aggiuntivi (opzionale)
        #
        # Returns:
        #     str: HTML formattato con i risultati
        # """
        try:
            self.add_log("🎨 Formattazione risultati in HTML")
        
            # 1. Leggi il file di contesto
            context_file = "context.txt"
            context_content = ""
            if os.path.exists(context_file):
                with open(context_file, "r", encoding="utf-8") as f:
                    context_content = f.read()
                    self.add_log(f"✅ File contesto letto: {len(context_content)} caratteri")
            else:
                self.add_log("⚠️ File context.txt non trovato")
        
            # 2. Estrai le sezioni dell'analisi
            sections = []
            section_pattern = r'===\s+([^=]+?)\s+-\s+\d{8}_\d{6}\s+===\n(.*?)(?=\n===|$)'
            section_matches = re.findall(section_pattern, context_content, re.DOTALL)
        
            if section_matches:
                sections = [(title.strip(), content.strip()) for title, content in section_matches]
                self.add_log(f"✅ Estratte {len(sections)} sezioni dal contesto")
            else:
                # Fallback: divide il testo per numeri progressivi
                number_pattern = r'(\d+\).*?)(?=\d+\)|$)'
                number_matches = re.findall(number_pattern, context_content, re.DOTALL)
            
                if number_matches:
                    sections = [(f"Sezione {i+1}", content.strip()) for i, content in enumerate(number_matches)]
                    self.add_log(f"✅ Estratte {len(sections)} sezioni numeriche alternate")
                else:
                    # Ultimo fallback: usa il testo completo come sezione unica
                    sections = [("Risultati completi", context_content)]
                    self.add_log("⚠️ Impossibile estrarre sezioni, usando contenuto completo")
        
            # 3. Estrai metadati chiave dal context dictionary se disponibile
            metadata_html = ""
            if context and isinstance(context, dict):
                # Estrai solo metadati selezionati
                important_metadata = [
                    ('MARKET_INSIGHTS', 'Insight di Mercato'),
                    ('BUYER_PERSONA_SUMMARY', 'Profilo Buyer Persona'),
                    ('ANGOLO_ATTACCO', 'Angolo di Attacco'),
                    ('PROMESSA_PRINCIPALE', 'Promessa Principale'),
                    ('BIG_IDEA', 'Big Idea'),
                    ('TITOLO_LIBRO', 'Titolo Proposto')
                ]
            
                metadata_items = []
                for key, label in important_metadata:
                    if key in context and context[key]:
                        value = context[key]
                        # Limita lunghezza per non sovraccaricare la UI
                        if isinstance(value, str) and len(value) > 200:
                            value = value[:197] + "..."
                        metadata_items.append(f"<div class='metadata-item'><strong>{label}:</strong> {value}</div>")
            
                if metadata_items:
                    metadata_html = f"""
                    <div class="metadata-box bg-blue-50 p-4 rounded-lg mb-4">
                        <h3 class="text-md font-bold mb-2 text-blue-800">Dati Chiave Estratti:</h3>
                        {"".join(metadata_items)}
                    </div>
                    """
                    self.add_log(f"✅ Generati metadati HTML con {len(metadata_items)} elementi")
        
            # 4. Costruisci l'HTML completo
            result_html = f"""
            <div class="analysis-results">
                <div class="header bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 rounded-lg mb-4">
                    <h2 class="text-xl font-bold">Analisi di Mercato: {keyword}</h2>
                    <div class="flex flex-wrap gap-2 mt-2">
                        <div class="badge bg-blue-200 text-blue-800 px-2 py-1 rounded">Mercato: {market}</div>
                        <div class="badge bg-blue-200 text-blue-800 px-2 py-1 rounded">Tipo: {book_type}</div>
                        <div class="badge bg-blue-200 text-blue-800 px-2 py-1 rounded">Lingua: {language}</div>
                    </div>
                </div>
        
                {metadata_html}
        
                <div class="results-container">
            """
        
            # 5. Aggiungi ciascuna sezione come card
            for title, content in sections:
                # Pulisci il titolo
                clean_title = re.sub(r'\d+\)\s*', '', title).strip()
                clean_title = clean_title.replace('**', '')  # Rimuovi markdown
            
                # Determina l'icona in base al titolo
                icon = "📊"  # Default
                if "concorrenti" in title.lower() or "top 3" in title.lower():
                    icon = "🏆"
                elif "profittabilità" in title.lower():
                    icon = "💰"
                elif "buyer persona" in title.lower():
                    icon = "👤"
                elif "recensioni" in title.lower() or "gap" in title.lower():
                    icon = "🔍"
                elif "angolo" in title.lower() or "usp" in title.lower():
                    icon = "🎯"
                elif "titolo" in title.lower():
                    icon = "📝"
                elif "indice" in title.lower():
                    icon = "📑"
            
                # Aggiungi la card della sezione
                result_html += f"""
                <div class="section-card bg-white p-4 rounded-lg shadow mb-4 hover:shadow-lg transition-shadow">
                    <h3 class="text-lg font-bold mb-2 text-gray-800">{icon} {clean_title}</h3>
                    <div class="content whitespace-pre-line text-gray-700">{content}</div>
                </div>
                """
        
            # 6. Chiudi l'HTML
            result_html += """
                </div>
            </div>
            """
        
            self.add_log("✅ HTML dei risultati generato con successo")
            return result_html
    
        except Exception as e:
            error_html = f"""
            <div class="error-message bg-red-50 border-l-4 border-red-500 p-4">
                <h3 class="text-red-700 font-bold">Errore nella formattazione dei risultati</h3>
                <p class="text-red-600">{str(e)}</p>
                <p class="text-gray-700 mt-2">I dati sono stati salvati ma non possono essere visualizzati correttamente.</p>
            </div>
            """
            self.add_log(f"❌ Errore nella formattazione HTML: {str(e)}")
            import traceback
            self.add_log(traceback.format_exc())
            return error_html

    def process_text(self, text):
        """Processa il testo con formattazione di base"""
        if not text:
            return "<em class='text-gray-500'>Nessun dato disponibile</em>"
        
        # Sostituisci ** con tag bold
        if '**' in text:
            parts = text.split('**')
            result = ""
            for i, part in enumerate(parts):
                if i % 2 == 0:  # Testo normale
                    result += part
                else:  # Testo in grassetto
                    result += f"<strong>{part}</strong>"
            return result
    
        return text

    def process_list_html(self, content, list_type):
        """Formatta una lista in HTML"""
        if not content:
            return "<p>Nessun elemento disponibile</p>"
    
        # Estrai elementi della lista
        items = []
        current_item = ""
    
        # Dividi per righe e cerca elementi numerati o con trattino
        for line in content.strip().split('\n'):
            line = line.strip()
            if line.startswith('- ') or re.match(r'^\d+\.', line):
                if current_item:
                    items.append(current_item)
                # Rimuovi il prefisso (- o numero.)
                if line.startswith('- '):
                    current_item = line[2:]
                else:
                    # Trova la posizione del punto
                    dot_pos = line.find('.')
                    if dot_pos > 0:
                        current_item = line[dot_pos + 1:].strip()
            elif line:
                if current_item:
                    current_item += " " + line
                else:
                    current_item = line
    
        if current_item:
            items.append(current_item)
    
        if not items:
            return f"<p>{self.process_text(content)}</p>"
    
        # Definisci classi CSS in base al tipo
        bg_class = ""
        if list_type == "REVIEW_INSIGHTS":
            bg_class = "bg-red-50"
        elif list_type == "IMPLEMENTATION_OBSTACLES":
            bg_class = "bg-yellow-50"
        elif list_type == "MARKET_GAPS":
            bg_class = "bg-green-50"
    
        # Crea la lista HTML
        html = '<ul class="space-y-3">'
        for i, item in enumerate(items):
            html += f"""
            <li class="{bg_class} p-3 rounded-lg flex items-start">
                <div class="rounded-full bg-blue-100 text-blue-800 h-6 w-6 flex items-center justify-center mr-3 mt-1 flex-shrink-0">{i+1}</div>
                <div>
                    <p class="font-medium">{self.process_text(item)}</p>
                </div>
            </li>
            """
        html += '</ul>'
    
        return html

    def process_patterns_html(self, content, pattern_type):
        """Formatta pattern di titoli o strutture in HTML"""
        if not content:
            return "<p>Nessun pattern disponibile</p>"
    
        # Semplice controllo per tabelle
        if content.strip().startswith('|') and content.strip().endswith('|'):
            return self.process_table_html(content)
    
        # Estrai pattern
        patterns = []
        current_pattern = ""
    
        for line in content.strip().split('\n'):
            line = line.strip()
            if line.startswith('- ') or re.match(r'^\d+\.', line):
                if current_pattern:
                    patterns.append(current_pattern)
                # Rimuovi il prefisso (- o numero.)
                if line.startswith('- '):
                    current_pattern = line[2:]
                else:
                    # Trova la posizione del punto
                    dot_pos = line.find('.')
                    if dot_pos > 0:
                        current_pattern = line[dot_pos + 1:].strip()
            elif line:
                if current_pattern:
                    current_pattern += " " + line
                else:
                    current_pattern = line
    
        if current_pattern:
            patterns.append(current_pattern)
    
        if not patterns:
            return f"<p>{self.process_text(content)}</p>"
    
        # Crea layout appropriato in base al tipo
        if pattern_type == "TITLE_PATTERNS":
            html = '<div class="space-y-3">'
            for i, pattern in enumerate(patterns):
                # Dividi il pattern in titolo e esempio
                parts = pattern.split(' - ', 1)
                title = parts[0].strip()
                example = parts[1].strip() if len(parts) > 1 else ""
            
                html += f"""
                <div class="bg-blue-50 p-3 rounded-lg">
                    <span class="badge bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs">Pattern {i+1}</span>
                    <span class="font-semibold">{self.process_text(title)}</span>
                    <p class="mt-1 text-gray-700">Es: <span class="italic">{self.process_text(example)}</span></p>
                </div>
                """
            html += '</div>'
        else:  # STRUCTURE_PATTERNS
            html = '<div class="grid grid-cols-2 gap-4">'
            for i, pattern in enumerate(patterns):
                # Dividi in titolo e descrizione
                parts = pattern.split(':', 1)
                title = parts[0].strip()
                description = parts[1].strip() if len(parts) > 1 else ""
            
                html += f"""
                <div class="bg-indigo-50 p-3 rounded-lg">
                    <h4 class="font-semibold text-indigo-700">{self.process_text(title)}</h4>
                    <p class="mt-2">{self.process_text(description)}</p>
                </div>
                """
            html += '</div>'
    
        return html

    def process_table_html(self, content):
        """Converte una tabella in formato markdown in HTML"""
        if not content or '|' not in content:
            return f"<p>{self.process_text(content)}</p>"
    
        # Dividi le righe
        rows = content.strip().split('\n')
    
        # Se non abbiamo almeno 2 righe (intestazione + separatore), non è una tabella valida
        if len(rows) < 2:
            return f"<p>{self.process_text(content)}</p>"
    
        html = '<div class="overflow-x-auto"><table class="data-table w-full">'
    
        # Processa intestazione
        header_cells = [cell.strip() for cell in rows[0].strip('|').split('|')]
    
        html += '<thead><tr>'
        for cell in header_cells:
            html += f'<th class="text-left py-2 px-4 bg-gray-50">{self.process_text(cell)}</th>'
        html += '</tr></thead><tbody>'
    
        # Salta l'intestazione e il separatore
        for row in rows[2:]:
            if '---' in row:  # Ignora eventuali altri separatori
                continue
            
            cells = [cell.strip() for cell in row.strip('|').split('|')]
            html += '<tr>'
            for cell in cells:
                html += f'<td class="py-2 px-4 border-t">{self.process_text(cell)}</td>'
            html += '</tr>'
    
        html += '</tbody></table></div>'
        return html

# AGGIUNGERE QUESTO CODICE ALLA FINE DEL FILE genschat_gui.py
# Dopo il codice del punto 4, prima del blocco if __name__ == "__main__":

# Salva il riferimento al metodo originale
original_send_to_genspark = AIBookBuilder.send_to_genspark

def debug_send_to_genspark(self, text, prompt_id=None, section_number=None):
    """Versione con debug del metodo send_to_genspark"""
    print(f"DEBUG_SEND: Invio testo a Genspark ({len(text)} caratteri)")
    print(f"DEBUG_SEND: Primi 50 caratteri del testo: {text[:50]}")
    if prompt_id:
        print(f"DEBUG_SEND: Prompt ID: {prompt_id}, Sezione: {section_number}")
    if hasattr(self, 'driver') and self.driver:
        print(f"DEBUG_SEND: URL attuale prima dell'invio: {self.driver.current_url}")
    import traceback
    caller = traceback.extract_stack()[-2]
    print(f"DEBUG_SEND: Chiamata da {caller.filename}:{caller.lineno}")
    result = original_send_to_genspark(self, text)
    if hasattr(self, 'driver') and self.driver:
        print(f"DEBUG_SEND: URL attuale dopo l'invio: {self.driver.current_url}")
    if result:
        has_end = "FINE_RISPOSTA" in result or "FINE" in result
        print(f"DEBUG_SEND: Risultato ({len(result)} chars) - Contiene FINE_RISPOSTA: {has_end}")  # Modificato qui
        print(f"DEBUG_SEND: Preview inizio: {result[:100]}...")
        # Mostra anche gli ultimi 200 caratteri per vedere FINE_RISPOSTA
        if len(result) > 200:
            print(f"DEBUG_SEND: Preview fine: ...{result[-200:]}")
        else:
            print(f"DEBUG_SEND: Preview fine: {result}")
    else:
        print("DEBUG_SEND: Nessun risultato ottenuto")
    return result

# Sostituisci il metodo originale con quello di debug
AIBookBuilder.send_to_genspark = debug_send_to_genspark
